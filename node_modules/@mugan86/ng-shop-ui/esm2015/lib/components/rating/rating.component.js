import { __decorate } from "tslib";
import { Component, Input } from '@angular/core';
let RatingComponent = class RatingComponent {
    constructor() {
        this.min = 1;
        this.max = 5;
        this.rating = undefined;
    }
    ngOnInit() {
        if (this.rating === undefined || this.rating === null) {
            this.rating.value = 0;
            this.rating.count = 0;
        }
        this.starsCssValues = Array(this.max).fill('');
    }
};
__decorate([
    Input()
], RatingComponent.prototype, "min", void 0);
__decorate([
    Input()
], RatingComponent.prototype, "max", void 0);
__decorate([
    Input()
], RatingComponent.prototype, "rating", void 0);
RatingComponent = __decorate([
    Component({
        selector: 'shop-rating',
        template: "<div *ngIf=\"starsCssValues && rating.value\">\n  <span *ngFor=\"let v of starsCssValues; let i = index\">\n    <i class=\"fas fa-star\" [ngClass]=\"{ checked: rating.value >= i + 1 }\"></i>\n  </span>\n  {{ rating.value }} ({{ rating.count }})\n</div>\n",
        styles: [`
      .checked {
        color: orange;
      }

      .star,
      .star-20,
      .star-100 {
        color: transparent;
        -webkit-background-clip: text;
        background-clip: text;
      }

      .star-20 {
        background-image: -webkit-gradient(
          linear,
          left top,
          right top,
          color-stop(0.25, orange),
          color-stop(1, black)
        );
        background-image: gradient(
          linear,
          left top,
          right top,
          color-stop(0.25, orange),
          color-stop(1, black)
        );
      }

      .star-100 {
        background-image: -webkit-gradient(
          linear,
          left top,
          right top,
          color-stop(1, orange)
        );
        background-image: gradient(
          linear,
          left top,
          right top,
          color-stop(1, orange)
        );
      }
    `]
    })
], RatingComponent);
export { RatingComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF0aW5nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BtdWdhbjg2L25nLXNob3AtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9yYXRpbmcvcmF0aW5nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFxRHpELElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7SUFBNUI7UUFDVyxRQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ1IsUUFBRyxHQUFHLENBQUMsQ0FBQztRQUNSLFdBQU0sR0FBZ0IsU0FBUyxDQUFDO0lBUzNDLENBQUM7SUFQQyxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLElBQUksRUFBRTtZQUNyRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNqRCxDQUFDO0NBQ0YsQ0FBQTtBQVhVO0lBQVIsS0FBSyxFQUFFOzRDQUFTO0FBQ1I7SUFBUixLQUFLLEVBQUU7NENBQVM7QUFDUjtJQUFSLEtBQUssRUFBRTsrQ0FBaUM7QUFIOUIsZUFBZTtJQW5EM0IsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGFBQWE7UUFDdkIsMFFBQXNDO2lCQUVwQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0E0Q0M7S0FFSixDQUFDO0dBQ1csZUFBZSxDQVkzQjtTQVpZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJUmF0aW5nSXRlbSB9IGZyb20gJy4vLi4vLi4vaW50ZXJmYWNlcy9yYXRpbmctaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3Nob3AtcmF0aW5nJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3JhdGluZy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlczogW1xuICAgIGBcbiAgICAgIC5jaGVja2VkIHtcbiAgICAgICAgY29sb3I6IG9yYW5nZTtcbiAgICAgIH1cblxuICAgICAgLnN0YXIsXG4gICAgICAuc3Rhci0yMCxcbiAgICAgIC5zdGFyLTEwMCB7XG4gICAgICAgIGNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgLXdlYmtpdC1iYWNrZ3JvdW5kLWNsaXA6IHRleHQ7XG4gICAgICAgIGJhY2tncm91bmQtY2xpcDogdGV4dDtcbiAgICAgIH1cblxuICAgICAgLnN0YXItMjAge1xuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiAtd2Via2l0LWdyYWRpZW50KFxuICAgICAgICAgIGxpbmVhcixcbiAgICAgICAgICBsZWZ0IHRvcCxcbiAgICAgICAgICByaWdodCB0b3AsXG4gICAgICAgICAgY29sb3Itc3RvcCgwLjI1LCBvcmFuZ2UpLFxuICAgICAgICAgIGNvbG9yLXN0b3AoMSwgYmxhY2spXG4gICAgICAgICk7XG4gICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IGdyYWRpZW50KFxuICAgICAgICAgIGxpbmVhcixcbiAgICAgICAgICBsZWZ0IHRvcCxcbiAgICAgICAgICByaWdodCB0b3AsXG4gICAgICAgICAgY29sb3Itc3RvcCgwLjI1LCBvcmFuZ2UpLFxuICAgICAgICAgIGNvbG9yLXN0b3AoMSwgYmxhY2spXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC5zdGFyLTEwMCB7XG4gICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IC13ZWJraXQtZ3JhZGllbnQoXG4gICAgICAgICAgbGluZWFyLFxuICAgICAgICAgIGxlZnQgdG9wLFxuICAgICAgICAgIHJpZ2h0IHRvcCxcbiAgICAgICAgICBjb2xvci1zdG9wKDEsIG9yYW5nZSlcbiAgICAgICAgKTtcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogZ3JhZGllbnQoXG4gICAgICAgICAgbGluZWFyLFxuICAgICAgICAgIGxlZnQgdG9wLFxuICAgICAgICAgIHJpZ2h0IHRvcCxcbiAgICAgICAgICBjb2xvci1zdG9wKDEsIG9yYW5nZSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICBgLFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBSYXRpbmdDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBtaW4gPSAxO1xuICBASW5wdXQoKSBtYXggPSA1O1xuICBASW5wdXQoKSByYXRpbmc6IElSYXRpbmdJdGVtID0gdW5kZWZpbmVkO1xuICBzdGFyc0Nzc1ZhbHVlcztcbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMucmF0aW5nID09PSB1bmRlZmluZWQgfHwgdGhpcy5yYXRpbmcgPT09IG51bGwpIHtcbiAgICAgIHRoaXMucmF0aW5nLnZhbHVlID0gMDtcbiAgICAgIHRoaXMucmF0aW5nLmNvdW50ID0gMDtcbiAgICB9XG4gICAgdGhpcy5zdGFyc0Nzc1ZhbHVlcyA9IEFycmF5KHRoaXMubWF4KS5maWxsKCcnKTtcbiAgfVxufVxuIl19