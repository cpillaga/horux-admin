{"version":3,"sources":["../../projects/pixel/src/lib/pixel.service.ts","../../projects/pixel/src/lib/pixel.module.ts"],"names":["PixelService","config","injectedDocument","platformId","router","rendererFactory","_this","this","doc","renderer","createRenderer","events","pipe","filter","event","NavigationEnd","subscribe","isLoaded","track","prototype","initialize","pixelId","console","warn","enabled","addPixelScript","remove","removePixelScript","eventName","properties","isPlatformBrowser","fbq","trackCustom","pixelCode","scriptElement","createElement","setAttribute","setProperty","appendChild","head","pixelElement","getElementById","Injectable","args","providedIn","Inject","DOCUMENT","Object","decorators","type","PLATFORM_ID","Router","Optional","RendererFactory2","PixelModule","pixel","Error","forRoot","verifyPixelId","ngModule","providers","provide","useValue","length","NgModule","imports"],"mappings":"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","sourcesContent":["import { PixelEventName, PixelConfiguration, PixelEventProperties } from './pixel.models';\nimport { Inject, Injectable, Optional, PLATFORM_ID, Renderer2, RendererFactory2 } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { filter } from 'rxjs/operators';\n\ndeclare const fbq: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PixelService {\n\n  private doc: Document;\n  private renderer: Renderer2\n\n  constructor(\n    @Inject('config') private config: PixelConfiguration,\n    @Inject(DOCUMENT) private injectedDocument: any,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Optional() private router: Router,\n    private rendererFactory: RendererFactory2\n  ) {\n\n    // DOCUMENT cannot be injected directly as Document type, see https://github.com/angular/angular/issues/20351\n    // It is therefore injected as any and then cast to Document\n    this.doc = injectedDocument as Document;\n    this.renderer = rendererFactory.createRenderer(null, null);\n\n    if (router) {\n      // Log page views after router navigation ends\n      router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(event => {\n\n        if (this.isLoaded()) {\n          this.track('PageView');\n        }\n\n      });\n    }\n\n  }\n\n  /**\n   * Initialize the Pixel tracking script\n   * - Adds the script to page's head\n   * - Tracks first page view\n   */\n  initialize(pixelId = this.config.pixelId): void {\n    if (this.isLoaded()) {\n      console.warn('Tried to initialize a Pixel instance while another is already active. Please call `remove()` before initializing a new instance.');\n      return;\n    }\n    this.config.enabled = true;\n    this.addPixelScript(pixelId);\n  }\n\n  /** Remove the Pixel tracking script */\n  remove(): void {\n    this.removePixelScript();\n    this.config.enabled = false;\n  }\n\n  /**\n   * Track a Standard Event as predefined by Facebook\n   *\n   * See {@link https://developers.facebook.com/docs/facebook-pixel/reference Facebook Pixel docs - reference}\n   * @param eventName The name of the event that is being tracked\n   * @param properties Optional properties of the event\n   */\n  track(\n    eventName: PixelEventName,\n    properties?: PixelEventProperties\n  ): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    if (!this.isLoaded()) {\n      console.warn('Tried to track an event without initializing a Pixel instance. Call `initialize()` first.');\n      return;\n    }\n\n    if (properties) {\n      fbq('track', eventName, properties);\n    } else {\n      fbq('track', eventName);\n    }\n\n  }\n\n  /**\n   * Track a custom Event\n   *\n   * See {@link https://developers.facebook.com/docs/facebook-pixel/implementation/conversion-tracking#custom-conversions Facebook Pixel docs - custom conversions}\n   * @param eventName The name of the event that is being tracked\n   * @param properties Optional properties of the event\n   */\n  trackCustom(eventName: string, properties?: object): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    if (!this.isLoaded()) {\n      console.warn('Tried to track an event without initializing a Pixel instance. Call `initialize()` first.');\n      return;\n    }\n\n    if (properties) {\n      fbq('trackCustom', eventName, properties);\n    } else {\n      fbq('trackCustom', eventName);\n    }\n  }\n\n  /**\n   * Adds the Facebook Pixel tracking script to the application\n   * @param pixelId The Facebook Pixel ID to use\n   */\n  private addPixelScript(pixelId: string): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const pixelCode = `\n    var pixelCode = function(f,b,e,v,n,t,s)\n    {if(f.fbq)return;n=f.fbq=function(){n.callMethod?\n    n.callMethod.apply(n,arguments):n.queue.push(arguments)};\n    if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';\n    n.queue=[];t=b.createElement(e);t.async=!0;\n    t.src=v;s=b.getElementsByTagName(e)[0];\n    s.parentNode.insertBefore(t,s)}(window, document,'script',\n    'https://connect.facebook.net/en_US/fbevents.js');\n    fbq('init', '${pixelId}');\n    fbq('track', 'PageView');`;\n\n\n    const scriptElement = this.renderer.createElement('script');\n    this.renderer.setAttribute(scriptElement, 'id', 'pixel-script');\n    this.renderer.setAttribute(scriptElement, 'type', 'text/javascript');\n    this.renderer.setProperty(scriptElement, 'innerHTML', pixelCode);\n    this.renderer.appendChild(this.doc.head, scriptElement);\n  }\n\n  /** Remove Facebook Pixel tracking script from the application */\n  private removePixelScript(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n    const pixelElement = this.doc.getElementById('pixel-script');\n    if (pixelElement) {\n      pixelElement.remove();\n    }\n  }\n\n  /** Checks if the script element is present */\n  private isLoaded(): boolean {\n    if (isPlatformBrowser(this.platformId)) {\n      const pixelElement = this.doc.getElementById('pixel-script');\n      return !!pixelElement;\n    }\n    return false;\n  }\n\n}\n","import { PixelConfiguration } from './pixel.models';\nimport { Inject, ModuleWithProviders, NgModule, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { PixelService } from './pixel.service';\n\n@NgModule({\n  imports: [],\n})\nexport class PixelModule {\n\n  private static config: PixelConfiguration | null = null;\n\n  constructor(\n    private pixel: PixelService,\n    @Inject(PLATFORM_ID) platformId: Object\n  ) {\n    if (!PixelModule.config) {\n      throw Error('ngx-pixel not configured correctly. Pass the `pixelId` property to the `forRoot()` function');\n    }\n    if (PixelModule.config.enabled && isPlatformBrowser(platformId)) {\n      this.pixel.initialize();\n    }\n  }\n\n  /**\n   * Initiale the Facebook Pixel Module\n   *\n   * Add your Pixel ID as parameter\n   */\n  static forRoot(config: PixelConfiguration): ModuleWithProviders<PixelModule> {\n    this.config = config;\n    const pixelId = config.pixelId;\n    this.verifyPixelId(pixelId);\n\n    return {\n      ngModule: PixelModule,\n      providers: [PixelService, { provide: 'config', useValue: config }]\n    };\n  }\n\n  /**\n   * Verifies the Pixel ID that was passed into the configuration.\n   * - Checks if Pixel was initialized\n   * @param pixelId Pixel ID to verify\n   */\n  private static verifyPixelId(pixelId: string): void {\n    // Have to verify first that all Pixel IDs follow the same 15 digit format\n    if (pixelId === null || pixelId === undefined || pixelId.length === 0) {\n      throw Error('Invalid Facebook Pixel ID. Did you pass the ID into the forRoot() function?');\n    }\n  }\n\n}\n"]}