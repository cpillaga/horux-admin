import { __decorate, __metadata, __read } from "tslib";
import { Injectable, Renderer2 } from '@angular/core';
import { FileUploadTypes } from './../helpers/file-types.class';
import { IsNullOrEmpty } from './../helpers/helpers.class';
var FileUploadService = /** @class */ (function () {
    function FileUploadService(renderer) {
        this.renderer = renderer;
        this.extensions = ['B', 'KB', 'MB', 'GB'];
        this.sizeRegex = new RegExp("^(\\d+)(?:\\s{0,1})(" + this.extensions.join('|') + ")?$", 'i');
    }
    FileUploadService.prototype.isFileDragDropAvailable = function () {
        var div = this.renderer.createElement('div');
        return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div));
    };
    FileUploadService.prototype.parseSize = function (value) {
        if (IsNullOrEmpty(value)) {
            return 0;
        }
        if (typeof value === 'number') {
            return value;
        }
        var _a = __read(value.match(this.sizeRegex) || [null, '0', 'B'], 3), size = _a[1], extension = _a[2];
        var i = IsNullOrEmpty(extension) ? 0 : this.extensions.indexOf(extension.toUpperCase());
        return parseInt(size, 10) * Math.pow(1024, i < 0 ? 0 : i);
    };
    FileUploadService.prototype.formatSize = function (size) {
        return this.calculateSize(size);
    };
    FileUploadService.prototype.calculateSize = function (size, extensionIndex) {
        if (extensionIndex === void 0) { extensionIndex = 0; }
        if (isNaN(size)) {
            size = 0;
        }
        if (size < 1024) {
            return Math.round(size * 100) / 100 + " " + this.extensions[extensionIndex];
        }
        return this.calculateSize(size / 1024, extensionIndex + 1);
    };
    FileUploadService.prototype.getFileType = function (file) {
        return Object.keys(FileUploadTypes).find(function (key) { return FileUploadTypes[key] === file.type; });
    };
    FileUploadService.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    FileUploadService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [Renderer2])
    ], FileUploadService);
    return FileUploadService;
}());
export { FileUploadService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11cGxvYWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpcGxhYi9uZ3gtZmlsZS11cGxvYWQvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZmlsZS11cGxvYWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUszRDtJQU1JLDJCQUFvQixRQUFtQjtRQUFuQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBSnRCLGVBQVUsR0FBaUIsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVuRCxjQUFTLEdBQUcsSUFBSSxNQUFNLENBQUMseUJBQXVCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFHcEcsQ0FBQztJQUVNLG1EQUF1QixHQUE5QjtRQUNJLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLE9BQU8sQ0FBQyxDQUFDLFdBQVcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxHQUFHLElBQUksUUFBUSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVNLHFDQUFTLEdBQWhCLFVBQWlCLEtBQXNCO1FBQ25DLElBQUksYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sQ0FBQyxDQUFDO1NBQ1o7UUFFRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUMzQixPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUVLLElBQUEsK0RBQXFFLEVBQWxFLFlBQUksRUFBRSxpQkFBNEQsQ0FBQztRQUM1RSxJQUFNLENBQUMsR0FBSSxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBVyxDQUFDLENBQUM7UUFFcEcsT0FBTyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVNLHNDQUFVLEdBQWpCLFVBQWtCLElBQVk7UUFDMUIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFTyx5Q0FBYSxHQUFyQixVQUFzQixJQUFZLEVBQUUsY0FBMEI7UUFBMUIsK0JBQUEsRUFBQSxrQkFBMEI7UUFDMUQsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDYixJQUFJLEdBQUcsQ0FBQyxDQUFDO1NBQ1o7UUFFRCxJQUFJLElBQUksR0FBRyxJQUFJLEVBQUU7WUFDYixPQUFVLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsU0FBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBRyxDQUFDO1NBQy9FO1FBRUQsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksR0FBRyxJQUFJLEVBQUUsY0FBYyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFTSx1Q0FBVyxHQUFsQixVQUFtQixJQUFVO1FBQ3pCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxHQUFHLElBQUssT0FBQSxlQUFlLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksRUFBbEMsQ0FBa0MsQ0FBQyxDQUFDO0lBQzFGLENBQUM7O2dCQXpDNkIsU0FBUzs7SUFOOUIsaUJBQWlCO1FBRDdCLFVBQVUsRUFBRTt5Q0FPcUIsU0FBUztPQU45QixpQkFBaUIsQ0FnRDdCO0lBQUQsd0JBQUM7Q0FBQSxBQWhERCxJQWdEQztTQWhEWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRmlsZVVwbG9hZFR5cGVzIH0gZnJvbSAnLi8uLi9oZWxwZXJzL2ZpbGUtdHlwZXMuY2xhc3MnO1xyXG5pbXBvcnQgeyBJc051bGxPckVtcHR5IH0gZnJvbSAnLi8uLi9oZWxwZXJzL2hlbHBlcnMuY2xhc3MnO1xyXG5cclxuZXhwb3J0IHR5cGUgSVNpemUgPSAnQicgfCAnS0InIHwgJ01CJyB8ICdHQic7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGaWxlVXBsb2FkU2VydmljZSB7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBleHRlbnNpb25zOiBBcnJheTxJU2l6ZT4gPSBbJ0InLCAnS0InLCAnTUInLCAnR0InXTtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNpemVSZWdleCA9IG5ldyBSZWdFeHAoYF4oXFxcXGQrKSg/OlxcXFxzezAsMX0pKCR7dGhpcy5leHRlbnNpb25zLmpvaW4oJ3wnKX0pPyRgLCAnaScpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpc0ZpbGVEcmFnRHJvcEF2YWlsYWJsZSgpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBkaXYgPSB0aGlzLnJlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHJldHVybiAoKCdkcmFnZ2FibGUnIGluIGRpdikgfHwgKCdvbmRyYWdzdGFydCcgaW4gZGl2ICYmICdvbmRyb3AnIGluIGRpdikpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwYXJzZVNpemUodmFsdWU6IHN0cmluZyB8IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgaWYgKElzTnVsbE9yRW1wdHkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgWywgc2l6ZSwgZXh0ZW5zaW9uXSA9IHZhbHVlLm1hdGNoKHRoaXMuc2l6ZVJlZ2V4KSB8fCBbbnVsbCwgJzAnLCAnQiddO1xyXG4gICAgICAgIGNvbnN0IGkgPSAgSXNOdWxsT3JFbXB0eShleHRlbnNpb24pID8gMCA6IHRoaXMuZXh0ZW5zaW9ucy5pbmRleE9mKGV4dGVuc2lvbi50b1VwcGVyQ2FzZSgpIGFzIElTaXplKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHNpemUsIDEwKSAqIE1hdGgucG93KDEwMjQsIGkgPCAwID8gMCA6IGkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBmb3JtYXRTaXplKHNpemU6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsY3VsYXRlU2l6ZShzaXplKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNhbGN1bGF0ZVNpemUoc2l6ZTogbnVtYmVyLCBleHRlbnNpb25JbmRleDogbnVtYmVyID0gMCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKGlzTmFOKHNpemUpKSB7XHJcbiAgICAgICAgICAgIHNpemUgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNpemUgPCAxMDI0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgJHtNYXRoLnJvdW5kKHNpemUgKiAxMDApIC8gMTAwfSAke3RoaXMuZXh0ZW5zaW9uc1tleHRlbnNpb25JbmRleF19YDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZVNpemUoc2l6ZSAvIDEwMjQsIGV4dGVuc2lvbkluZGV4ICsgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEZpbGVUeXBlKGZpbGU6IEZpbGUpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhGaWxlVXBsb2FkVHlwZXMpLmZpbmQoKGtleSkgPT4gRmlsZVVwbG9hZFR5cGVzW2tleV0gPT09IGZpbGUudHlwZSk7XHJcbiAgICB9XHJcbn1cclxuIl19