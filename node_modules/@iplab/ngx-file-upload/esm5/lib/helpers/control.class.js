import { __read, __spread } from "tslib";
import { BehaviorSubject, Subject } from 'rxjs';
import { IsNullOrEmpty } from './helpers.class';
export var STATUS;
(function (STATUS) {
    STATUS[STATUS["INVALID"] = 0] = "INVALID";
    STATUS[STATUS["VALID"] = 1] = "VALID";
    STATUS[STATUS["DISABLED"] = 2] = "DISABLED";
})(STATUS || (STATUS = {}));
export var FileEvent;
(function (FileEvent) {
    FileEvent["click"] = "click";
    FileEvent["focus"] = "focus";
    FileEvent["blur"] = "blur";
})(FileEvent || (FileEvent = {}));
var FileUploadControl = /** @class */ (function () {
    function FileUploadControl(validators) {
        this.files = new Set();
        this.listVisible = true;
        this.status = STATUS.VALID;
        this.errors = [];
        this.validators = [];
        this.multipleEnabled = true;
        this.multipleChanged = new BehaviorSubject(this.multipleEnabled);
        this.statusChanged = new Subject();
        this.eventsChanged = new Subject();
        this.accept = null;
        this.acceptChanged = new BehaviorSubject(this.accept);
        /**
         * track status `VALID`, `INVALID` or `DISABLED`
         */
        this.statusChanges = this.statusChanged.asObservable();
        /**
         * emit an event every time the value of the control
         * changes.
         * Initially returns last value
         */
        this.valueChanges = new BehaviorSubject([]);
        /**
         * @internal
         * used to trigger layout change for list visibility
         */
        this.listVisibilityChanges = new BehaviorSubject(this.listVisible);
        /**
         * track changed on accept attribute
         */
        this.acceptChanges = this.acceptChanged.asObservable();
        /**
         * emit an event every time user programmatically ask for certain event
         */
        this.eventsChanges = this.eventsChanged.asObservable();
        /**
         * track changed on multiple attribute
         */
        this.multipleChanges = this.multipleChanged.asObservable();
        this.defineValidators(validators);
    }
    /**
     * set functions that determines the synchronous validity of this control.
     */
    FileUploadControl.prototype.setValidators = function (newValidators) {
        this.defineValidators(newValidators);
        this.validate();
        return this;
    };
    FileUploadControl.prototype.defineValidators = function (validators) {
        if (!IsNullOrEmpty(validators)) {
            this.validators = Array.isArray(validators) ? __spread(validators) : [validators];
        }
    };
    FileUploadControl.prototype.addFile = function (file) {
        /**
         * if multiple is disabled and one file exists
         * clear it and reupload a new one
         */
        if (!this.multipleEnabled && this.files.size === 1) {
            this.files.clear();
        }
        this.files.add(file);
        this.validate();
        this.valueChanges.next(Array.from(this.files.values()));
        return this;
    };
    FileUploadControl.prototype.removeFile = function (file) {
        if (!this.disabled) {
            this.files.delete(file);
            this.validate();
            this.valueChanges.next(Array.from(this.files.values()));
        }
        return this;
    };
    FileUploadControl.prototype.addFiles = function (files) {
        this.addMultipleFiles(Array.from(files));
        return this;
    };
    /**
     * @internal
     * used to prevent valueChanges emit more times
     * when multiple files are uploaded
     */
    FileUploadControl.prototype.addMultipleFiles = function (files) {
        var _this = this;
        if (!this.multipleEnabled && !IsNullOrEmpty(files)) {
            // add only one file
            this.addFile(files[0]);
            return;
        }
        files.forEach(function (file) { return _this.files.add(file); });
        this.validate();
        this.valueChanges.next(Array.from(this.files.values()));
    };
    Object.defineProperty(FileUploadControl.prototype, "valid", {
        get: function () {
            return this.errors.length === 0 && this.status !== STATUS.DISABLED;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadControl.prototype, "invalid", {
        get: function () {
            return this.errors.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    FileUploadControl.prototype.getError = function () {
        return this.errors;
    };
    Object.defineProperty(FileUploadControl.prototype, "size", {
        /**
         * number of uploaded files
         */
        get: function () {
            return this.files.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadControl.prototype, "value", {
        /**
         * return list of Files
         */
        get: function () {
            return Array.from(this.files.values());
        },
        enumerable: true,
        configurable: true
    });
    FileUploadControl.prototype.setValue = function (files) {
        this.files.clear();
        if (files instanceof Array) {
            this.addMultipleFiles(files);
        }
        else {
            throw Error("FormControl.setValue was provided with wrong argument type, " + files + " was provided instead Array<File>");
        }
        return this;
    };
    /**
     * reset the control
     */
    FileUploadControl.prototype.clear = function () {
        this.files.clear();
        this.validate();
        this.valueChanges.next(Array.from(this.files.values()));
        return this;
    };
    Object.defineProperty(FileUploadControl.prototype, "isListVisible", {
        get: function () {
            return this.listVisible;
        },
        enumerable: true,
        configurable: true
    });
    FileUploadControl.prototype.setListVisibility = function (isVisible) {
        if (isVisible === void 0) { isVisible = true; }
        this.listVisible = isVisible;
        this.listVisibilityChanges.next(this.listVisible);
        return this;
    };
    Object.defineProperty(FileUploadControl.prototype, "disabled", {
        get: function () {
            return this.status === STATUS.DISABLED;
        },
        enumerable: true,
        configurable: true
    });
    FileUploadControl.prototype.enable = function (isEnabled) {
        if (isEnabled === void 0) { isEnabled = true; }
        this.status = isEnabled ? STATUS.VALID : STATUS.DISABLED;
        this.validate();
        this.statusChanged.next(this.status);
        return this;
    };
    FileUploadControl.prototype.disable = function (isDisabled) {
        if (isDisabled === void 0) { isDisabled = true; }
        this.status = isDisabled ? STATUS.DISABLED : STATUS.VALID;
        this.validate();
        this.statusChanged.next(this.status);
        return this;
    };
    FileUploadControl.prototype.click = function () {
        this.eventsChanged.next(FileEvent.click);
        return this;
    };
    FileUploadControl.prototype.focus = function () {
        this.eventsChanged.next(FileEvent.focus);
        return this;
    };
    FileUploadControl.prototype.blur = function () {
        this.eventsChanged.next(FileEvent.blur);
        return this;
    };
    /**
     * specifies the types of files that the server accepts
     *
     * ### Example
     *
     * ```
     * acceptFiles("file_extension|audio/*|video/*|image/*|media_type")
     * ```
     *
     * To specify more than one value, separate the values with a comma (e.g. acceptFiles("audio/*,video/*,image/*").
     *
     */
    FileUploadControl.prototype.acceptFiles = function (accept) {
        this.accept = accept;
        this.acceptChanged.next(this.accept);
        return this;
    };
    FileUploadControl.prototype.acceptAll = function () {
        this.accept = null;
        this.acceptChanged.next(this.accept);
        return this;
    };
    Object.defineProperty(FileUploadControl.prototype, "isMultiple", {
        get: function () {
            return this.multipleEnabled;
        },
        enumerable: true,
        configurable: true
    });
    FileUploadControl.prototype.multiple = function (isEnabled) {
        if (isEnabled === void 0) { isEnabled = true; }
        this.multipleEnabled = isEnabled;
        this.multipleChanged.next(this.multipleEnabled);
        return this;
    };
    FileUploadControl.prototype.validate = function () {
        var _this = this;
        if (this.status !== STATUS.DISABLED) {
            var currentState = this.valid;
            this.errors = this.validators.map(function (validator) { return validator(_this); }).filter(function (isInvalid) { return isInvalid; });
            if (currentState !== this.valid) {
                this.statusChanged.next(this.valid ? STATUS.VALID : STATUS.INVALID);
            }
        }
        else {
            this.errors.length = 0;
        }
    };
    return FileUploadControl;
}());
export { FileUploadControl };
//# sourceMappingURL=data:application/json;base64,