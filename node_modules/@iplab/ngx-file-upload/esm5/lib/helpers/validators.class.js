import { __values } from "tslib";
import { IsNullOrEmpty } from './helpers.class';
import { FileUploadTypes } from './file-types.class';
/**
 * function used to check file size
 */
var checkFileSize = function (file, maxSize, minSize) {
    if (minSize === void 0) { minSize = 0; }
    return (!IsNullOrEmpty(maxSize) && file.size > maxSize) || file.size < minSize ?
        { maxSize: maxSize, minSize: minSize, actual: file.size, file: file } : null;
};
var ɵ0 = checkFileSize;
var getFileType = function (file, fileExtension) {
    var type = file.type;
    if (!IsNullOrEmpty(type)) {
        return type;
    }
    return FileUploadTypes[fileExtension];
};
var ɵ1 = getFileType;
var FILE_EXT_REG = /(^[.]\w*)$/m;
/**
 * function used to check file type
 *
 * #### allowedTypes
 * file_extension|audio/*|video/*|image/*|media_type
 */
var checkFileType = function (file, allowedTypes) {
    var e_1, _a;
    var fileExtension = file.name.split('.').pop().toLowerCase();
    var fileType = getFileType(file, fileExtension);
    try {
        for (var allowedTypes_1 = __values(allowedTypes), allowedTypes_1_1 = allowedTypes_1.next(); !allowedTypes_1_1.done; allowedTypes_1_1 = allowedTypes_1.next()) {
            var type = allowedTypes_1_1.value;
            var isValid = FILE_EXT_REG.test(type) ? type === "." + fileExtension : new RegExp(type).test(fileType);
            if (isValid) {
                return null;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (allowedTypes_1_1 && !allowedTypes_1_1.done && (_a = allowedTypes_1.return)) _a.call(allowedTypes_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return { allowedTypes: allowedTypes, actual: file.type, file: file };
};
var ɵ2 = checkFileType;
var checkValueType = function (value) {
    if (!Array.isArray(value)) {
        throw Error("FormControl.setValue was provided with wrong argument type, " + value + " was provided instead Array<File>");
    }
};
var ɵ3 = checkValueType;
// @dynamic
var FileUploadValidators = /** @class */ (function () {
    function FileUploadValidators() {
    }
    /**
     * Validator that requires controls to have a file maximum size length.
     * Compare the File size in bytes
     * @dynamic
     */
    FileUploadValidators.fileSize = function (maxSize) {
        return function (control) {
            var files = control.value;
            if (IsNullOrEmpty(files)) {
                return null;
            }
            checkValueType(files);
            var toLargeFiles = files.map(function (file) { return checkFileSize(file, maxSize); })
                .filter(function (error) { return error; });
            return toLargeFiles.length > 0 ?
                { 'fileSize': toLargeFiles } : null;
        };
    };
    /**
     * Compare the File size in bytes with max and min size limits
     * @dynamic
     */
    FileUploadValidators.sizeRange = function (_a) {
        var minSize = _a.minSize, maxSize = _a.maxSize;
        return function (control) {
            var files = control.value;
            if (IsNullOrEmpty(files)) {
                return null;
            }
            checkValueType(files);
            var sizeMismatch = files.map(function (file) { return checkFileSize(file, maxSize, minSize); })
                .filter(function (error) { return error; });
            return sizeMismatch.length > 0 ?
                { 'sizeRange': sizeMismatch } : null;
        };
    };
    /**
     * validator that requires control to have limit on files number
     * @dynamic
     */
    FileUploadValidators.filesLimit = function (numFiles) {
        return function (control) {
            var files = control.value;
            if (IsNullOrEmpty(files)) {
                return null;
            }
            checkValueType(files);
            return files.length > numFiles ?
                { 'filesLimit': { 'max': numFiles, 'actual': files.length } } : null;
        };
    };
    /**
     * validator that requires control to have limit on media types
     *
     * ##### Allowed media types are
     *
     * - file_extension - a file extension starting with the STOP character,
     * e.g: .gif, .jpg, .png, .doc
     * - audio/* -        All sound files are accepted
     * - video/* -        All video files are accepted
     * - image/* -        All image files are accepted
     * - media_type -     A valid media type, with no parameters. Look at [IANA Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml) for a complete list of standard media types
     *
     * #### Example
     * `FileUploadValidators.accept([file_extension, audio/*, video/*, image/*, media_type])`
     * @dynamic
     */
    FileUploadValidators.accept = function (allowedFileTypes) {
        return function (control) {
            var files = control.value;
            if (IsNullOrEmpty(files)) {
                return null;
            }
            checkValueType(files);
            var notAllowedFiles = files.map(function (file) { return checkFileType(file, allowedFileTypes); })
                .filter(function (error) { return error; });
            return notAllowedFiles.length > 0 ?
                { 'fileTypes': notAllowedFiles } : null;
        };
    };
    return FileUploadValidators;
}());
export { FileUploadValidators };
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,