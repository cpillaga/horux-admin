import { __decorate, __extends, __metadata, __param } from "tslib";
import { Component, Input, ElementRef, HostListener, Renderer2, HostBinding, Inject, TemplateRef, ViewChild, ChangeDetectionStrategy, ContentChild, forwardRef, ChangeDetectorRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FileUploadControl } from './../../helpers/control.class';
import { FileUploadService } from './../../services/file-upload.service';
import { InsertAnimation } from './../../animations/insert.animation';
import { ZoomAnimation } from './../../animations/zoom.animation';
import { FileUploadAbstract } from './../file-upload-abstract.component';
export var DRAGOVER = 'dragover';
export var TOUCHED = 'ng-touched';
var FileUploadComponent = /** @class */ (function (_super) {
    __extends(FileUploadComponent, _super);
    function FileUploadComponent(fileUploadService, hostElementRef, renderer, document, cdr) {
        var _this = _super.call(this, hostElementRef, renderer, cdr) || this;
        _this.fileUploadService = fileUploadService;
        _this.document = document;
        _this.control = null;
        _this.animation = true;
        _this.templateRef = null;
        _this.listItem = null;
        _this.templateContext = {
            $implicit: _this.fileUploadService.isFileDragDropAvailable(),
            isFileDragDropAvailable: _this.fileUploadService.isFileDragDropAvailable()
        };
        /** animation fields */
        _this.zoomText = 'static';
        _this.listVisible = false;
        _this.onTouch = function () {
            _this.renderer.addClass(_this.hostElementRef.nativeElement, TOUCHED);
        };
        return _this;
    }
    FileUploadComponent_1 = FileUploadComponent;
    Object.defineProperty(FileUploadComponent.prototype, "multiple", {
        set: function (isMultiple) {
            this.isMultiple = isMultiple;
            this.checkAndSetMultiple();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadComponent.prototype, "hasFiles", {
        get: function () {
            return this.control.isListVisible && this.control.size > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadComponent.prototype, "isInvalid", {
        get: function () {
            return !this.control.disabled && this.control.invalid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadComponent.prototype, "isAnimationDisabled", {
        get: function () {
            return this.animation === false || this.animation === 'false';
        },
        enumerable: true,
        configurable: true
    });
    FileUploadComponent.prototype.setEvents = function () {
        var _this = this;
        _super.prototype.setEvents.call(this);
        ['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'].forEach(function (eventName) {
            _this.hooks.push(_this.renderer.listen(_this.document, eventName, function (event) { return _this.preventDragEvents(event); }));
        });
        ['dragover', 'dragenter'].forEach(function (eventName) {
            _this.hooks.push(_this.renderer.listen(_this.hostElementRef.nativeElement, eventName, function (event) { return _this.onDragOver(event); }));
        });
        ['dragleave', 'dragend', 'drop'].forEach(function (eventName) {
            _this.hooks.push(_this.renderer.listen(_this.hostElementRef.nativeElement, eventName, function (event) { return _this.onDragLeave(event); }));
        });
        this.subscriptions.push(this.control.valueChanges.subscribe(function (files) { return _this.renderView(); }));
        this.subscriptions.push(this.control.listVisibilityChanges.subscribe(function (status) { return _this.toggleListVisibility(); }));
    };
    FileUploadComponent.prototype.onKeyDown = function (event) {
        if (event.keyCode === 13 || event.keyCode === 32) {
            event.preventDefault();
            this.control.click();
        }
    };
    FileUploadComponent.prototype.preventDragEvents = function (event) {
        event.preventDefault();
        event.stopPropagation();
    };
    FileUploadComponent.prototype.renderView = function () {
        if (!this.listVisible) {
            this.zoomText = this.control.isListVisible && this.control.size > 0 ? 'zoomOut' : 'static';
        }
        this.cdr.markForCheck();
    };
    FileUploadComponent.prototype.showList = function () {
        if (this.zoomText !== 'static') {
            this.listVisible = true;
        }
    };
    FileUploadComponent.prototype.hideList = function () {
        this.listVisible = false;
    };
    FileUploadComponent.prototype.toggleListVisibility = function () {
        this.listVisible = this.control.isListVisible && this.control.size > 0;
        if (this.listVisible) {
            this.renderer.addClass(this.hostElementRef.nativeElement, 'list-visible');
            this.zoomText = 'static';
        }
        this.cdr.markForCheck();
    };
    /**
     * on file over add class name
     */
    FileUploadComponent.prototype.onDragOver = function (event) {
        this.renderer.addClass(this.hostElementRef.nativeElement, DRAGOVER);
    };
    /**
     * on mouse out remove class name
     */
    FileUploadComponent.prototype.onDragLeave = function (event) {
        this.renderer.removeClass(this.hostElementRef.nativeElement, DRAGOVER);
    };
    FileUploadComponent.prototype.onDrop = function (event) {
        if (this.control.disabled) {
            return;
        }
        // There is some issue with DragEvent in typescript lib.dom.d.ts
        var files = event.dataTransfer.files;
        this.control.addFiles(files);
        this.onTouch();
    };
    FileUploadComponent.prototype.onInputChange = function (event) {
        var input = (event.target);
        if (!this.control.disabled && input.files.length > 0) {
            this.control.addFiles(input.files);
            this.clearInputEl();
        }
        this.onTouch();
    };
    /**
     * model -> view changes
     */
    FileUploadComponent.prototype.writeValue = function (files) {
        if (files != null) {
            this.control.setValue(files);
        }
    };
    /**
     * register function which will be called on UI change
     * to update view -> model
     */
    FileUploadComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    FileUploadComponent.prototype.registerOnTouched = function (fn) {
        this.onTouch = fn;
    };
    FileUploadComponent.prototype.setDisabledState = function (isDisabled) {
        this.control.disable(isDisabled);
    };
    FileUploadComponent.prototype.zoomAnimationDone = function (event) {
        if (this.control.isListVisible && this.control.size > 0) {
            this.showList();
        }
        else {
            this.hideList();
        }
        if (event.fromState === 'static' && event.toState === 'zoomOut') {
            this.renderer.addClass(this.hostElementRef.nativeElement, 'hide-text');
        }
        else {
            this.renderer.removeClass(this.hostElementRef.nativeElement, 'hide-text');
        }
        if (event.toState === 'zoomIn') {
            this.zoomText = 'static';
        }
    };
    FileUploadComponent.prototype.animationListFinished = function (event) {
        if (event.toState === 'void') {
            this.zoomText = 'zoomIn';
            this.renderer.removeClass(this.hostElementRef.nativeElement, 'list-visible');
        }
        if (event.fromState === 'void') {
            this.zoomText = 'static';
            this.renderer.addClass(this.hostElementRef.nativeElement, 'list-visible');
        }
    };
    var FileUploadComponent_1;
    FileUploadComponent.ctorParameters = function () { return [
        { type: FileUploadService },
        { type: ElementRef },
        { type: Renderer2 },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", FileUploadControl)
    ], FileUploadComponent.prototype, "control", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], FileUploadComponent.prototype, "animation", void 0);
    __decorate([
        Input('multiple'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], FileUploadComponent.prototype, "multiple", null);
    __decorate([
        ContentChild('placeholder'),
        __metadata("design:type", TemplateRef)
    ], FileUploadComponent.prototype, "templateRef", void 0);
    __decorate([
        ContentChild('item'),
        __metadata("design:type", TemplateRef)
    ], FileUploadComponent.prototype, "listItem", void 0);
    __decorate([
        ViewChild('inputRef', { static: true }),
        __metadata("design:type", ElementRef)
    ], FileUploadComponent.prototype, "input", void 0);
    __decorate([
        ViewChild('labelRef', { static: true }),
        __metadata("design:type", ElementRef)
    ], FileUploadComponent.prototype, "label", void 0);
    __decorate([
        HostBinding('class.has-files'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], FileUploadComponent.prototype, "hasFiles", null);
    __decorate([
        HostBinding('class.ng-invalid'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], FileUploadComponent.prototype, "isInvalid", null);
    __decorate([
        HostBinding('@.disabled'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], FileUploadComponent.prototype, "isAnimationDisabled", null);
    __decorate([
        HostListener('drop', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Event]),
        __metadata("design:returntype", void 0)
    ], FileUploadComponent.prototype, "onDrop", null);
    FileUploadComponent = FileUploadComponent_1 = __decorate([
        Component({
            selector: "file-upload:not([simple])",
            template: "<label #labelRef class=\"upload-input\" tabindex=\"0\" (keydown)=\"onKeyDown($event)\" [@zoomAnimation]=\"zoomText\" (@zoomAnimation.done)=\"zoomAnimationDone($event)\">\r\n\r\n    <ng-container *ngTemplateOutlet=\"templateRef ? templateRef : defaultTemplate; context: templateContext\"></ng-container>\r\n\r\n    <ng-template #defaultTemplate let-isFileDragDropAvailable=\"isFileDragDropAvailable\">\r\n        <file-upload-drop-zone>\r\n            <ng-container *ngIf=\"isFileDragDropAvailable; else isNotDragDropAvailable\">\r\n                <b>Drag and drop</b> files<br> or click here\r\n            </ng-container>\r\n            <ng-template #isNotDragDropAvailable>\r\n                <b>Click here</b> to<br> choose a files\r\n            </ng-template>\r\n        </file-upload-drop-zone>\r\n    </ng-template>\r\n\r\n    <input #inputRef type=\"file\" class=\"files-input\" tabindex=\"-1\" multiple (change)=\"onInputChange($event)\">\r\n</label>\r\n\r\n<div class=\"upload-list\" *ngIf=\"(control.listVisibilityChanges | async) && control.size > 0 && listVisible\" [@insertAnimation]=\"control.size\" (@insertAnimation.done)=\"animationListFinished($event)\">\r\n    <ng-template ngFor let-file let-i=\"index\" [ngForOf]=\"control.valueChanges | async\">\r\n        <ng-container *ngTemplateOutlet=\"listItem ? listItem : defaultItemTemplate; context: { $implicit: file, file: file, index: i, control: control }\"></ng-container>\r\n    </ng-template>\r\n    \r\n    <ng-template #defaultItemTemplate let-i=\"index\" let-file=\"file\" let-control=\"control\">\r\n        <file-upload-list-item  [index]=\"i\" [file]=\"file\" [control]=\"control\">Remove</file-upload-list-item>\r\n    </ng-template>\r\n</div>",
            providers: [
                FileUploadService,
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return FileUploadComponent_1; }),
                    multi: true
                }
            ],
            changeDetection: ChangeDetectionStrategy.OnPush,
            animations: [
                ZoomAnimation,
                InsertAnimation
            ],
            styles: ["@charset \"UTF-8\";:host,:host>*{box-sizing:border-box}:host{overflow:hidden;display:block;background:#fafafa;padding:20px 66px 20px 20px;min-height:140px;outline:#92b0b3 dashed 1px;outline-offset:-10px;position:relative}:host ::ng-deep .icon{float:left}:host(.dragover){outline-width:2px}:host(.disabled){opacity:.5;cursor:no-drop}.files-input{width:.1px;height:.1px;opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden}.upload-input:after{clear:both;content:\"\u00A0\";display:block;height:0;line-height:0;visibility:hidden;zoom:1}.upload-input{cursor:pointer;display:inline-block;color:#646464;position:absolute;top:50%;left:50%;margin:0;-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);outline:0}:host(.disabled) .upload-input{cursor:not-allowed}:host(.list-visible) .upload-input{top:20px;left:100%;margin-left:-20px;-ms-transform:translate(-100%,0);transform:translate(-100%,0);text-align:center}:host(.hide-text) .upload-input{opacity:0}:host(.dragover:not(.disabled)) .upload-input,:host(:not(.disabled)) .upload-input:focus,:host(:not(.disabled)) .upload-input:hover{color:#80a9d2}:host(.dragover:not(.disabled)) .icon svg,:host(:not(.disabled)) .upload-input:focus svg,:host(:not(.disabled)) .upload-input:hover svg{fill:#80a9d2}file-upload-list-item{padding:10px 0 0}file-upload-list-item:first-child{padding:0}"]
        }),
        __param(3, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [FileUploadService,
            ElementRef,
            Renderer2, Object, ChangeDetectorRef])
    ], FileUploadComponent);
    return FileUploadComponent;
}(FileUploadAbstract));
export { FileUploadComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11cGxvYWQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGlwbGFiL25neC1maWxlLXVwbG9hZC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL211bHRpcGxlLWZpbGUtdXBsb2FkL2ZpbGUtdXBsb2FkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCxLQUFLLEVBQ0wsVUFBVSxFQUNWLFlBQVksRUFDWixTQUFTLEVBQ1QsV0FBVyxFQUNYLE1BQU0sRUFDTixXQUFXLEVBQ1gsU0FBUyxFQUNULHVCQUF1QixFQUN2QixZQUFZLEVBQ1osVUFBVSxFQUNWLGlCQUFpQixFQUNwQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGlCQUFpQixFQUF3QixNQUFNLGdCQUFnQixDQUFDO0FBR3pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUN0RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDbEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFekUsTUFBTSxDQUFDLElBQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQztBQUNuQyxNQUFNLENBQUMsSUFBTSxPQUFPLEdBQUcsWUFBWSxDQUFDO0FBb0JwQztJQUF5Qyx1Q0FBa0I7SUFtQ3ZELDZCQUNXLGlCQUFvQyxFQUMzQyxjQUEwQixFQUMxQixRQUFtQixFQUNPLFFBQVEsRUFDbEMsR0FBc0I7UUFMMUIsWUFPSSxrQkFBTSxjQUFjLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxTQUN2QztRQVBVLHVCQUFpQixH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Q2pCLG1CQUFtQixDQTROL0I7SUFBRCwwQkFBQztDQUFBLEFBNU5ELENBQXlDLGtCQUFrQixHQTROMUQ7U0E1TlksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIENvbXBvbmVudCxcclxuICAgIElucHV0LFxyXG4gICAgRWxlbWVudFJlZixcclxuICAgIEhvc3RMaXN0ZW5lcixcclxuICAgIFJlbmRlcmVyMixcclxuICAgIEhvc3RCaW5kaW5nLFxyXG4gICAgSW5qZWN0LFxyXG4gICAgVGVtcGxhdGVSZWYsXHJcbiAgICBWaWV3Q2hpbGQsXHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICAgIENvbnRlbnRDaGlsZCxcclxuICAgIGZvcndhcmRSZWYsXHJcbiAgICBDaGFuZ2VEZXRlY3RvclJlZlxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SLCBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgQW5pbWF0aW9uRXZlbnQgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcclxuXHJcbmltcG9ydCB7IEZpbGVVcGxvYWRDb250cm9sIH0gZnJvbSAnLi8uLi8uLi9oZWxwZXJzL2NvbnRyb2wuY2xhc3MnO1xyXG5pbXBvcnQgeyBGaWxlVXBsb2FkU2VydmljZSB9IGZyb20gJy4vLi4vLi4vc2VydmljZXMvZmlsZS11cGxvYWQuc2VydmljZSc7XHJcbmltcG9ydCB7IEluc2VydEFuaW1hdGlvbiB9IGZyb20gJy4vLi4vLi4vYW5pbWF0aW9ucy9pbnNlcnQuYW5pbWF0aW9uJztcclxuaW1wb3J0IHsgWm9vbUFuaW1hdGlvbiB9IGZyb20gJy4vLi4vLi4vYW5pbWF0aW9ucy96b29tLmFuaW1hdGlvbic7XHJcbmltcG9ydCB7IEZpbGVVcGxvYWRBYnN0cmFjdCB9IGZyb20gJy4vLi4vZmlsZS11cGxvYWQtYWJzdHJhY3QuY29tcG9uZW50JztcclxuXHJcbmV4cG9ydCBjb25zdCBEUkFHT1ZFUiA9ICdkcmFnb3Zlcic7XHJcbmV4cG9ydCBjb25zdCBUT1VDSEVEID0gJ25nLXRvdWNoZWQnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogYGZpbGUtdXBsb2FkOm5vdChbc2ltcGxlXSlgLFxyXG4gICAgdGVtcGxhdGVVcmw6IGAuL2ZpbGUtdXBsb2FkLmNvbXBvbmVudC5odG1sYCxcclxuICAgIHN0eWxlVXJsczogW2AuL2ZpbGUtdXBsb2FkLmNvbXBvbmVudC5zY3NzYF0sXHJcbiAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICBGaWxlVXBsb2FkU2VydmljZSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxyXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBGaWxlVXBsb2FkQ29tcG9uZW50KSxcclxuICAgICAgICAgICAgbXVsdGk6IHRydWVcclxuICAgICAgICB9XHJcbiAgICBdLFxyXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgICBhbmltYXRpb25zOiBbXHJcbiAgICAgICAgWm9vbUFuaW1hdGlvbixcclxuICAgICAgICBJbnNlcnRBbmltYXRpb25cclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZpbGVVcGxvYWRDb21wb25lbnQgZXh0ZW5kcyBGaWxlVXBsb2FkQWJzdHJhY3QgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHB1YmxpYyBjb250cm9sOiBGaWxlVXBsb2FkQ29udHJvbCA9IG51bGw7XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHB1YmxpYyBhbmltYXRpb246IGJvb2xlYW4gfCBzdHJpbmcgPSB0cnVlO1xyXG5cclxuICAgIEBJbnB1dCgnbXVsdGlwbGUnKVxyXG4gICAgcHVibGljIHNldCBtdWx0aXBsZShpc011bHRpcGxlOiBib29sZWFuIHwgc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5pc011bHRpcGxlID0gaXNNdWx0aXBsZTtcclxuICAgICAgICB0aGlzLmNoZWNrQW5kU2V0TXVsdGlwbGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBAQ29udGVudENoaWxkKCdwbGFjZWhvbGRlcicpXHJcbiAgICBwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4gPSBudWxsO1xyXG5cclxuICAgIEBDb250ZW50Q2hpbGQoJ2l0ZW0nKVxyXG4gICAgcHVibGljIGxpc3RJdGVtOiBUZW1wbGF0ZVJlZjxhbnk+ID0gbnVsbDtcclxuXHJcbiAgICBAVmlld0NoaWxkKCdpbnB1dFJlZicsIHsgc3RhdGljOiB0cnVlIH0pXHJcbiAgICBwdWJsaWMgaW5wdXQ6IEVsZW1lbnRSZWY8SFRNTElucHV0RWxlbWVudD47XHJcblxyXG4gICAgQFZpZXdDaGlsZCgnbGFiZWxSZWYnLCB7IHN0YXRpYzogdHJ1ZSB9KVxyXG4gICAgcHVibGljIGxhYmVsOiBFbGVtZW50UmVmPEhUTUxMYWJlbEVsZW1lbnQ+O1xyXG5cclxuICAgIHB1YmxpYyB0ZW1wbGF0ZUNvbnRleHQgPSB7XHJcbiAgICAgICAgJGltcGxpY2l0OiB0aGlzLmZpbGVVcGxvYWRTZXJ2aWNlLmlzRmlsZURyYWdEcm9wQXZhaWxhYmxlKCksXHJcbiAgICAgICAgaXNGaWxlRHJhZ0Ryb3BBdmFpbGFibGU6IHRoaXMuZmlsZVVwbG9hZFNlcnZpY2UuaXNGaWxlRHJhZ0Ryb3BBdmFpbGFibGUoKVxyXG4gICAgfTtcclxuXHJcbiAgICAvKiogYW5pbWF0aW9uIGZpZWxkcyAqL1xyXG4gICAgcHVibGljIHpvb21UZXh0OiAnem9vbU91dCcgfCAnem9vbUluJyB8ICdzdGF0aWMnID0gJ3N0YXRpYyc7XHJcbiAgICBwdWJsaWMgbGlzdFZpc2libGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgZmlsZVVwbG9hZFNlcnZpY2U6IEZpbGVVcGxvYWRTZXJ2aWNlLFxyXG4gICAgICAgIGhvc3RFbGVtZW50UmVmOiBFbGVtZW50UmVmLFxyXG4gICAgICAgIHJlbmRlcmVyOiBSZW5kZXJlcjIsXHJcbiAgICAgICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudCxcclxuICAgICAgICBjZHI6IENoYW5nZURldGVjdG9yUmVmXHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcihob3N0RWxlbWVudFJlZiwgcmVuZGVyZXIsIGNkcik7XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5oYXMtZmlsZXMnKVxyXG4gICAgcHVibGljIGdldCBoYXNGaWxlcygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sLmlzTGlzdFZpc2libGUgJiYgdGhpcy5jb250cm9sLnNpemUgPiAwO1xyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MubmctaW52YWxpZCcpXHJcbiAgICBwdWJsaWMgZ2V0IGlzSW52YWxpZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuY29udHJvbC5kaXNhYmxlZCAmJiB0aGlzLmNvbnRyb2wuaW52YWxpZDtcclxuICAgIH1cclxuXHJcbiAgICBASG9zdEJpbmRpbmcoJ0AuZGlzYWJsZWQnKVxyXG4gICAgcHVibGljIGdldCBpc0FuaW1hdGlvbkRpc2FibGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGlvbiA9PT0gZmFsc2UgfHwgKHRoaXMuYW5pbWF0aW9uIGFzIHN0cmluZykgPT09ICdmYWxzZSc7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHNldEV2ZW50cygpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5zZXRFdmVudHMoKTtcclxuICAgICAgICBbJ2RyYWcnLCAnZHJhZ3N0YXJ0JywgJ2RyYWdlbmQnLCAnZHJhZ292ZXInLCAnZHJhZ2VudGVyJywgJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaCgoZXZlbnROYW1lKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9va3MucHVzaChcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMuZG9jdW1lbnQsIGV2ZW50TmFtZSwgKGV2ZW50OiBhbnkpID0+IHRoaXMucHJldmVudERyYWdFdmVudHMoZXZlbnQpKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBbJ2RyYWdvdmVyJywgJ2RyYWdlbnRlciddLmZvckVhY2goKGV2ZW50TmFtZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmhvb2tzLnB1c2goXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLmhvc3RFbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIGV2ZW50TmFtZSwgKGV2ZW50OiBhbnkpID0+IHRoaXMub25EcmFnT3ZlcihldmVudCkpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIFsnZHJhZ2xlYXZlJywgJ2RyYWdlbmQnLCAnZHJvcCddLmZvckVhY2goKGV2ZW50TmFtZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmhvb2tzLnB1c2goXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLmhvc3RFbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIGV2ZW50TmFtZSwgKGV2ZW50OiBhbnkpID0+IHRoaXMub25EcmFnTGVhdmUoZXZlbnQpKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChcclxuICAgICAgICAgICAgdGhpcy5jb250cm9sLnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUoKGZpbGVzKSA9PiB0aGlzLnJlbmRlclZpZXcoKSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChcclxuICAgICAgICAgICAgdGhpcy5jb250cm9sLmxpc3RWaXNpYmlsaXR5Q2hhbmdlcy5zdWJzY3JpYmUoKHN0YXR1cykgPT4gdGhpcy50b2dnbGVMaXN0VmlzaWJpbGl0eSgpKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAxMyB8fCBldmVudC5rZXlDb2RlID09PSAzMikge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2wuY2xpY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwcmV2ZW50RHJhZ0V2ZW50cyhldmVudDogRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVuZGVyVmlldygpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMubGlzdFZpc2libGUpIHtcclxuICAgICAgICAgICAgdGhpcy56b29tVGV4dCA9IHRoaXMuY29udHJvbC5pc0xpc3RWaXNpYmxlICYmIHRoaXMuY29udHJvbC5zaXplID4gMCA/ICd6b29tT3V0JyA6ICdzdGF0aWMnO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNob3dMaXN0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLnpvb21UZXh0ICE9PSAnc3RhdGljJykge1xyXG4gICAgICAgICAgICB0aGlzLmxpc3RWaXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBoaWRlTGlzdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmxpc3RWaXNpYmxlID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB0b2dnbGVMaXN0VmlzaWJpbGl0eSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmxpc3RWaXNpYmxlID0gdGhpcy5jb250cm9sLmlzTGlzdFZpc2libGUgJiYgdGhpcy5jb250cm9sLnNpemUgPiAwO1xyXG4gICAgICAgIGlmICh0aGlzLmxpc3RWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5ob3N0RWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnbGlzdC12aXNpYmxlJyk7XHJcbiAgICAgICAgICAgIHRoaXMuem9vbVRleHQgPSAnc3RhdGljJztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBvbiBmaWxlIG92ZXIgYWRkIGNsYXNzIG5hbWVcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvbkRyYWdPdmVyKGV2ZW50OiBFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5ob3N0RWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBEUkFHT1ZFUik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBvbiBtb3VzZSBvdXQgcmVtb3ZlIGNsYXNzIG5hbWVcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvbkRyYWdMZWF2ZShldmVudDogRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuaG9zdEVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgRFJBR09WRVIpO1xyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ2Ryb3AnLCBbJyRldmVudCddKVxyXG4gICAgcHVibGljIG9uRHJvcChldmVudDogRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5jb250cm9sLmRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVGhlcmUgaXMgc29tZSBpc3N1ZSB3aXRoIERyYWdFdmVudCBpbiB0eXBlc2NyaXB0IGxpYi5kb20uZC50c1xyXG4gICAgICAgIGNvbnN0IGZpbGVzID0gKGV2ZW50IGFzIGFueSkuZGF0YVRyYW5zZmVyLmZpbGVzO1xyXG4gICAgICAgIHRoaXMuY29udHJvbC5hZGRGaWxlcyhmaWxlcyk7XHJcbiAgICAgICAgdGhpcy5vblRvdWNoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uSW5wdXRDaGFuZ2UoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgaW5wdXQgPSAoZXZlbnQudGFyZ2V0KSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuY29udHJvbC5kaXNhYmxlZCAmJiBpbnB1dC5maWxlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbC5hZGRGaWxlcyhpbnB1dC5maWxlcyk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXJJbnB1dEVsKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm9uVG91Y2goKTtcclxuICAgIH1cclxuXHJcbiAgICAgLyoqXHJcbiAgICAgICogbW9kZWwgLT4gdmlldyBjaGFuZ2VzXHJcbiAgICAgICovXHJcbiAgICBwdWJsaWMgd3JpdGVWYWx1ZShmaWxlczogYW55KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGZpbGVzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250cm9sLnNldFZhbHVlKGZpbGVzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZWdpc3RlciBmdW5jdGlvbiB3aGljaCB3aWxsIGJlIGNhbGxlZCBvbiBVSSBjaGFuZ2VcclxuICAgICAqIHRvIHVwZGF0ZSB2aWV3IC0+IG1vZGVsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWdpc3Rlck9uQ2hhbmdlKGZuOiAodjogQXJyYXk8RmlsZT4pID0+IHZvaWQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlID0gZm47XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvblRvdWNoOiAoKSA9PiB2b2lkID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5ob3N0RWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBUT1VDSEVEKTtcclxuICAgIH07XHJcblxyXG4gICAgcHVibGljIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm9uVG91Y2ggPSBmbjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jb250cm9sLmRpc2FibGUoaXNEaXNhYmxlZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHpvb21BbmltYXRpb25Eb25lKGV2ZW50OiBBbmltYXRpb25FdmVudCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRyb2wuaXNMaXN0VmlzaWJsZSAmJiB0aGlzLmNvbnRyb2wuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5zaG93TGlzdCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZUxpc3QoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChldmVudC5mcm9tU3RhdGUgPT09ICdzdGF0aWMnICYmIGV2ZW50LnRvU3RhdGUgPT09ICd6b29tT3V0Jykge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuaG9zdEVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2hpZGUtdGV4dCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5ob3N0RWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnaGlkZS10ZXh0Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZXZlbnQudG9TdGF0ZSA9PT0gJ3pvb21JbicpIHtcclxuICAgICAgICAgICAgdGhpcy56b29tVGV4dCA9ICdzdGF0aWMnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYW5pbWF0aW9uTGlzdEZpbmlzaGVkKGV2ZW50OiBBbmltYXRpb25FdmVudCk6IHZvaWQge1xyXG4gICAgICAgIGlmIChldmVudC50b1N0YXRlID09PSAndm9pZCcpIHtcclxuICAgICAgICAgICAgdGhpcy56b29tVGV4dCA9ICd6b29tSW4nO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuaG9zdEVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2xpc3QtdmlzaWJsZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZXZlbnQuZnJvbVN0YXRlID09PSAndm9pZCcpIHtcclxuICAgICAgICAgICAgdGhpcy56b29tVGV4dCA9ICdzdGF0aWMnO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuaG9zdEVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2xpc3QtdmlzaWJsZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=