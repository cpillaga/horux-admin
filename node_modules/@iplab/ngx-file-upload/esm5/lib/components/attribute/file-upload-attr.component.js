import { __decorate, __metadata, __param } from "tslib";
import { Input, OnInit, ElementRef, HostListener, Renderer2, OnDestroy, HostBinding, Inject, ViewChild, ContentChild, TemplateRef, Component, AfterViewInit } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { FileUploadControl } from '../../helpers/control.class';
import { IsNullOrEmpty } from '../../helpers/helpers.class';
import { FileUploadService } from '../../services/file-upload.service';
import { DRAGOVER, TOUCHED } from './../multiple-file-upload/file-upload.component';
var FileUploadAttributeComponent = /** @class */ (function () {
    function FileUploadAttributeComponent(fileUploadService, hostElementRef, renderer, document) {
        var _this = this;
        this.fileUploadService = fileUploadService;
        this.hostElementRef = hostElementRef;
        this.renderer = renderer;
        this.document = document;
        this.control = null;
        this.templateRef = null;
        this.hooks = [];
        this.subscriptions = [];
        this.onTouch = function () {
            _this.renderer.addClass(_this.hostElementRef.nativeElement, TOUCHED);
        };
    }
    FileUploadAttributeComponent.prototype.ngOnInit = function () {
        if (IsNullOrEmpty(this.control)) {
            this.control = new FileUploadControl();
        }
    };
    FileUploadAttributeComponent.prototype.ngAfterViewInit = function () {
        if (this.fileUploadService.isFileDragDropAvailable()) {
            this.setEvents();
            this.checkAndMarkAsDisabled();
        }
    };
    FileUploadAttributeComponent.prototype.ngOnDestroy = function () {
        this.hooks.forEach(function (hook) { return hook(); });
        this.hooks.length = 0;
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
        this.subscriptions.length = 0;
    };
    Object.defineProperty(FileUploadAttributeComponent.prototype, "hasFiles", {
        get: function () {
            return this.control.isListVisible && this.control.size > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadAttributeComponent.prototype, "isInvalid", {
        get: function () {
            return !this.control.disabled && this.control.invalid;
        },
        enumerable: true,
        configurable: true
    });
    FileUploadAttributeComponent.prototype.setEvents = function () {
        var _this = this;
        ['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'].forEach(function (eventName) {
            _this.hooks.push(_this.renderer.listen(_this.document, eventName, function (event) { return _this.preventDragEvents(event); }));
        });
        ['dragover', 'dragenter'].forEach(function (eventName) {
            _this.hooks.push(_this.renderer.listen(_this.hostElementRef.nativeElement, eventName, function (event) { return _this.onDragOver(event); }));
        });
        ['dragleave', 'dragend', 'drop'].forEach(function (eventName) {
            _this.hooks.push(_this.renderer.listen(_this.hostElementRef.nativeElement, eventName, function (event) {
                if (_this.control.disabled && eventName === 'dragleave' || eventName !== 'dragleave') {
                    _this.onDragLeave(event);
                }
            }));
        });
        ['dragleave'].forEach(function (eventName) {
            _this.hooks.push(_this.renderer.listen(_this.overlay.nativeElement, eventName, function (event) { return _this.onDragLeave(event); }));
        });
        this.subscriptions.push(this.control.statusChanges.subscribe(function (status) { return _this.checkAndMarkAsDisabled(); }));
    };
    FileUploadAttributeComponent.prototype.checkAndMarkAsDisabled = function () {
        if (this.control.disabled) {
            this.renderer.addClass(this.hostElementRef.nativeElement, 'disabled');
        }
        else {
            this.renderer.removeClass(this.hostElementRef.nativeElement, 'disabled');
        }
    };
    FileUploadAttributeComponent.prototype.preventDragEvents = function (event) {
        event.preventDefault();
        event.stopPropagation();
    };
    /**
     * on file over add class name
     */
    FileUploadAttributeComponent.prototype.onDragOver = function (event) {
        this.renderer.addClass(this.hostElementRef.nativeElement, DRAGOVER);
    };
    /**
     * on mouse out remove class name
     */
    FileUploadAttributeComponent.prototype.onDragLeave = function (event) {
        this.renderer.removeClass(this.hostElementRef.nativeElement, DRAGOVER);
    };
    FileUploadAttributeComponent.prototype.onDrop = function (event) {
        if (this.control.disabled) {
            return;
        }
        var files = event.dataTransfer.files;
        this.control.addFiles(files);
        this.onTouch();
    };
    FileUploadAttributeComponent.ctorParameters = function () { return [
        { type: FileUploadService },
        { type: ElementRef },
        { type: Renderer2 },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", FileUploadControl)
    ], FileUploadAttributeComponent.prototype, "control", void 0);
    __decorate([
        ViewChild('overlay'),
        __metadata("design:type", ElementRef)
    ], FileUploadAttributeComponent.prototype, "overlay", void 0);
    __decorate([
        ContentChild('placeholder'),
        __metadata("design:type", TemplateRef)
    ], FileUploadAttributeComponent.prototype, "templateRef", void 0);
    __decorate([
        HostBinding('class.has-files'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], FileUploadAttributeComponent.prototype, "hasFiles", null);
    __decorate([
        HostBinding('class.ng-invalid'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], FileUploadAttributeComponent.prototype, "isInvalid", null);
    __decorate([
        HostListener('drop', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Event]),
        __metadata("design:returntype", void 0)
    ], FileUploadAttributeComponent.prototype, "onDrop", null);
    FileUploadAttributeComponent = __decorate([
        Component({
            selector: "[file-drop-zone]",
            template: "\n        <ng-content></ng-content>\n        <div #overlay class=\"overlay\" *ngIf=\"fileUploadService.isFileDragDropAvailable()\">\n\n            <div class=\"upload-input\">\n                <ng-container *ngTemplateOutlet=\"templateRef ? templateRef : defaultTemplate\"></ng-container>\n\n                <ng-template #defaultTemplate>\n                    <file-upload-drop-zone>\n                        <b>Drop</b> it here\n                    </file-upload-drop-zone>\n                </ng-template>\n            </div>\n        </div>\n    ",
            providers: [
                FileUploadService
            ],
            styles: [":host{position:relative;display:block}:host .overlay{display:none;background:rgba(255,255,255,.8);outline:#92b0b3 dashed 2px;outline-offset:-10px;position:absolute;top:0;left:0;right:0;bottom:0}:host(.dragover:not(.disabled)) .overlay{display:block}:host ::ng-deep .icon{margin:0 auto 10px}:host ::ng-deep .icon svg{fill:#80a9d2}.upload-input{pointer-events:none;cursor:pointer;display:inline-block;color:#80a9d2;position:absolute;top:50%;left:50%;-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);transition:.15s ease-in-out}"]
        }),
        __param(3, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [FileUploadService,
            ElementRef,
            Renderer2, Object])
    ], FileUploadAttributeComponent);
    return FileUploadAttributeComponent;
}());
export { FileUploadAttributeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11cGxvYWQtYXR0ci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaXBsYWIvbmd4LWZpbGUtdXBsb2FkLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvYXR0cmlidXRlL2ZpbGUtdXBsb2FkLWF0dHIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsS0FBSyxFQUNMLE1BQU0sRUFDTixVQUFVLEVBQ1YsWUFBWSxFQUNaLFNBQVMsRUFDVCxTQUFTLEVBQ1QsV0FBVyxFQUNYLE1BQU0sRUFDTixTQUFTLEVBQ1QsWUFBWSxFQUNaLFdBQVcsRUFDWCxTQUFTLEVBQ1QsYUFBYSxFQUNoQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFM0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzVELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0saURBQWlELENBQUM7QUEwQnBGO0lBZUksc0NBQ1csaUJBQW9DLEVBQ25DLGNBQTBCLEVBQzFCLFFBQW1CLEVBQ0QsUUFBUTtRQUp0QyxpQkFLSTtRQUpPLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDbkMsbUJBQWMsR0FBZCxjQUFjLENBQVk7UUFDMUIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNELGFBQVEsR0FBUixRQUFRLENBQUE7UUFoQi9CLFlBQU8sR0FBc0IsSUFBSSxDQUFDO1FBTWxDLGdCQUFXLEdBQXFCLElBQUksQ0FBQztRQUVwQyxVQUFLLEdBQW9CLEVBQUUsQ0FBQztRQUU1QixrQkFBYSxHQUF3QixFQUFFLENBQUM7UUE4R3hDLFlBQU8sR0FBZTtZQUMxQixLQUFJLENB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LENBQUE7eUNBSFMsaUJBQWlCO1lBQ25CLFVBQVU7WUFDaEIsU0FBUztPQWxCdEIsNEJBQTRCLENBK0h4QztJQUFELG1DQUFDO0NBQUEsQUEvSEQsSUErSEM7U0EvSFksNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIElucHV0LFxyXG4gICAgT25Jbml0LFxyXG4gICAgRWxlbWVudFJlZixcclxuICAgIEhvc3RMaXN0ZW5lcixcclxuICAgIFJlbmRlcmVyMixcclxuICAgIE9uRGVzdHJveSxcclxuICAgIEhvc3RCaW5kaW5nLFxyXG4gICAgSW5qZWN0LFxyXG4gICAgVmlld0NoaWxkLFxyXG4gICAgQ29udGVudENoaWxkLFxyXG4gICAgVGVtcGxhdGVSZWYsXHJcbiAgICBDb21wb25lbnQsXHJcbiAgICBBZnRlclZpZXdJbml0XHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuXHJcbmltcG9ydCB7IEZpbGVVcGxvYWRDb250cm9sIH0gZnJvbSAnLi4vLi4vaGVscGVycy9jb250cm9sLmNsYXNzJztcclxuaW1wb3J0IHsgSXNOdWxsT3JFbXB0eSB9IGZyb20gJy4uLy4uL2hlbHBlcnMvaGVscGVycy5jbGFzcyc7XHJcbmltcG9ydCB7IEZpbGVVcGxvYWRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZmlsZS11cGxvYWQuc2VydmljZSc7XHJcbmltcG9ydCB7IERSQUdPVkVSLCBUT1VDSEVEIH0gZnJvbSAnLi8uLi9tdWx0aXBsZS1maWxlLXVwbG9hZC9maWxlLXVwbG9hZC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiBgW2ZpbGUtZHJvcC16b25lXWAsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cclxuICAgICAgICA8ZGl2ICNvdmVybGF5IGNsYXNzPVwib3ZlcmxheVwiICpuZ0lmPVwiZmlsZVVwbG9hZFNlcnZpY2UuaXNGaWxlRHJhZ0Ryb3BBdmFpbGFibGUoKVwiPlxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInVwbG9hZC1pbnB1dFwiPlxyXG4gICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cInRlbXBsYXRlUmVmID8gdGVtcGxhdGVSZWYgOiBkZWZhdWx0VGVtcGxhdGVcIj48L25nLWNvbnRhaW5lcj5cclxuXHJcbiAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgI2RlZmF1bHRUZW1wbGF0ZT5cclxuICAgICAgICAgICAgICAgICAgICA8ZmlsZS11cGxvYWQtZHJvcC16b25lPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Yj5Ecm9wPC9iPiBpdCBoZXJlXHJcbiAgICAgICAgICAgICAgICAgICAgPC9maWxlLXVwbG9hZC1kcm9wLXpvbmU+XHJcbiAgICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIGAsXHJcbiAgICBzdHlsZVVybHM6IFtgLi9maWxlLXVwbG9hZC1hdHRyLmNvbXBvbmVudC5zY3NzYF0sXHJcbiAgICBwcm92aWRlcnM6IFsgXHJcbiAgICAgICAgRmlsZVVwbG9hZFNlcnZpY2VcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZpbGVVcGxvYWRBdHRyaWJ1dGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHB1YmxpYyBjb250cm9sOiBGaWxlVXBsb2FkQ29udHJvbCA9IG51bGw7XHJcblxyXG4gICAgQFZpZXdDaGlsZCgnb3ZlcmxheScpXHJcbiAgICBwdWJsaWMgb3ZlcmxheTogRWxlbWVudFJlZjxIVE1MRGl2RWxlbWVudD47XHJcblxyXG4gICAgQENvbnRlbnRDaGlsZCgncGxhY2Vob2xkZXInKVxyXG4gICAgcHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+ID0gbnVsbDtcclxuXHJcbiAgICBwcml2YXRlIGhvb2tzOiBBcnJheTxGdW5jdGlvbj4gPSBbXTtcclxuXHJcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbnM6IEFycmF5PFN1YnNjcmlwdGlvbj4gPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgZmlsZVVwbG9hZFNlcnZpY2U6IEZpbGVVcGxvYWRTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgaG9zdEVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXHJcbiAgICAgICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxyXG4gICAgICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnRcclxuICAgICkge31cclxuXHJcbiAgICBwdWJsaWMgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgaWYgKElzTnVsbE9yRW1wdHkodGhpcy5jb250cm9sKSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2wgPSBuZXcgRmlsZVVwbG9hZENvbnRyb2woKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5maWxlVXBsb2FkU2VydmljZS5pc0ZpbGVEcmFnRHJvcEF2YWlsYWJsZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RXZlbnRzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tBbmRNYXJrQXNEaXNhYmxlZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5ob29rcy5mb3JFYWNoKChob29rKSA9PiBob29rKCkpO1xyXG4gICAgICAgIHRoaXMuaG9va3MubGVuZ3RoID0gMDtcclxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaCgoc3Vic2NyaXB0aW9uKSA9PiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKSk7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmxlbmd0aCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5oYXMtZmlsZXMnKVxyXG4gICAgcHVibGljIGdldCBoYXNGaWxlcygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sLmlzTGlzdFZpc2libGUgJiYgdGhpcy5jb250cm9sLnNpemUgPiAwO1xyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MubmctaW52YWxpZCcpXHJcbiAgICBwdWJsaWMgZ2V0IGlzSW52YWxpZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuY29udHJvbC5kaXNhYmxlZCAmJiB0aGlzLmNvbnRyb2wuaW52YWxpZDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldEV2ZW50cygpOiB2b2lkIHtcclxuICAgICAgICBbJ2RyYWcnLCAnZHJhZ3N0YXJ0JywgJ2RyYWdlbmQnLCAnZHJhZ292ZXInLCAnZHJhZ2VudGVyJywgJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaCgoZXZlbnROYW1lKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9va3MucHVzaChcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMuZG9jdW1lbnQsIGV2ZW50TmFtZSwgKGV2ZW50OiBhbnkpID0+IHRoaXMucHJldmVudERyYWdFdmVudHMoZXZlbnQpKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBbJ2RyYWdvdmVyJywgJ2RyYWdlbnRlciddLmZvckVhY2goKGV2ZW50TmFtZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmhvb2tzLnB1c2goXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLmhvc3RFbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIGV2ZW50TmFtZSwgKGV2ZW50OiBhbnkpID0+IHRoaXMub25EcmFnT3ZlcihldmVudCkpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIFsnZHJhZ2xlYXZlJywgJ2RyYWdlbmQnLCAnZHJvcCddLmZvckVhY2goKGV2ZW50TmFtZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmhvb2tzLnB1c2goXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLmhvc3RFbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIGV2ZW50TmFtZSwgKGV2ZW50OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLmNvbnRyb2wuZGlzYWJsZWQgJiYgZXZlbnROYW1lID09PSAnZHJhZ2xlYXZlJyB8fCBldmVudE5hbWUgIT09ICdkcmFnbGVhdmUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25EcmFnTGVhdmUoZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIFsnZHJhZ2xlYXZlJ10uZm9yRWFjaCgoZXZlbnROYW1lKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9va3MucHVzaChcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMub3ZlcmxheS5uYXRpdmVFbGVtZW50LCBldmVudE5hbWUsIChldmVudDogYW55KSA9PiB0aGlzLm9uRHJhZ0xlYXZlKGV2ZW50KSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goXHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbC5zdGF0dXNDaGFuZ2VzLnN1YnNjcmliZSgoc3RhdHVzKSA9PiB0aGlzLmNoZWNrQW5kTWFya0FzRGlzYWJsZWQoKSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tBbmRNYXJrQXNEaXNhYmxlZCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5jb250cm9sLmRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5ob3N0RWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnZGlzYWJsZWQnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuaG9zdEVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcHJldmVudERyYWdFdmVudHMoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIG9uIGZpbGUgb3ZlciBhZGQgY2xhc3MgbmFtZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uRHJhZ092ZXIoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmhvc3RFbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIERSQUdPVkVSKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIG9uIG1vdXNlIG91dCByZW1vdmUgY2xhc3MgbmFtZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uRHJhZ0xlYXZlKGV2ZW50OiBFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5ob3N0RWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBEUkFHT1ZFUik7XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RMaXN0ZW5lcignZHJvcCcsIFsnJGV2ZW50J10pXHJcbiAgICBwdWJsaWMgb25Ecm9wKGV2ZW50OiBFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRyb2wuZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmaWxlcyA9IChldmVudCBhcyBhbnkpLmRhdGFUcmFuc2Zlci5maWxlcztcclxuICAgICAgICB0aGlzLmNvbnRyb2wuYWRkRmlsZXMoZmlsZXMpO1xyXG4gICAgICAgIHRoaXMub25Ub3VjaCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Ub3VjaDogKCkgPT4gdm9pZCA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuaG9zdEVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgVE9VQ0hFRCk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==