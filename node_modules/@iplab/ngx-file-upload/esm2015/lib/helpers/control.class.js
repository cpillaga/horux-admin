import { BehaviorSubject, Subject } from 'rxjs';
import { IsNullOrEmpty } from './helpers.class';
export var STATUS;
(function (STATUS) {
    STATUS[STATUS["INVALID"] = 0] = "INVALID";
    STATUS[STATUS["VALID"] = 1] = "VALID";
    STATUS[STATUS["DISABLED"] = 2] = "DISABLED";
})(STATUS || (STATUS = {}));
export var FileEvent;
(function (FileEvent) {
    FileEvent["click"] = "click";
    FileEvent["focus"] = "focus";
    FileEvent["blur"] = "blur";
})(FileEvent || (FileEvent = {}));
export class FileUploadControl {
    constructor(validators) {
        this.files = new Set();
        this.listVisible = true;
        this.status = STATUS.VALID;
        this.errors = [];
        this.validators = [];
        this.multipleEnabled = true;
        this.multipleChanged = new BehaviorSubject(this.multipleEnabled);
        this.statusChanged = new Subject();
        this.eventsChanged = new Subject();
        this.accept = null;
        this.acceptChanged = new BehaviorSubject(this.accept);
        /**
         * track status `VALID`, `INVALID` or `DISABLED`
         */
        this.statusChanges = this.statusChanged.asObservable();
        /**
         * emit an event every time the value of the control
         * changes.
         * Initially returns last value
         */
        this.valueChanges = new BehaviorSubject([]);
        /**
         * @internal
         * used to trigger layout change for list visibility
         */
        this.listVisibilityChanges = new BehaviorSubject(this.listVisible);
        /**
         * track changed on accept attribute
         */
        this.acceptChanges = this.acceptChanged.asObservable();
        /**
         * emit an event every time user programmatically ask for certain event
         */
        this.eventsChanges = this.eventsChanged.asObservable();
        /**
         * track changed on multiple attribute
         */
        this.multipleChanges = this.multipleChanged.asObservable();
        this.defineValidators(validators);
    }
    /**
     * set functions that determines the synchronous validity of this control.
     */
    setValidators(newValidators) {
        this.defineValidators(newValidators);
        this.validate();
        return this;
    }
    defineValidators(validators) {
        if (!IsNullOrEmpty(validators)) {
            this.validators = Array.isArray(validators) ? [...validators] : [validators];
        }
    }
    addFile(file) {
        /**
         * if multiple is disabled and one file exists
         * clear it and reupload a new one
         */
        if (!this.multipleEnabled && this.files.size === 1) {
            this.files.clear();
        }
        this.files.add(file);
        this.validate();
        this.valueChanges.next(Array.from(this.files.values()));
        return this;
    }
    removeFile(file) {
        if (!this.disabled) {
            this.files.delete(file);
            this.validate();
            this.valueChanges.next(Array.from(this.files.values()));
        }
        return this;
    }
    addFiles(files) {
        this.addMultipleFiles(Array.from(files));
        return this;
    }
    /**
     * @internal
     * used to prevent valueChanges emit more times
     * when multiple files are uploaded
     */
    addMultipleFiles(files) {
        if (!this.multipleEnabled && !IsNullOrEmpty(files)) {
            // add only one file
            this.addFile(files[0]);
            return;
        }
        files.forEach(file => this.files.add(file));
        this.validate();
        this.valueChanges.next(Array.from(this.files.values()));
    }
    get valid() {
        return this.errors.length === 0 && this.status !== STATUS.DISABLED;
    }
    get invalid() {
        return this.errors.length > 0;
    }
    getError() {
        return this.errors;
    }
    /**
     * number of uploaded files
     */
    get size() {
        return this.files.size;
    }
    /**
     * return list of Files
     */
    get value() {
        return Array.from(this.files.values());
    }
    setValue(files) {
        this.files.clear();
        if (files instanceof Array) {
            this.addMultipleFiles(files);
        }
        else {
            throw Error(`FormControl.setValue was provided with wrong argument type, ${files} was provided instead Array<File>`);
        }
        return this;
    }
    /**
     * reset the control
     */
    clear() {
        this.files.clear();
        this.validate();
        this.valueChanges.next(Array.from(this.files.values()));
        return this;
    }
    get isListVisible() {
        return this.listVisible;
    }
    setListVisibility(isVisible = true) {
        this.listVisible = isVisible;
        this.listVisibilityChanges.next(this.listVisible);
        return this;
    }
    get disabled() {
        return this.status === STATUS.DISABLED;
    }
    enable(isEnabled = true) {
        this.status = isEnabled ? STATUS.VALID : STATUS.DISABLED;
        this.validate();
        this.statusChanged.next(this.status);
        return this;
    }
    disable(isDisabled = true) {
        this.status = isDisabled ? STATUS.DISABLED : STATUS.VALID;
        this.validate();
        this.statusChanged.next(this.status);
        return this;
    }
    click() {
        this.eventsChanged.next(FileEvent.click);
        return this;
    }
    focus() {
        this.eventsChanged.next(FileEvent.focus);
        return this;
    }
    blur() {
        this.eventsChanged.next(FileEvent.blur);
        return this;
    }
    /**
     * specifies the types of files that the server accepts
     *
     * ### Example
     *
     * ```
     * acceptFiles("file_extension|audio/*|video/*|image/*|media_type")
     * ```
     *
     * To specify more than one value, separate the values with a comma (e.g. acceptFiles("audio/*,video/*,image/*").
     *
     */
    acceptFiles(accept) {
        this.accept = accept;
        this.acceptChanged.next(this.accept);
        return this;
    }
    acceptAll() {
        this.accept = null;
        this.acceptChanged.next(this.accept);
        return this;
    }
    get isMultiple() {
        return this.multipleEnabled;
    }
    multiple(isEnabled = true) {
        this.multipleEnabled = isEnabled;
        this.multipleChanged.next(this.multipleEnabled);
        return this;
    }
    validate() {
        if (this.status !== STATUS.DISABLED) {
            const currentState = this.valid;
            this.errors = this.validators.map((validator) => validator(this)).filter((isInvalid) => isInvalid);
            if (currentState !== this.valid) {
                this.statusChanged.next(this.valid ? STATUS.VALID : STATUS.INVALID);
            }
        }
        else {
            this.errors.length = 0;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,