var FileUploadComponent_1;
import { __decorate, __metadata, __param } from "tslib";
import { Component, Input, ElementRef, HostListener, Renderer2, HostBinding, Inject, TemplateRef, ViewChild, ChangeDetectionStrategy, ContentChild, forwardRef, ChangeDetectorRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FileUploadControl } from './../../helpers/control.class';
import { FileUploadService } from './../../services/file-upload.service';
import { InsertAnimation } from './../../animations/insert.animation';
import { ZoomAnimation } from './../../animations/zoom.animation';
import { FileUploadAbstract } from './../file-upload-abstract.component';
export const DRAGOVER = 'dragover';
export const TOUCHED = 'ng-touched';
let FileUploadComponent = FileUploadComponent_1 = class FileUploadComponent extends FileUploadAbstract {
    constructor(fileUploadService, hostElementRef, renderer, document, cdr) {
        super(hostElementRef, renderer, cdr);
        this.fileUploadService = fileUploadService;
        this.document = document;
        this.control = null;
        this.animation = true;
        this.templateRef = null;
        this.listItem = null;
        this.templateContext = {
            $implicit: this.fileUploadService.isFileDragDropAvailable(),
            isFileDragDropAvailable: this.fileUploadService.isFileDragDropAvailable()
        };
        /** animation fields */
        this.zoomText = 'static';
        this.listVisible = false;
        this.onTouch = () => {
            this.renderer.addClass(this.hostElementRef.nativeElement, TOUCHED);
        };
    }
    set multiple(isMultiple) {
        this.isMultiple = isMultiple;
        this.checkAndSetMultiple();
    }
    get hasFiles() {
        return this.control.isListVisible && this.control.size > 0;
    }
    get isInvalid() {
        return !this.control.disabled && this.control.invalid;
    }
    get isAnimationDisabled() {
        return this.animation === false || this.animation === 'false';
    }
    setEvents() {
        super.setEvents();
        ['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'].forEach((eventName) => {
            this.hooks.push(this.renderer.listen(this.document, eventName, (event) => this.preventDragEvents(event)));
        });
        ['dragover', 'dragenter'].forEach((eventName) => {
            this.hooks.push(this.renderer.listen(this.hostElementRef.nativeElement, eventName, (event) => this.onDragOver(event)));
        });
        ['dragleave', 'dragend', 'drop'].forEach((eventName) => {
            this.hooks.push(this.renderer.listen(this.hostElementRef.nativeElement, eventName, (event) => this.onDragLeave(event)));
        });
        this.subscriptions.push(this.control.valueChanges.subscribe((files) => this.renderView()));
        this.subscriptions.push(this.control.listVisibilityChanges.subscribe((status) => this.toggleListVisibility()));
    }
    onKeyDown(event) {
        if (event.keyCode === 13 || event.keyCode === 32) {
            event.preventDefault();
            this.control.click();
        }
    }
    preventDragEvents(event) {
        event.preventDefault();
        event.stopPropagation();
    }
    renderView() {
        if (!this.listVisible) {
            this.zoomText = this.control.isListVisible && this.control.size > 0 ? 'zoomOut' : 'static';
        }
        this.cdr.markForCheck();
    }
    showList() {
        if (this.zoomText !== 'static') {
            this.listVisible = true;
        }
    }
    hideList() {
        this.listVisible = false;
    }
    toggleListVisibility() {
        this.listVisible = this.control.isListVisible && this.control.size > 0;
        if (this.listVisible) {
            this.renderer.addClass(this.hostElementRef.nativeElement, 'list-visible');
            this.zoomText = 'static';
        }
        this.cdr.markForCheck();
    }
    /**
     * on file over add class name
     */
    onDragOver(event) {
        this.renderer.addClass(this.hostElementRef.nativeElement, DRAGOVER);
    }
    /**
     * on mouse out remove class name
     */
    onDragLeave(event) {
        this.renderer.removeClass(this.hostElementRef.nativeElement, DRAGOVER);
    }
    onDrop(event) {
        if (this.control.disabled) {
            return;
        }
        // There is some issue with DragEvent in typescript lib.dom.d.ts
        const files = event.dataTransfer.files;
        this.control.addFiles(files);
        this.onTouch();
    }
    onInputChange(event) {
        const input = (event.target);
        if (!this.control.disabled && input.files.length > 0) {
            this.control.addFiles(input.files);
            this.clearInputEl();
        }
        this.onTouch();
    }
    /**
     * model -> view changes
     */
    writeValue(files) {
        if (files != null) {
            this.control.setValue(files);
        }
    }
    /**
     * register function which will be called on UI change
     * to update view -> model
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    setDisabledState(isDisabled) {
        this.control.disable(isDisabled);
    }
    zoomAnimationDone(event) {
        if (this.control.isListVisible && this.control.size > 0) {
            this.showList();
        }
        else {
            this.hideList();
        }
        if (event.fromState === 'static' && event.toState === 'zoomOut') {
            this.renderer.addClass(this.hostElementRef.nativeElement, 'hide-text');
        }
        else {
            this.renderer.removeClass(this.hostElementRef.nativeElement, 'hide-text');
        }
        if (event.toState === 'zoomIn') {
            this.zoomText = 'static';
        }
    }
    animationListFinished(event) {
        if (event.toState === 'void') {
            this.zoomText = 'zoomIn';
            this.renderer.removeClass(this.hostElementRef.nativeElement, 'list-visible');
        }
        if (event.fromState === 'void') {
            this.zoomText = 'static';
            this.renderer.addClass(this.hostElementRef.nativeElement, 'list-visible');
        }
    }
};
FileUploadComponent.ctorParameters = () => [
    { type: FileUploadService },
    { type: ElementRef },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ChangeDetectorRef }
];
__decorate([
    Input(),
    __metadata("design:type", FileUploadControl)
], FileUploadComponent.prototype, "control", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FileUploadComponent.prototype, "animation", void 0);
__decorate([
    Input('multiple'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], FileUploadComponent.prototype, "multiple", null);
__decorate([
    ContentChild('placeholder'),
    __metadata("design:type", TemplateRef)
], FileUploadComponent.prototype, "templateRef", void 0);
__decorate([
    ContentChild('item'),
    __metadata("design:type", TemplateRef)
], FileUploadComponent.prototype, "listItem", void 0);
__decorate([
    ViewChild('inputRef', { static: true }),
    __metadata("design:type", ElementRef)
], FileUploadComponent.prototype, "input", void 0);
__decorate([
    ViewChild('labelRef', { static: true }),
    __metadata("design:type", ElementRef)
], FileUploadComponent.prototype, "label", void 0);
__decorate([
    HostBinding('class.has-files'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], FileUploadComponent.prototype, "hasFiles", null);
__decorate([
    HostBinding('class.ng-invalid'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], FileUploadComponent.prototype, "isInvalid", null);
__decorate([
    HostBinding('@.disabled'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], FileUploadComponent.prototype, "isAnimationDisabled", null);
__decorate([
    HostListener('drop', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Event]),
    __metadata("design:returntype", void 0)
], FileUploadComponent.prototype, "onDrop", null);
FileUploadComponent = FileUploadComponent_1 = __decorate([
    Component({
        selector: `file-upload:not([simple])`,
        template: "<label #labelRef class=\"upload-input\" tabindex=\"0\" (keydown)=\"onKeyDown($event)\" [@zoomAnimation]=\"zoomText\" (@zoomAnimation.done)=\"zoomAnimationDone($event)\">\r\n\r\n    <ng-container *ngTemplateOutlet=\"templateRef ? templateRef : defaultTemplate; context: templateContext\"></ng-container>\r\n\r\n    <ng-template #defaultTemplate let-isFileDragDropAvailable=\"isFileDragDropAvailable\">\r\n        <file-upload-drop-zone>\r\n            <ng-container *ngIf=\"isFileDragDropAvailable; else isNotDragDropAvailable\">\r\n                <b>Drag and drop</b> files<br> or click here\r\n            </ng-container>\r\n            <ng-template #isNotDragDropAvailable>\r\n                <b>Click here</b> to<br> choose a files\r\n            </ng-template>\r\n        </file-upload-drop-zone>\r\n    </ng-template>\r\n\r\n    <input #inputRef type=\"file\" class=\"files-input\" tabindex=\"-1\" multiple (change)=\"onInputChange($event)\">\r\n</label>\r\n\r\n<div class=\"upload-list\" *ngIf=\"(control.listVisibilityChanges | async) && control.size > 0 && listVisible\" [@insertAnimation]=\"control.size\" (@insertAnimation.done)=\"animationListFinished($event)\">\r\n    <ng-template ngFor let-file let-i=\"index\" [ngForOf]=\"control.valueChanges | async\">\r\n        <ng-container *ngTemplateOutlet=\"listItem ? listItem : defaultItemTemplate; context: { $implicit: file, file: file, index: i, control: control }\"></ng-container>\r\n    </ng-template>\r\n    \r\n    <ng-template #defaultItemTemplate let-i=\"index\" let-file=\"file\" let-control=\"control\">\r\n        <file-upload-list-item  [index]=\"i\" [file]=\"file\" [control]=\"control\">Remove</file-upload-list-item>\r\n    </ng-template>\r\n</div>",
        providers: [
            FileUploadService,
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => FileUploadComponent_1),
                multi: true
            }
        ],
        changeDetection: ChangeDetectionStrategy.OnPush,
        animations: [
            ZoomAnimation,
            InsertAnimation
        ],
        styles: ["@charset \"UTF-8\";:host,:host>*{box-sizing:border-box}:host{overflow:hidden;display:block;background:#fafafa;padding:20px 66px 20px 20px;min-height:140px;outline:#92b0b3 dashed 1px;outline-offset:-10px;position:relative}:host ::ng-deep .icon{float:left}:host(.dragover){outline-width:2px}:host(.disabled){opacity:.5;cursor:no-drop}.files-input{width:.1px;height:.1px;opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden}.upload-input:after{clear:both;content:\"\u00A0\";display:block;height:0;line-height:0;visibility:hidden;zoom:1}.upload-input{cursor:pointer;display:inline-block;color:#646464;position:absolute;top:50%;left:50%;margin:0;-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);outline:0}:host(.disabled) .upload-input{cursor:not-allowed}:host(.list-visible) .upload-input{top:20px;left:100%;margin-left:-20px;-ms-transform:translate(-100%,0);transform:translate(-100%,0);text-align:center}:host(.hide-text) .upload-input{opacity:0}:host(.dragover:not(.disabled)) .upload-input,:host(:not(.disabled)) .upload-input:focus,:host(:not(.disabled)) .upload-input:hover{color:#80a9d2}:host(.dragover:not(.disabled)) .icon svg,:host(:not(.disabled)) .upload-input:focus svg,:host(:not(.disabled)) .upload-input:hover svg{fill:#80a9d2}file-upload-list-item{padding:10px 0 0}file-upload-list-item:first-child{padding:0}"]
    }),
    __param(3, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [FileUploadService,
        ElementRef,
        Renderer2, Object, ChangeDetectorRef])
], FileUploadComponent);
export { FileUploadComponent };
//# sourceMappingURL=data:application/json;base64,