import { __decorate } from "tslib";
/*
 * FileUpload
 *
 * By Ivan Pintar, http://www.pintar-ivan.com
 * Licensed under the MIT License
 * See https://github.com/pIvan/file-upload/blob/master/README.md
 */
import { NgModule } from '@angular/core';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { FileUploadComponent } from './components/multiple-file-upload/file-upload.component';
import { FileUploadDropZoneComponent } from './components/drop-zone/file-upload-drop-zone.component';
import { FileUploadListItemComponent } from './components/file-list/file-upload-list-item.component';
import { FileUploadIconComponent } from './components/file-list/file-upload-icon.component';
import { FileUploadAttributeComponent } from './components/attribute/file-upload-attr.component';
import { SimpleFileUploadComponent } from './components/simple-file-upload/simple-file-upload.component';
import { FileSizeValidator, FilesLimitValidator, FilesAcceptValidator } from './directives/validators.directive';
import { FilesAcceptDirective } from './directives/attribute.directive';
export { FileUploadComponent } from './components/multiple-file-upload/file-upload.component';
export { FileUploadDropZoneComponent } from './components/drop-zone/file-upload-drop-zone.component';
export { FileUploadAttributeComponent } from './components/attribute/file-upload-attr.component';
export { SimpleFileUploadComponent } from './components/simple-file-upload/simple-file-upload.component';
export { FileSizeValidator, FilesLimitValidator, FilesAcceptValidator } from './directives/validators.directive';
export { FilesAcceptDirective } from './directives/attribute.directive';
export { FileUploadControl } from './helpers/control.class';
export { FileUploadValidators } from './helpers/validators.class';
export { FileUploadTypes } from './helpers/file-types.class';
export { FileUploadService } from './services/file-upload.service';
let FileUploadModule = class FileUploadModule {
    ngDoBootstrap() { }
};
FileUploadModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            ReactiveFormsModule,
            FormsModule
        ],
        declarations: [
            FileUploadComponent,
            FileUploadListItemComponent,
            FileUploadIconComponent,
            FileUploadDropZoneComponent,
            FileUploadAttributeComponent,
            FileSizeValidator,
            FilesLimitValidator,
            FilesAcceptValidator,
            FilesAcceptDirective,
            SimpleFileUploadComponent
        ],
        exports: [
            FileUploadComponent,
            FileUploadDropZoneComponent,
            FileUploadListItemComponent,
            FileUploadAttributeComponent,
            FileSizeValidator,
            FilesLimitValidator,
            FilesAcceptValidator,
            FilesAcceptDirective,
            SimpleFileUploadComponent
        ],
        entryComponents: [
            FileUploadComponent
        ]
    })
], FileUploadModule);
export { FileUploadModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11cGxvYWQubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGlwbGFiL25neC1maWxlLXVwbG9hZC8iLCJzb3VyY2VzIjpbImxpYi9maWxlLXVwbG9hZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRztBQUNILE9BQU8sRUFBRSxRQUFRLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUM5RixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUNyRyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUNyRyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUM1RixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUNqRyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUV6RyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNqSCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUV4RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUM5RixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUNyRyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUNqRyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUN6RyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNqSCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUV4RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsb0JBQW9CLEVBQWlDLE1BQU0sNEJBQTRCLENBQUM7QUFDakcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTdELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBd0NuRSxJQUFhLGdCQUFnQixHQUE3QixNQUFhLGdCQUFnQjtJQUN6QixhQUFhLEtBQUksQ0FBQztDQUNyQixDQUFBO0FBRlksZ0JBQWdCO0lBdEM1QixRQUFRLENBQUM7UUFDTixPQUFPLEVBQUU7WUFDTCxZQUFZO1lBQ1osbUJBQW1CO1lBQ25CLFdBQVc7U0FDZDtRQUNELFlBQVksRUFBRTtZQUNWLG1CQUFtQjtZQUNuQiwyQkFBMkI7WUFDM0IsdUJBQXVCO1lBQ3ZCLDJCQUEyQjtZQUUzQiw0QkFBNEI7WUFFNUIsaUJBQWlCO1lBQ2pCLG1CQUFtQjtZQUNuQixvQkFBb0I7WUFDcEIsb0JBQW9CO1lBRXBCLHlCQUF5QjtTQUM1QjtRQUNELE9BQU8sRUFBRTtZQUNMLG1CQUFtQjtZQUNuQiwyQkFBMkI7WUFDM0IsMkJBQTJCO1lBQzNCLDRCQUE0QjtZQUU1QixpQkFBaUI7WUFDakIsbUJBQW1CO1lBQ25CLG9CQUFvQjtZQUNwQixvQkFBb0I7WUFFcEIseUJBQXlCO1NBQzVCO1FBQ0QsZUFBZSxFQUFFO1lBQ2IsbUJBQW1CO1NBQ3RCO0tBQ0osQ0FBQztHQUNXLGdCQUFnQixDQUU1QjtTQUZZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEZpbGVVcGxvYWRcclxuICpcclxuICogQnkgSXZhbiBQaW50YXIsIGh0dHA6Ly93d3cucGludGFyLWl2YW4uY29tXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxyXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BJdmFuL2ZpbGUtdXBsb2FkL2Jsb2IvbWFzdGVyL1JFQURNRS5tZFxyXG4gKi9cclxuaW1wb3J0IHsgTmdNb2R1bGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJlYWN0aXZlRm9ybXNNb2R1bGUsIEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5cclxuaW1wb3J0IHsgRmlsZVVwbG9hZENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9tdWx0aXBsZS1maWxlLXVwbG9hZC9maWxlLXVwbG9hZC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGaWxlVXBsb2FkRHJvcFpvbmVDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZHJvcC16b25lL2ZpbGUtdXBsb2FkLWRyb3Atem9uZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGaWxlVXBsb2FkTGlzdEl0ZW1Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZmlsZS1saXN0L2ZpbGUtdXBsb2FkLWxpc3QtaXRlbS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGaWxlVXBsb2FkSWNvbkNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9maWxlLWxpc3QvZmlsZS11cGxvYWQtaWNvbi5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGaWxlVXBsb2FkQXR0cmlidXRlQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2F0dHJpYnV0ZS9maWxlLXVwbG9hZC1hdHRyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFNpbXBsZUZpbGVVcGxvYWRDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvc2ltcGxlLWZpbGUtdXBsb2FkL3NpbXBsZS1maWxlLXVwbG9hZC5jb21wb25lbnQnO1xyXG5cclxuaW1wb3J0IHsgRmlsZVNpemVWYWxpZGF0b3IsIEZpbGVzTGltaXRWYWxpZGF0b3IsIEZpbGVzQWNjZXB0VmFsaWRhdG9yIH0gZnJvbSAnLi9kaXJlY3RpdmVzL3ZhbGlkYXRvcnMuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgRmlsZXNBY2NlcHREaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvYXR0cmlidXRlLmRpcmVjdGl2ZSc7XHJcblxyXG5leHBvcnQgeyBGaWxlVXBsb2FkQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL211bHRpcGxlLWZpbGUtdXBsb2FkL2ZpbGUtdXBsb2FkLmNvbXBvbmVudCc7XHJcbmV4cG9ydCB7IEZpbGVVcGxvYWREcm9wWm9uZUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9kcm9wLXpvbmUvZmlsZS11cGxvYWQtZHJvcC16b25lLmNvbXBvbmVudCc7XHJcbmV4cG9ydCB7IEZpbGVVcGxvYWRBdHRyaWJ1dGVDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvYXR0cmlidXRlL2ZpbGUtdXBsb2FkLWF0dHIuY29tcG9uZW50JztcclxuZXhwb3J0IHsgU2ltcGxlRmlsZVVwbG9hZENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9zaW1wbGUtZmlsZS11cGxvYWQvc2ltcGxlLWZpbGUtdXBsb2FkLmNvbXBvbmVudCc7XHJcbmV4cG9ydCB7IEZpbGVTaXplVmFsaWRhdG9yLCBGaWxlc0xpbWl0VmFsaWRhdG9yLCBGaWxlc0FjY2VwdFZhbGlkYXRvciB9IGZyb20gJy4vZGlyZWN0aXZlcy92YWxpZGF0b3JzLmRpcmVjdGl2ZSc7XHJcbmV4cG9ydCB7IEZpbGVzQWNjZXB0RGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2F0dHJpYnV0ZS5kaXJlY3RpdmUnO1xyXG5cclxuZXhwb3J0IHsgRmlsZVVwbG9hZENvbnRyb2wgfSBmcm9tICcuL2hlbHBlcnMvY29udHJvbC5jbGFzcyc7XHJcbmV4cG9ydCB7IEZpbGVVcGxvYWRWYWxpZGF0b3JzLCBWYWxpZGF0aW9uRXJyb3JzLCBWYWxpZGF0b3JGbiB9IGZyb20gJy4vaGVscGVycy92YWxpZGF0b3JzLmNsYXNzJztcclxuZXhwb3J0IHsgRmlsZVVwbG9hZFR5cGVzIH0gZnJvbSAnLi9oZWxwZXJzL2ZpbGUtdHlwZXMuY2xhc3MnO1xyXG5cclxuZXhwb3J0IHsgRmlsZVVwbG9hZFNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2ZpbGUtdXBsb2FkLnNlcnZpY2UnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICAgIGltcG9ydHM6IFtcclxuICAgICAgICBDb21tb25Nb2R1bGUsXHJcbiAgICAgICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcclxuICAgICAgICBGb3Jtc01vZHVsZVxyXG4gICAgXSxcclxuICAgIGRlY2xhcmF0aW9uczogW1xyXG4gICAgICAgIEZpbGVVcGxvYWRDb21wb25lbnQsXHJcbiAgICAgICAgRmlsZVVwbG9hZExpc3RJdGVtQ29tcG9uZW50LFxyXG4gICAgICAgIEZpbGVVcGxvYWRJY29uQ29tcG9uZW50LFxyXG4gICAgICAgIEZpbGVVcGxvYWREcm9wWm9uZUNvbXBvbmVudCxcclxuXHJcbiAgICAgICAgRmlsZVVwbG9hZEF0dHJpYnV0ZUNvbXBvbmVudCxcclxuXHJcbiAgICAgICAgRmlsZVNpemVWYWxpZGF0b3IsXHJcbiAgICAgICAgRmlsZXNMaW1pdFZhbGlkYXRvcixcclxuICAgICAgICBGaWxlc0FjY2VwdFZhbGlkYXRvcixcclxuICAgICAgICBGaWxlc0FjY2VwdERpcmVjdGl2ZSxcclxuXHJcbiAgICAgICAgU2ltcGxlRmlsZVVwbG9hZENvbXBvbmVudFxyXG4gICAgXSxcclxuICAgIGV4cG9ydHM6IFtcclxuICAgICAgICBGaWxlVXBsb2FkQ29tcG9uZW50LFxyXG4gICAgICAgIEZpbGVVcGxvYWREcm9wWm9uZUNvbXBvbmVudCxcclxuICAgICAgICBGaWxlVXBsb2FkTGlzdEl0ZW1Db21wb25lbnQsXHJcbiAgICAgICAgRmlsZVVwbG9hZEF0dHJpYnV0ZUNvbXBvbmVudCxcclxuXHJcbiAgICAgICAgRmlsZVNpemVWYWxpZGF0b3IsXHJcbiAgICAgICAgRmlsZXNMaW1pdFZhbGlkYXRvcixcclxuICAgICAgICBGaWxlc0FjY2VwdFZhbGlkYXRvcixcclxuICAgICAgICBGaWxlc0FjY2VwdERpcmVjdGl2ZSxcclxuXHJcbiAgICAgICAgU2ltcGxlRmlsZVVwbG9hZENvbXBvbmVudFxyXG4gICAgXSxcclxuICAgIGVudHJ5Q29tcG9uZW50czogW1xyXG4gICAgICAgIEZpbGVVcGxvYWRDb21wb25lbnRcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZpbGVVcGxvYWRNb2R1bGUge1xyXG4gICAgbmdEb0Jvb3RzdHJhcCgpIHt9XHJcbn1cclxuIl19