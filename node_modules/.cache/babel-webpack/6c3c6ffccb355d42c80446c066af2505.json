{"ast":null,"code":"import _classCallCheck from \"/Users/pillaga/Documents/Angular Projects/horux/adminPrueba/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pillaga/Documents/Angular Projects/horux/adminPrueba/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ɵɵdefineInjectable, ɵɵinject, PLATFORM_ID, RendererFactory2, Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { isPlatformBrowser, DOCUMENT } from '@angular/common';\nimport { filter } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/router';\n\nvar PixelService = /*@__PURE__*/function () {\n  var PixelService = /*#__PURE__*/function () {\n    function PixelService(config, injectedDocument, platformId, router, rendererFactory) {\n      var _this = this;\n\n      _classCallCheck(this, PixelService);\n\n      this.config = config;\n      this.injectedDocument = injectedDocument;\n      this.platformId = platformId;\n      this.router = router;\n      this.rendererFactory = rendererFactory; // DOCUMENT cannot be injected directly as Document type, see https://github.com/angular/angular/issues/20351\n      // It is therefore injected as any and then cast to Document\n\n      this.doc = injectedDocument;\n      this.renderer = rendererFactory.createRenderer(null, null);\n\n      if (router) {\n        // Log page views after router navigation ends\n        router.events.pipe(filter(function (event) {\n          return event instanceof NavigationEnd;\n        })).subscribe(function (event) {\n          if (_this.isLoaded()) {\n            _this.track('PageView');\n          }\n        });\n      }\n    }\n    /**\n     * Initialize the Pixel tracking script\n     * - Adds the script to page's head\n     * - Tracks first page view\n     */\n\n\n    _createClass(PixelService, [{\n      key: \"initialize\",\n      value: function initialize() {\n        var pixelId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.pixelId;\n\n        if (this.isLoaded()) {\n          console.warn('Tried to initialize a Pixel instance while another is already active. Please call `remove()` before initializing a new instance.');\n          return;\n        }\n\n        this.config.enabled = true;\n        this.addPixelScript(pixelId);\n      }\n      /** Remove the Pixel tracking script */\n\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        this.removePixelScript();\n        this.config.enabled = false;\n      }\n      /**\n       * Track a Standard Event as predefined by Facebook\n       *\n       * See {@link https://developers.facebook.com/docs/facebook-pixel/reference Facebook Pixel docs - reference}\n       * @param eventName The name of the event that is being tracked\n       * @param properties Optional properties of the event\n       */\n\n    }, {\n      key: \"track\",\n      value: function track(eventName, properties) {\n        if (!isPlatformBrowser(this.platformId)) {\n          return;\n        }\n\n        if (!this.isLoaded()) {\n          console.warn('Tried to track an event without initializing a Pixel instance. Call `initialize()` first.');\n          return;\n        }\n\n        if (properties) {\n          fbq('track', eventName, properties);\n        } else {\n          fbq('track', eventName);\n        }\n      }\n      /**\n       * Track a custom Event\n       *\n       * See {@link https://developers.facebook.com/docs/facebook-pixel/implementation/conversion-tracking#custom-conversions Facebook Pixel docs - custom conversions}\n       * @param eventName The name of the event that is being tracked\n       * @param properties Optional properties of the event\n       */\n\n    }, {\n      key: \"trackCustom\",\n      value: function trackCustom(eventName, properties) {\n        if (!isPlatformBrowser(this.platformId)) {\n          return;\n        }\n\n        if (!this.isLoaded()) {\n          console.warn('Tried to track an event without initializing a Pixel instance. Call `initialize()` first.');\n          return;\n        }\n\n        if (properties) {\n          fbq('trackCustom', eventName, properties);\n        } else {\n          fbq('trackCustom', eventName);\n        }\n      }\n      /**\n       * Adds the Facebook Pixel tracking script to the application\n       * @param pixelId The Facebook Pixel ID to use\n       */\n\n    }, {\n      key: \"addPixelScript\",\n      value: function addPixelScript(pixelId) {\n        if (!isPlatformBrowser(this.platformId)) {\n          return;\n        }\n\n        var pixelCode = \"\\n    var pixelCode = function(f,b,e,v,n,t,s)\\n    {if(f.fbq)return;n=f.fbq=function(){n.callMethod?\\n    n.callMethod.apply(n,arguments):n.queue.push(arguments)};\\n    if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';\\n    n.queue=[];t=b.createElement(e);t.async=!0;\\n    t.src=v;s=b.getElementsByTagName(e)[0];\\n    s.parentNode.insertBefore(t,s)}(window, document,'script',\\n    'https://connect.facebook.net/en_US/fbevents.js');\\n    fbq('init', '\".concat(pixelId, \"');\\n    fbq('track', 'PageView');\");\n        var scriptElement = this.renderer.createElement('script');\n        this.renderer.setAttribute(scriptElement, 'id', 'pixel-script');\n        this.renderer.setAttribute(scriptElement, 'type', 'text/javascript');\n        this.renderer.setProperty(scriptElement, 'innerHTML', pixelCode);\n        this.renderer.appendChild(this.doc.head, scriptElement);\n      }\n      /** Remove Facebook Pixel tracking script from the application */\n\n    }, {\n      key: \"removePixelScript\",\n      value: function removePixelScript() {\n        if (!isPlatformBrowser(this.platformId)) {\n          return;\n        }\n\n        var pixelElement = this.doc.getElementById('pixel-script');\n\n        if (pixelElement) {\n          pixelElement.remove();\n        }\n      }\n      /** Checks if the script element is present */\n\n    }, {\n      key: \"isLoaded\",\n      value: function isLoaded() {\n        if (isPlatformBrowser(this.platformId)) {\n          var pixelElement = this.doc.getElementById('pixel-script');\n          return !!pixelElement;\n        }\n\n        return false;\n      }\n    }]);\n\n    return PixelService;\n  }();\n\n  PixelService.ɵfac = function PixelService_Factory(t) {\n    return new (t || PixelService)(ɵngcc0.ɵɵinject('config'), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc1.Router, 8), ɵngcc0.ɵɵinject(ɵngcc0.RendererFactory2));\n  };\n\n  PixelService.ɵprov = ɵɵdefineInjectable({\n    factory: function PixelService_Factory() {\n      return new PixelService(ɵɵinject(\"config\"), ɵɵinject(DOCUMENT), ɵɵinject(PLATFORM_ID), ɵɵinject(Router, 8), ɵɵinject(RendererFactory2));\n    },\n    token: PixelService,\n    providedIn: \"root\"\n  });\n  return PixelService;\n}();\n\nvar PixelModule = /*@__PURE__*/function () {\n  var PixelModule = /*#__PURE__*/function () {\n    function PixelModule(pixel, platformId) {\n      _classCallCheck(this, PixelModule);\n\n      this.pixel = pixel;\n\n      if (!PixelModule.config) {\n        throw Error('ngx-pixel not configured correctly. Pass the `pixelId` property to the `forRoot()` function');\n      }\n\n      if (PixelModule.config.enabled && isPlatformBrowser(platformId)) {\n        this.pixel.initialize();\n      }\n    }\n    /**\n     * Initiale the Facebook Pixel Module\n     *\n     * Add your Pixel ID as parameter\n     */\n\n\n    _createClass(PixelModule, null, [{\n      key: \"forRoot\",\n      value: function forRoot(config) {\n        this.config = config;\n        var pixelId = config.pixelId;\n        this.verifyPixelId(pixelId);\n        return {\n          ngModule: PixelModule,\n          providers: [PixelService, {\n            provide: 'config',\n            useValue: config\n          }]\n        };\n      }\n      /**\n       * Verifies the Pixel ID that was passed into the configuration.\n       * - Checks if Pixel was initialized\n       * @param pixelId Pixel ID to verify\n       */\n\n    }, {\n      key: \"verifyPixelId\",\n      value: function verifyPixelId(pixelId) {\n        // Have to verify first that all Pixel IDs follow the same 15 digit format\n        if (pixelId === null || pixelId === undefined || pixelId.length === 0) {\n          throw Error('Invalid Facebook Pixel ID. Did you pass the ID into the forRoot() function?');\n        }\n      }\n    }]);\n\n    return PixelModule;\n  }();\n\n  PixelModule.ɵfac = function PixelModule_Factory(t) {\n    return new (t || PixelModule)(ɵngcc0.ɵɵinject(PixelService), ɵngcc0.ɵɵinject(PLATFORM_ID));\n  };\n\n  PixelModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: PixelModule\n  });\n  PixelModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  PixelModule.config = null;\n  return PixelModule;\n}();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { PixelModule, PixelService }; //# sourceMappingURL=ngx-pixel.js.map","map":null,"metadata":{},"sourceType":"module"}