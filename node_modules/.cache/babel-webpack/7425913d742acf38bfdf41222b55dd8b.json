{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar dictionary_1 = require(\"./dictionary\");\n\nvar Event =\n/** @class */\nfunction () {\n  function Event() {\n    this._Events = new dictionary_1.Dictionary();\n    this._maxListeners = null;\n  }\n\n  Event.prototype.addListener = function (eventName, listener) {\n    return this.on(eventName, listener);\n  };\n\n  Event.prototype.on = function (eventName, listener) {\n    this._registerEvent(eventName, listener, false);\n\n    return this;\n  };\n\n  Event.prototype.once = function (eventName, listener) {\n    this._registerEvent(eventName, listener, true);\n\n    return this;\n  };\n\n  Event.prototype.emit = function (eventName) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var listeners = this._Events.Item(eventName);\n\n    var listenerCount = this.listenerCount(eventName);\n\n    if (listeners) {\n      listeners.map(function (listener) {\n        return listener.apply(void 0, args);\n      });\n    }\n\n    return listenerCount === 0 ? false : true;\n  };\n\n  Event.prototype.eventNames = function () {\n    return this._Events.Keys();\n  };\n\n  Event.prototype.getMaxListeners = function () {\n    return this._maxListeners === null ? Event.defaultMaxListeners : this._maxListeners;\n  };\n\n  Event.prototype.setMaxListeners = function (limit) {\n    this._maxListeners = limit;\n    return this;\n  };\n\n  Event.prototype.listeners = function (eventName) {\n    return this._Events.Item(eventName);\n  };\n\n  Event.prototype.listenerCount = function (eventName) {\n    var event = this._Events.Item(eventName);\n\n    return event === undefined ? 0 : event.length;\n  };\n\n  Event.prototype.removeAllListeners = function (eventNames) {\n    var _this = this;\n\n    if (!eventNames) {\n      eventNames = this._Events.Keys();\n    }\n\n    eventNames.forEach(function (eventName) {\n      return _this._Events.Remove(eventName);\n    });\n    return this;\n  };\n\n  Event.prototype.removeListener = function (eventName, listener) {\n    var listeners = this.listeners(eventName).filter(function (item) {\n      return item === listener;\n    });\n\n    this._Events.Add(eventName, listeners);\n\n    return this;\n  };\n\n  Event.prototype._registerEvent = function (eventName, listener, type) {\n    if (this._ListenerLimitReached(eventName)) {\n      console.log(\"Maximum listener reached, new Listener not added\");\n      return;\n    }\n\n    if (type === true) {\n      listener = this._createOnceListener(listener, eventName);\n    }\n\n    var listeners = this._createListeners(listener, this.listeners(eventName));\n\n    this._Events.Add(eventName, listeners);\n\n    return;\n  };\n\n  Event.prototype._createListeners = function (listener, listeners) {\n    if (!listeners) {\n      listeners = new Array();\n    }\n\n    listeners.push(listener);\n    return listeners;\n  };\n\n  Event.prototype._createOnceListener = function (listener, eventName) {\n    var _this = this;\n\n    var newListener = function newListener() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      _this.removeListener(eventName, listener);\n\n      return listener.apply(void 0, args);\n    };\n\n    return newListener;\n  };\n\n  Event.prototype._ListenerLimitReached = function (eventName) {\n    return this.listenerCount(eventName) === this.getMaxListeners() ? true : false;\n  };\n\n  Event.defaultMaxListeners = 10;\n  return Event;\n}();\n\nexports.Event = Event;\nexports.default = Event;","map":null,"metadata":{},"sourceType":"script"}