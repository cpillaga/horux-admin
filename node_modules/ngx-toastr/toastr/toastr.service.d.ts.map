{"version":3,"file":"toastr.service.d.ts","sources":["toastr.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ComponentRef, Injector, NgZone } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Observable } from 'rxjs/Observable';\nimport { Overlay } from '../overlay/overlay';\nimport { ToastRef } from './toast-injector';\nimport { ToastToken } from './toast-token';\nimport { ToastContainerDirective } from './toast.directive';\nimport { GlobalConfig, IndividualConfig } from './toastr-config';\nexport interface ActiveToast {\n    /** Your Toast ID. Use this to close it individually */\n    toastId: number;\n    /** the message of your toast. Stored to prevent duplicates */\n    message: string;\n    /** a reference to the component see portal.ts */\n    portal: ComponentRef<any>;\n    /** a reference to your toast */\n    toastRef: ToastRef<any>;\n    /** triggered when toast is active */\n    onShown: Observable<any>;\n    /** triggered when toast is destroyed */\n    onHidden: Observable<any>;\n    /** triggered on toast click */\n    onTap: Observable<any>;\n    /** available for your use in custom toast */\n    onAction: Observable<any>;\n}\nexport declare class ToastrService {\n    private overlay;\n    private _injector;\n    private sanitizer;\n    private ngZone;\n    toastrConfig: GlobalConfig;\n    currentlyActive: number;\n    toasts: ActiveToast[];\n    overlayContainer: ToastContainerDirective;\n    previousToastMessage: string | undefined;\n    private index;\n    constructor(token: ToastToken, overlay: Overlay, _injector: Injector, sanitizer: DomSanitizer, ngZone: NgZone);\n    /** show toast */\n    show(message?: string, title?: string, override?: Partial<IndividualConfig>, type?: string): ActiveToast | null;\n    /** show successful toast */\n    success(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast | null;\n    /** show error toast */\n    error(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast | null;\n    /** show info toast */\n    info(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast | null;\n    /** show warning toast */\n    warning(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast | null;\n    /**\n     * Remove all or a single toast by id\n     */\n    clear(toastId?: number): void;\n    /**\n     * Remove and destroy a single toast by id\n     */\n    remove(toastId: number): boolean;\n    /**\n     * Determines if toast message is already shown\n     */\n    isDuplicate(message: string): boolean;\n    /** create a clone of global config and apply individual settings */\n    private applyConfig(override?);\n    /**\n     * Find toast object by id\n     */\n    private _findToast(toastId);\n    /**\n     * Determines the need to run inside angular's zone then builds the toast\n     */\n    private _preBuildNotification(toastType, message, title, config);\n    /**\n     * Creates and attaches toast data to component\n     * returns null if toast is duplicate and preventDuplicates == True\n     */\n    private _buildNotification(toastType, message, title, config);\n}\n"]}