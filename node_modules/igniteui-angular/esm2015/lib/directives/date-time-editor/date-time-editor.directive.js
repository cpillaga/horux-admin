/* eslint-disable @angular-eslint/no-conflicting-lifecycle */
import { Directive, Input, ElementRef, Renderer2, NgModule, Output, EventEmitter, Inject, LOCALE_ID } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, } from '@angular/forms';
import { DOCUMENT } from '@angular/common';
import { IgxMaskDirective } from '../mask/mask.directive';
import { MaskParsingService } from '../mask/mask-parsing.service';
import { DatePickerUtil } from '../../date-picker/date-picker.utils';
import { DatePart } from './date-time-editor.common';
import { noop } from 'rxjs';
/**
 * Date Time Editor provides a functionality to input, edit and format date and time.
 *
 * @igxModule IgxDateTimeEditorModule
 *
 * @igxParent IgxInputGroup
 *
 * @igxTheme igx-input-theme
 *
 * @igxKeywords date, time, editor
 *
 * @igxGroup Scheduling
 *
 * @remarks
 *
 * The Ignite UI Date Time Editor Directive makes it easy for developers to manipulate date/time user input.
 * It requires input in a specified or default input format which is visible in the input element as a placeholder.
 * It allows the input of only date (ex: 'dd/MM/yyyy'), only time (ex:'HH:mm tt') or both at once, if needed.
 * Supports display format that may differ from the input format.
 * Provides methods to increment and decrement any specific/targeted `DatePart`.
 *
 * @example
 * ```html
 * <igx-input-group>
 *   <input type="text" igxInput [igxDateTimeEditor]="'dd/MM/yyyy'" [displayFormat]="'shortDate'" [(ngModel)]="date"/>
 * </igx-input-group>
 * ```
 */
export class IgxDateTimeEditorDirective extends IgxMaskDirective {
    constructor(renderer, elementRef, maskParser, _document, _locale) {
        super(elementRef, maskParser, renderer);
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.maskParser = maskParser;
        this._document = _document;
        this._locale = _locale;
        /**
         * Specify if the currently spun date segment should loop over.
         *
         * @example
         * ```html
         * <input igxDateTimeEditor [isSpinLoop]="false">
         * ```
         */
        this.isSpinLoop = true;
        /**
         * Emitted when the editor's value has changed.
         *
         * @example
         * ```html
         * <input igxDateTimeEditor (valueChange)="onValueChanged($event)"/>
         * ```
         */
        this.valueChange = new EventEmitter();
        /**
         * Emitted when the editor is not within a specified range or when the editor's value is in an invalid state.
         *
         * @example
         * ```html
         * <input igxDateTimeEditor [minValue]="minDate" [maxValue]="maxDate" (validationFailed)="onValidationFailed($event)"/>
         * ```
         */
        this.validationFailed = new EventEmitter();
        this.onTouchCallback = noop;
        this.onChangeCallback = noop;
        this.onValidatorChange = noop;
        this.document = this._document;
        this.locale = this.locale || this._locale;
    }
    /**
     * Minimum value required for the editor to remain valid.
     *
     * @remarks
     * If a `string` value is passed, it must be in the defined input format.
     *
     * @example
     * ```html
     * <input igxDateTimeEditor [minValue]="minDate">
     * ```
     */
    get minValue() {
        return this._minValue;
    }
    set minValue(value) {
        this._minValue = value;
        this.onValidatorChange();
    }
    /**
     * Maximum value required for the editor to remain valid.
     *
     * @remarks
     * If a `string` value is passed in, it must be in the defined input format.
     *
     * @example
     * ```html
     * <input igxDateTimeEditor [maxValue]="maxDate">
     * ```
     */
    get maxValue() {
        return this._maxValue;
    }
    set maxValue(value) {
        this._maxValue = value;
        this.onValidatorChange();
    }
    /**
     * Expected user input format (and placeholder).
     *
     * @example
     * ```html
     * <input [igxDateTimeEditor]="'dd/MM/yyyy'">
     * ```
     */
    set inputFormat(value) {
        if (value) {
            this._format = value;
        }
        const mask = (this.inputFormat || DatePickerUtil.DEFAULT_INPUT_FORMAT)
            .replace(new RegExp(/(?=[^t])[\w]/, 'g'), '0');
        this.mask = mask.indexOf('tt') !== -1 ? mask.replace(new RegExp('tt', 'g'), 'LL') : mask;
    }
    get inputFormat() {
        return this._format;
    }
    /**
     * Editor value.
     *
     * @example
     * ```html
     * <input igxDateTimeEditor [value]="date">
     * ```
     */
    set value(value) {
        this._value = value;
        this.onChangeCallback(value);
        this.updateMask();
    }
    get value() {
        return this._value;
    }
    get emptyMask() {
        return this.maskParser.applyMask(null, this.maskOptions);
    }
    get targetDatePart() {
        var _a, _b, _c;
        // V.K. May 16th, 2022 #11559 Get correct date part in shadow DOM
        if (this.document.activeElement === this.nativeElement ||
            ((_b = (_a = this.document.activeElement) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.activeElement) === this.nativeElement) {
            return (_c = this._inputDateParts
                .find(p => p.start <= this.selectionStart && this.selectionStart <= p.end && p.type !== DatePart.Literal)) === null || _c === void 0 ? void 0 : _c.type;
        }
        else {
            if (this._inputDateParts.some(p => p.type === DatePart.Date)) {
                return DatePart.Date;
            }
            else if (this._inputDateParts.some(p => p.type === DatePart.Hours)) {
                return DatePart.Hours;
            }
        }
    }
    get hasDateParts() {
        return this._inputDateParts.some(p => p.type === DatePart.Date
            || p.type === DatePart.Month
            || p.type === DatePart.Year);
    }
    get hasTimeParts() {
        return this._inputDateParts.some(p => p.type === DatePart.Hours
            || p.type === DatePart.Minutes
            || p.type === DatePart.Seconds);
    }
    /** @hidden @internal */
    ngOnChanges(changes) {
        if (changes['inputFormat'] || changes['locale']) {
            this.updateInputFormat();
        }
    }
    /** @hidden @internal */
    ngDoCheck() {
        if (this._inputFormat !== this.inputFormat) {
            this.updateInputFormat();
        }
    }
    /** Clear the input element value. */
    clear() {
        this.updateValue(null);
    }
    /**
     * Increment specified DatePart.
     *
     * @param datePart The optional DatePart to increment. Defaults to Date or Hours(when Date is absent from the inputFormat - ex:'HH:mm').
     */
    increment(datePart) {
        const targetDatePart = this.targetDatePart;
        if (!targetDatePart) {
            return;
        }
        const newValue = datePart
            ? this.spinValue(datePart, 1)
            : this.spinValue(targetDatePart, 1);
        this.updateValue(newValue ? newValue : new Date());
    }
    /**
     * Decrement specified DatePart.
     *
     * @param datePart The optional DatePart to decrement. Defaults to Date or Hours(when Date is absent from the inputFormat - ex:'HH:mm').
     */
    decrement(datePart) {
        const targetDatePart = this.targetDatePart;
        if (!targetDatePart) {
            return;
        }
        const newValue = datePart
            ? this.spinValue(datePart, -1)
            : this.spinValue(targetDatePart, -1);
        this.updateValue(newValue ? newValue : new Date());
    }
    /** @hidden @internal */
    writeValue(value) {
        this._value = value;
        this.updateMask();
    }
    /** @hidden @internal */
    validate(control) {
        if (!this.inputIsComplete() || !control.value) {
            return { value: true };
        }
        const maxValueAsDate = this.isDate(this.maxValue) ? this.maxValue : this.parseDate(this.maxValue);
        const minValueAsDate = this.isDate(this.minValue) ? this.minValue : this.parseDate(this.minValue);
        if (minValueAsDate
            && DatePickerUtil.lessThanMinValue(control.value, minValueAsDate, this.hasTimeParts, this.hasDateParts)) {
            return { minValue: true };
        }
        if (maxValueAsDate
            && DatePickerUtil.greaterThanMaxValue(control.value, maxValueAsDate, this.hasTimeParts, this.hasDateParts)) {
            return { maxValue: true };
        }
        return null;
    }
    /** @hidden @internal */
    registerOnValidatorChange(fn) {
        this.onValidatorChange = fn;
    }
    /** @hidden @internal */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /** @hidden @internal */
    registerOnTouched(fn) {
        this.onTouchCallback = fn;
    }
    /** @hidden @internal */
    setDisabledState(isDisabled) { }
    /** @hidden @internal */
    onInputChanged() {
        var _a;
        super.onInputChanged();
        if (this.inputIsComplete()) {
            const parsedDate = this.parseDate(this.inputValue);
            if (this.isValidDate(parsedDate)) {
                this.updateValue(parsedDate);
            }
            else {
                const oldValue = this.value && new Date(this.value.getTime());
                const args = { oldValue, newValue: parsedDate, userInput: this.inputValue };
                this.validationFailed.emit(args);
                if (((_a = args.newValue) === null || _a === void 0 ? void 0 : _a.getTime) && args.newValue.getTime() !== oldValue.getTime()) {
                    this.updateValue(args.newValue);
                }
                else {
                    this.updateValue(null);
                }
            }
        }
        else {
            this.updateValue(null);
        }
    }
    /** @hidden @internal */
    onKeyDown(event) {
        super.onKeyDown(event);
        if (event.altKey) {
            return;
        }
        if (event.key === "ArrowUp" /* UP_ARROW */ || event.key === "Up" /* UP_ARROW_IE */ ||
            event.key === "ArrowDown" /* DOWN_ARROW */ || event.key === "Down" /* DOWN_ARROW_IE */) {
            this.spin(event);
            return;
        }
        if (event.ctrlKey && event.key === ";" /* SEMICOLON */) {
            this.updateValue(new Date());
        }
        this.moveCursor(event);
    }
    /** @hidden @internal */
    onFocus() {
        this._isFocused = true;
        this.onTouchCallback();
        this.updateMask();
        super.onFocus();
    }
    /** @hidden @internal */
    onBlur(value) {
        this._isFocused = false;
        if (!this.inputIsComplete() && this.inputValue !== this.emptyMask) {
            this.updateValue(this.parseDate(this.inputValue));
        }
        else {
            this.updateMask();
        }
        super.onBlur(value);
    }
    /** @hidden @internal */
    updateMask() {
        if (this._isFocused) {
            if (!this.value) {
                return;
            }
            // store the cursor position as it will be moved during masking
            const cursor = this.selectionEnd;
            this.inputValue = this.getMaskedValue();
            this.setSelectionRange(cursor);
        }
        else {
            if (!this.value || !this.isValidDate(this.value)) {
                this.inputValue = '';
                return;
            }
            const format = this.displayFormat || this.inputFormat;
            if (format) {
                this.inputValue = DatePickerUtil.formatDate(this.value, format.replace('tt', 'aa'), this.locale);
            }
            else {
                // TODO: formatter function?
                this.inputValue = this.value.toLocaleString();
            }
        }
    }
    // TODO: move parseDate to utils
    parseDate(val) {
        if (!val) {
            return null;
        }
        return DatePickerUtil.parseValueFromMask(val, this._inputDateParts, this.promptChar);
    }
    getMaskedValue() {
        let mask = this.emptyMask;
        for (const part of this._inputDateParts) {
            if (part.type === DatePart.Literal) {
                continue;
            }
            const targetValue = this.getPartValue(part, part.format.length);
            mask = this.maskParser.replaceInMask(mask, targetValue, this.maskOptions, part.start, part.end).value;
        }
        return mask;
    }
    updateInputFormat() {
        const defPlaceholder = this.inputFormat || DatePickerUtil.getDefaultInputFormat(this.locale);
        this._inputDateParts = DatePickerUtil.parseDateTimeFormat(this.inputFormat);
        this.inputFormat = this._inputDateParts.map(p => p.format).join('');
        if (!this.nativeElement.placeholder || this._inputFormat !== this.inputFormat) {
            this.renderer.setAttribute(this.nativeElement, 'placeholder', defPlaceholder);
        }
        // TODO: fill in partial dates?
        this.updateMask();
        this._inputFormat = this.inputFormat;
    }
    // TODO: move isDate to utils
    isDate(value) {
        return value instanceof Date && typeof value === 'object';
    }
    valueInRange(value) {
        if (!value) {
            return false;
        }
        const maxValueAsDate = this.isDate(this.maxValue) ? this.maxValue : this.parseDate(this.maxValue);
        const minValueAsDate = this.isDate(this.minValue) ? this.minValue : this.parseDate(this.minValue);
        if (minValueAsDate
            && DatePickerUtil.lessThanMinValue(value, minValueAsDate, this.hasTimeParts, this.hasDateParts)) {
            return false;
        }
        if (maxValueAsDate
            && DatePickerUtil.greaterThanMaxValue(value, maxValueAsDate, this.hasTimeParts, this.hasDateParts)) {
            return false;
        }
        return true;
    }
    spinValue(datePart, delta) {
        if (!this.value || !this.isValidDate(this.value)) {
            return null;
        }
        const newDate = new Date(this.value.getTime());
        switch (datePart) {
            case DatePart.Date:
                DatePickerUtil.spinDate(delta, newDate, this.isSpinLoop);
                break;
            case DatePart.Month:
                DatePickerUtil.spinMonth(delta, newDate, this.isSpinLoop);
                break;
            case DatePart.Year:
                DatePickerUtil.spinYear(delta, newDate);
                break;
            case DatePart.Hours:
                DatePickerUtil.spinHours(delta, newDate, this.isSpinLoop);
                break;
            case DatePart.Minutes:
                DatePickerUtil.spinMinutes(delta, newDate, this.isSpinLoop);
                break;
            case DatePart.Seconds:
                DatePickerUtil.spinSeconds(delta, newDate, this.isSpinLoop);
                break;
            case DatePart.AmPm:
                const formatPart = this._inputDateParts.find(dp => dp.type === DatePart.AmPm);
                const amPmFromMask = this.inputValue.substring(formatPart.start, formatPart.end);
                return DatePickerUtil.spinAmPm(newDate, this.value, amPmFromMask);
        }
        return newDate;
    }
    updateValue(newDate) {
        this._oldValue = this.value;
        this.value = newDate;
        if (this.value && !this.valueInRange(this.value)) {
            this.validationFailed.emit({ oldValue: this._oldValue, newValue: this.value, userInput: this.inputValue });
        }
        if (this.inputIsComplete() || this.inputValue === this.emptyMask) {
            this.valueChange.emit(this.value);
        }
    }
    toTwelveHourFormat(value) {
        let hour = parseInt(value.replace(new RegExp(this.promptChar, 'g'), '0'), 10);
        if (hour > 12) {
            hour -= 12;
        }
        else if (hour === 0) {
            hour = 12;
        }
        return hour;
    }
    getPartValue(datePartInfo, partLength) {
        let maskedValue;
        const datePart = datePartInfo.type;
        switch (datePart) {
            case DatePart.Date:
                maskedValue = this.value.getDate();
                break;
            case DatePart.Month:
                // months are zero based
                maskedValue = this.value.getMonth() + 1;
                break;
            case DatePart.Year:
                if (partLength === 2) {
                    maskedValue = this.prependValue(parseInt(this.value.getFullYear().toString().slice(-2), 10), partLength, '0');
                }
                else {
                    maskedValue = this.value.getFullYear();
                }
                break;
            case DatePart.Hours:
                if (datePartInfo.format.indexOf('h') !== -1) {
                    maskedValue = this.prependValue(this.toTwelveHourFormat(this.value.getHours().toString()), partLength, '0');
                }
                else {
                    maskedValue = this.value.getHours();
                }
                break;
            case DatePart.Minutes:
                maskedValue = this.value.getMinutes();
                break;
            case DatePart.Seconds:
                maskedValue = this.value.getSeconds();
                break;
            case DatePart.AmPm:
                maskedValue = this.value.getHours() >= 12 ? 'PM' : 'AM';
                break;
        }
        if (datePartInfo.type !== DatePart.AmPm) {
            return this.prependValue(maskedValue, partLength, '0');
        }
        return maskedValue;
    }
    prependValue(value, partLength, prependChar) {
        return (prependChar + value.toString()).slice(-partLength);
    }
    spin(event) {
        event.preventDefault();
        switch (event.key) {
            case "ArrowUp" /* UP_ARROW */:
            case "Up" /* UP_ARROW_IE */:
                this.increment();
                break;
            case "ArrowDown" /* DOWN_ARROW */:
            case "Down" /* DOWN_ARROW_IE */:
                this.decrement();
                break;
        }
    }
    inputIsComplete() {
        return this.inputValue.indexOf(this.promptChar) === -1;
    }
    isValidDate(date) {
        return date && date.getTime && !isNaN(date.getTime());
    }
    moveCursor(event) {
        const value = event.target.value;
        switch (event.key) {
            case "ArrowLeft" /* LEFT_ARROW */:
            case "Left" /* LEFT_ARROW_IE */:
                if (event.ctrlKey) {
                    event.preventDefault();
                    this.setSelectionRange(this.getNewPosition(value));
                }
                break;
            case "ArrowRight" /* RIGHT_ARROW */:
            case "Right" /* RIGHT_ARROW_IE */:
                if (event.ctrlKey) {
                    event.preventDefault();
                    this.setSelectionRange(this.getNewPosition(value, 1));
                }
                break;
        }
    }
    /**
     * Move the cursor in a specific direction until it reaches a date/time separator.
     * Then return its index.
     *
     * @param value The string it operates on.
     * @param direction 0 is left, 1 is right. Default is 0.
     */
    getNewPosition(value, direction = 0) {
        const literals = this._inputDateParts.filter(p => p.type === DatePart.Literal);
        let cursorPos = this.selectionStart;
        if (!direction) {
            do {
                cursorPos = cursorPos > 0 ? --cursorPos : cursorPos;
            } while (!literals.some(l => l.end === cursorPos) && cursorPos > 0);
            return cursorPos;
        }
        else {
            do {
                cursorPos++;
            } while (!literals.some(l => l.start === cursorPos) && cursorPos < value.length);
            return cursorPos;
        }
    }
}
IgxDateTimeEditorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxDateTimeEditor]',
                exportAs: 'igxDateTimeEditor',
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: IgxDateTimeEditorDirective, multi: true },
                    { provide: NG_VALIDATORS, useExisting: IgxDateTimeEditorDirective, multi: true }
                ]
            },] }
];
IgxDateTimeEditorDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: MaskParsingService },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
IgxDateTimeEditorDirective.propDecorators = {
    locale: [{ type: Input }],
    minValue: [{ type: Input }],
    maxValue: [{ type: Input }],
    isSpinLoop: [{ type: Input }],
    displayFormat: [{ type: Input }],
    inputFormat: [{ type: Input, args: [`igxDateTimeEditor`,] }],
    value: [{ type: Input }],
    valueChange: [{ type: Output }],
    validationFailed: [{ type: Output }]
};
export class IgxDateTimeEditorModule {
}
IgxDateTimeEditorModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxDateTimeEditorDirective],
                exports: [IgxDateTimeEditorDirective]
            },] }
];
//# sourceMappingURL=data:application/json;base64,