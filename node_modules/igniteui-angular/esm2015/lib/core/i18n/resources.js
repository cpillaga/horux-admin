import { DateRangePickerResourceStringsEN } from './date-range-picker-resources';
import { GridResourceStringsEN } from './grid-resources';
import { TimePickerResourceStringsEN } from './time-picker-resources';
import { PaginatorResourceStringsEN } from './paginator-resources';
import { cloneValue } from '../utils';
import { CarouselResourceStringsEN } from './carousel-resources';
import { ListResourceStringsEN } from './list-resources';
import { CalendarResourceStringsEN } from './calendar-resources';
import { InputResourceStringsEN } from './input-resources';
/**
 * @hidden
 * IF YOU EDIT THIS OBJECT, DO NOT FORGET TO UPDATE
 * projects/igniteui-angular-i18n as well (create the appropriately named files,
 * containing the new/updated component string keys and EN strings for values + create a separate issue + pending-localization label)
 *
 * TODO Add automation tests:
 * 1) each of the folders/languages under \projects\igniteui-angular-i18n\src\ contain resources.ts file with matching components count.
 *    \projects\igniteui-angular-i18n\src\BG\resources.ts contains IgxResourceStringsBG.count matching this.CurrentResourceStrings.count
 * 2) \igniteui-angular\projects\igniteui-angular\src\public_api.ts --> Check if the new interface is added
 *    to IInputResourceStrings (just a proxy as it is later on imported in the angular-i18n package)
 */
export const CurrentResourceStrings = {
    GridResStrings: cloneValue(GridResourceStringsEN),
    PaginatorResStrings: cloneValue(PaginatorResourceStringsEN),
    TimePickerResStrings: cloneValue(TimePickerResourceStringsEN),
    CalendarResStrings: cloneValue(CalendarResourceStringsEN),
    DateRangePickerResStrings: cloneValue(DateRangePickerResourceStringsEN),
    CarouselResStrings: cloneValue(CarouselResourceStringsEN),
    ListResStrings: cloneValue(ListResourceStringsEN),
    InputResStrings: cloneValue(InputResourceStringsEN),
};
const updateResourceStrings = (currentStrings, newStrings) => {
    for (const key of Object.keys(newStrings)) {
        if (key in currentStrings) {
            currentStrings[key] = newStrings[key];
        }
    }
};
const ɵ0 = updateResourceStrings;
/**
 * Changes the resource strings for all components in the application
 * ```
 * @param resourceStrings to be applied
 */
export const changei18n = (resourceStrings) => {
    for (const key of Object.keys(CurrentResourceStrings)) {
        updateResourceStrings(CurrentResourceStrings[key], resourceStrings);
    }
};
/**
 * Returns current resource strings for all components
 */
export const getCurrentResourceStrings = () => (Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, CurrentResourceStrings.CalendarResStrings), CurrentResourceStrings.CarouselResStrings), CurrentResourceStrings.DateRangePickerResStrings), CurrentResourceStrings.GridResStrings), CurrentResourceStrings.InputResStrings), CurrentResourceStrings.ListResStrings), CurrentResourceStrings.PaginatorResStrings), CurrentResourceStrings.TimePickerResStrings));
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2NvcmUvaTE4bi9yZXNvdXJjZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdDQUFnQyxFQUFtQyxNQUFNLCtCQUErQixDQUFDO0FBQ2xILE9BQU8sRUFBd0IscUJBQXFCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMvRSxPQUFPLEVBQThCLDJCQUEyQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDbEcsT0FBTyxFQUE2QiwwQkFBMEIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEMsT0FBTyxFQUE0Qix5QkFBeUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzNGLE9BQU8sRUFBd0IscUJBQXFCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMvRSxPQUFPLEVBQUUseUJBQXlCLEVBQTRCLE1BQU0sc0JBQXNCLENBQUM7QUFDM0YsT0FBTyxFQUF5QixzQkFBc0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBS2xGOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUc7SUFDbEMsY0FBYyxFQUFFLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQztJQUNqRCxtQkFBbUIsRUFBRSxVQUFVLENBQUMsMEJBQTBCLENBQUM7SUFDM0Qsb0JBQW9CLEVBQUUsVUFBVSxDQUFDLDJCQUEyQixDQUFDO0lBQzdELGtCQUFrQixFQUFFLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQztJQUN6RCx5QkFBeUIsRUFBRSxVQUFVLENBQUMsZ0NBQWdDLENBQUM7SUFDdkUsa0JBQWtCLEVBQUUsVUFBVSxDQUFDLHlCQUF5QixDQUFDO0lBQ3pELGNBQWMsRUFBRSxVQUFVLENBQUMscUJBQXFCLENBQUM7SUFDakQsZUFBZSxFQUFFLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQztDQUN0RCxDQUFDO0FBRUYsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLGNBQWdDLEVBQUUsVUFBNEIsRUFBRSxFQUFFO0lBQzdGLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUN2QyxJQUFJLEdBQUcsSUFBSSxjQUFjLEVBQUU7WUFDdkIsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN6QztLQUNKO0FBQ0wsQ0FBQyxDQUFDOztBQUVGOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxlQUFpQyxFQUFFLEVBQUU7SUFDNUQsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEVBQUU7UUFDbkQscUJBQXFCLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7S0FDdkU7QUFDTCxDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLEdBQXFCLEVBQUUsQ0FBQyxxSEFDMUQsc0JBQXNCLENBQUMsa0JBQWtCLEdBQ3pDLHNCQUFzQixDQUFDLGtCQUFrQixHQUN6QyxzQkFBc0IsQ0FBQyx5QkFBeUIsR0FDaEQsc0JBQXNCLENBQUMsY0FBYyxHQUNyQyxzQkFBc0IsQ0FBQyxlQUFlLEdBQ3RDLHNCQUFzQixDQUFDLGNBQWMsR0FDckMsc0JBQXNCLENBQUMsbUJBQW1CLEdBQzFDLHNCQUFzQixDQUFDLG9CQUFvQixFQUNoRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0ZVJhbmdlUGlja2VyUmVzb3VyY2VTdHJpbmdzRU4sIElEYXRlUmFuZ2VQaWNrZXJSZXNvdXJjZVN0cmluZ3MgfSBmcm9tICcuL2RhdGUtcmFuZ2UtcGlja2VyLXJlc291cmNlcyc7XG5pbXBvcnQgeyBJR3JpZFJlc291cmNlU3RyaW5ncywgR3JpZFJlc291cmNlU3RyaW5nc0VOIH0gZnJvbSAnLi9ncmlkLXJlc291cmNlcyc7XG5pbXBvcnQgeyBJVGltZVBpY2tlclJlc291cmNlU3RyaW5ncywgVGltZVBpY2tlclJlc291cmNlU3RyaW5nc0VOIH0gZnJvbSAnLi90aW1lLXBpY2tlci1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgSVBhZ2luYXRvclJlc291cmNlU3RyaW5ncywgUGFnaW5hdG9yUmVzb3VyY2VTdHJpbmdzRU4gfSBmcm9tICcuL3BhZ2luYXRvci1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgY2xvbmVWYWx1ZSB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IElDYXJvdXNlbFJlc291cmNlU3RyaW5ncywgQ2Fyb3VzZWxSZXNvdXJjZVN0cmluZ3NFTiB9IGZyb20gJy4vY2Fyb3VzZWwtcmVzb3VyY2VzJztcbmltcG9ydCB7IElMaXN0UmVzb3VyY2VTdHJpbmdzLCBMaXN0UmVzb3VyY2VTdHJpbmdzRU4gfSBmcm9tICcuL2xpc3QtcmVzb3VyY2VzJztcbmltcG9ydCB7IENhbGVuZGFyUmVzb3VyY2VTdHJpbmdzRU4sIElDYWxlbmRhclJlc291cmNlU3RyaW5ncyB9IGZyb20gJy4vY2FsZW5kYXItcmVzb3VyY2VzJztcbmltcG9ydCB7IElJbnB1dFJlc291cmNlU3RyaW5ncywgSW5wdXRSZXNvdXJjZVN0cmluZ3NFTiB9IGZyb20gJy4vaW5wdXQtcmVzb3VyY2VzJztcblxuZXhwb3J0IGludGVyZmFjZSBJUmVzb3VyY2VTdHJpbmdzIGV4dGVuZHMgSUdyaWRSZXNvdXJjZVN0cmluZ3MsIElUaW1lUGlja2VyUmVzb3VyY2VTdHJpbmdzLCBJQ2FsZW5kYXJSZXNvdXJjZVN0cmluZ3MsXG4gICAgSUNhcm91c2VsUmVzb3VyY2VTdHJpbmdzLCBJSW5wdXRSZXNvdXJjZVN0cmluZ3MsIElEYXRlUmFuZ2VQaWNrZXJSZXNvdXJjZVN0cmluZ3MsIElMaXN0UmVzb3VyY2VTdHJpbmdzLCBJUGFnaW5hdG9yUmVzb3VyY2VTdHJpbmdzIHsgfVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqIElGIFlPVSBFRElUIFRISVMgT0JKRUNULCBETyBOT1QgRk9SR0VUIFRPIFVQREFURVxuICogcHJvamVjdHMvaWduaXRldWktYW5ndWxhci1pMThuIGFzIHdlbGwgKGNyZWF0ZSB0aGUgYXBwcm9wcmlhdGVseSBuYW1lZCBmaWxlcyxcbiAqIGNvbnRhaW5pbmcgdGhlIG5ldy91cGRhdGVkIGNvbXBvbmVudCBzdHJpbmcga2V5cyBhbmQgRU4gc3RyaW5ncyBmb3IgdmFsdWVzICsgY3JlYXRlIGEgc2VwYXJhdGUgaXNzdWUgKyBwZW5kaW5nLWxvY2FsaXphdGlvbiBsYWJlbClcbiAqXG4gKiBUT0RPIEFkZCBhdXRvbWF0aW9uIHRlc3RzOlxuICogMSkgZWFjaCBvZiB0aGUgZm9sZGVycy9sYW5ndWFnZXMgdW5kZXIgXFxwcm9qZWN0c1xcaWduaXRldWktYW5ndWxhci1pMThuXFxzcmNcXCBjb250YWluIHJlc291cmNlcy50cyBmaWxlIHdpdGggbWF0Y2hpbmcgY29tcG9uZW50cyBjb3VudC5cbiAqICAgIFxccHJvamVjdHNcXGlnbml0ZXVpLWFuZ3VsYXItaTE4blxcc3JjXFxCR1xccmVzb3VyY2VzLnRzIGNvbnRhaW5zIElneFJlc291cmNlU3RyaW5nc0JHLmNvdW50IG1hdGNoaW5nIHRoaXMuQ3VycmVudFJlc291cmNlU3RyaW5ncy5jb3VudFxuICogMikgXFxpZ25pdGV1aS1hbmd1bGFyXFxwcm9qZWN0c1xcaWduaXRldWktYW5ndWxhclxcc3JjXFxwdWJsaWNfYXBpLnRzIC0tPiBDaGVjayBpZiB0aGUgbmV3IGludGVyZmFjZSBpcyBhZGRlZFxuICogICAgdG8gSUlucHV0UmVzb3VyY2VTdHJpbmdzIChqdXN0IGEgcHJveHkgYXMgaXQgaXMgbGF0ZXIgb24gaW1wb3J0ZWQgaW4gdGhlIGFuZ3VsYXItaTE4biBwYWNrYWdlKVxuICovXG5leHBvcnQgY29uc3QgQ3VycmVudFJlc291cmNlU3RyaW5ncyA9IHtcbiAgICBHcmlkUmVzU3RyaW5nczogY2xvbmVWYWx1ZShHcmlkUmVzb3VyY2VTdHJpbmdzRU4pLFxuICAgIFBhZ2luYXRvclJlc1N0cmluZ3M6IGNsb25lVmFsdWUoUGFnaW5hdG9yUmVzb3VyY2VTdHJpbmdzRU4pLFxuICAgIFRpbWVQaWNrZXJSZXNTdHJpbmdzOiBjbG9uZVZhbHVlKFRpbWVQaWNrZXJSZXNvdXJjZVN0cmluZ3NFTiksXG4gICAgQ2FsZW5kYXJSZXNTdHJpbmdzOiBjbG9uZVZhbHVlKENhbGVuZGFyUmVzb3VyY2VTdHJpbmdzRU4pLFxuICAgIERhdGVSYW5nZVBpY2tlclJlc1N0cmluZ3M6IGNsb25lVmFsdWUoRGF0ZVJhbmdlUGlja2VyUmVzb3VyY2VTdHJpbmdzRU4pLFxuICAgIENhcm91c2VsUmVzU3RyaW5nczogY2xvbmVWYWx1ZShDYXJvdXNlbFJlc291cmNlU3RyaW5nc0VOKSxcbiAgICBMaXN0UmVzU3RyaW5nczogY2xvbmVWYWx1ZShMaXN0UmVzb3VyY2VTdHJpbmdzRU4pLFxuICAgIElucHV0UmVzU3RyaW5nczogY2xvbmVWYWx1ZShJbnB1dFJlc291cmNlU3RyaW5nc0VOKSxcbn07XG5cbmNvbnN0IHVwZGF0ZVJlc291cmNlU3RyaW5ncyA9IChjdXJyZW50U3RyaW5nczogSVJlc291cmNlU3RyaW5ncywgbmV3U3RyaW5nczogSVJlc291cmNlU3RyaW5ncykgPT4ge1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKG5ld1N0cmluZ3MpKSB7XG4gICAgICAgIGlmIChrZXkgaW4gY3VycmVudFN0cmluZ3MpIHtcbiAgICAgICAgICAgIGN1cnJlbnRTdHJpbmdzW2tleV0gPSBuZXdTdHJpbmdzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vKipcbiAqIENoYW5nZXMgdGhlIHJlc291cmNlIHN0cmluZ3MgZm9yIGFsbCBjb21wb25lbnRzIGluIHRoZSBhcHBsaWNhdGlvblxuICogYGBgXG4gKiBAcGFyYW0gcmVzb3VyY2VTdHJpbmdzIHRvIGJlIGFwcGxpZWRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoYW5nZWkxOG4gPSAocmVzb3VyY2VTdHJpbmdzOiBJUmVzb3VyY2VTdHJpbmdzKSA9PiB7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoQ3VycmVudFJlc291cmNlU3RyaW5ncykpIHtcbiAgICAgICAgdXBkYXRlUmVzb3VyY2VTdHJpbmdzKEN1cnJlbnRSZXNvdXJjZVN0cmluZ3Nba2V5XSwgcmVzb3VyY2VTdHJpbmdzKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgY3VycmVudCByZXNvdXJjZSBzdHJpbmdzIGZvciBhbGwgY29tcG9uZW50c1xuICovXG5leHBvcnQgY29uc3QgZ2V0Q3VycmVudFJlc291cmNlU3RyaW5ncyA9ICgpOiBJUmVzb3VyY2VTdHJpbmdzID0+ICh7XG4gICAgLi4uQ3VycmVudFJlc291cmNlU3RyaW5ncy5DYWxlbmRhclJlc1N0cmluZ3MsXG4gICAgLi4uQ3VycmVudFJlc291cmNlU3RyaW5ncy5DYXJvdXNlbFJlc1N0cmluZ3MsXG4gICAgLi4uQ3VycmVudFJlc291cmNlU3RyaW5ncy5EYXRlUmFuZ2VQaWNrZXJSZXNTdHJpbmdzLFxuICAgIC4uLkN1cnJlbnRSZXNvdXJjZVN0cmluZ3MuR3JpZFJlc1N0cmluZ3MsXG4gICAgLi4uQ3VycmVudFJlc291cmNlU3RyaW5ncy5JbnB1dFJlc1N0cmluZ3MsXG4gICAgLi4uQ3VycmVudFJlc291cmNlU3RyaW5ncy5MaXN0UmVzU3RyaW5ncyxcbiAgICAuLi5DdXJyZW50UmVzb3VyY2VTdHJpbmdzLlBhZ2luYXRvclJlc1N0cmluZ3MsXG4gICAgLi4uQ3VycmVudFJlc291cmNlU3RyaW5ncy5UaW1lUGlja2VyUmVzU3RyaW5nc1xufSk7XG4iXX0=