import { __decorate } from "tslib";
import { CommonModule, formatDate } from '@angular/common';
import { Component, ContentChild, EventEmitter, HostBinding, Input, NgModule, Output, ViewChild, ElementRef, TemplateRef, Inject, ChangeDetectorRef, HostListener, NgModuleRef, Injector, ContentChildren, Renderer2 } from '@angular/core';
import { NG_VALUE_ACCESSOR, NgControl, NG_VALIDATORS } from '@angular/forms';
import { IgxCalendarHeaderTemplateDirective, IgxCalendarModule, IgxCalendarSubheaderTemplateDirective, WEEKDAYS, isDateInRanges } from '../calendar/public_api';
import { IgxIconModule } from '../icon/public_api';
import { IgxInputGroupModule, IgxInputDirective, IgxInputGroupComponent, IgxInputState, IgxLabelDirective } from '../input-group/public_api';
import { Subject, fromEvent, animationFrameScheduler, interval, noop } from 'rxjs';
import { filter, takeUntil, throttle } from 'rxjs/operators';
import { IgxTextSelectionModule } from '../directives/text-selection/text-selection.directive';
import { IgxOverlayService, AbsoluteScrollStrategy, AutoPositionStrategy } from '../services/public_api';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxMaskModule } from '../directives/mask/mask.directive';
import { DatePickerUtil } from './date-picker.utils';
import { DatePickerDisplayValuePipe, DatePickerInputValuePipe } from './date-picker.pipes';
import { isIE, isEqual, mkenum } from '../core/utils';
import { IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective } from './date-picker.directives';
import { IgxCalendarContainerComponent } from './calendar-container.component';
import { InteractionMode } from '../core/enums';
import { fadeIn, fadeOut } from '../animations/fade';
import { DeprecateProperty } from '../core/deprecateDecorators';
let NEXT_ID = 0;
/**
 * This enumeration is used to configure the date picker to operate with pre-defined format option used in Angular DatePipe.
 * 'https://angular.io/api/common/DatePipe'
 * 'shortDate': equivalent to 'M/d/yy' (6/15/15).
 * 'mediumDate': equivalent to 'MMM d, y' (Jun 15, 2015).
 * 'longDate': equivalent to 'MMMM d, y' (June 15, 2015).
 * 'fullDate': equivalent to 'EEEE, MMMM d, y' (Monday, June 15, 2015).
 */
export const PredefinedFormatOptions = mkenum({
    ShortDate: 'shortDate',
    MediumDate: 'mediumDate',
    LongDate: 'longDate',
    FullDate: 'fullDate'
});
/**
 * Date Picker displays a popup calendar that lets users select a single date.
 *
 * @igxModule IgxDatePickerModule
 * @igxTheme igx-calendar-theme, igx-icon-theme
 * @igxGroup Scheduling
 * @igxKeywords  datepicker, calendar, schedule, date
 * @example
 * ```html
 * <igx-date-picker [(ngModel)]="selectedDate"></igx-date-picker>
 * ```
 */
export class IgxDatePickerComponent {
    constructor(_overlayService, element, _cdr, _moduleRef, _injector, _renderer) {
        this._overlayService = _overlayService;
        this.element = element;
        this._cdr = _cdr;
        this._moduleRef = _moduleRef;
        this._injector = _injector;
        this._renderer = _renderer;
        /**
         * Gets/Sets the `IgxDatePickerComponent` label visibility.
         *
         * @remarks
         * By default the visibility is set to true.
         * @example
         * <igx-date-picker [labelVisibility]="false"></igx-date-picker>
         */
        this.labelVisibility = true;
        /**
         * Gets/Sets the locales.
         *
         * @remarks Default locale is en.
         * @example
         * ```html
         * <igx-date-picker locale="ja-JP" [value]="date"></igx-date-picker>
         * ```
         */
        this.locale = 'en';
        /**
         * Gets/Sets on which day the week starts.
         *
         * @example
         * ```html
         * <igx-date-picker [weekStart]="WEEKDAYS.FRIDAY" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         */
        this.weekStart = WEEKDAYS.SUNDAY;
        /**
         * Gets/Sets the number of month views displayed.
         *
         * @remarks
         * Default value is `1`.
         * @example
         * ```html
         * <igx-date-picker [monthsViewNumber]="2"></igx-date-picker>
         * ```
         * @example
         * ```typescript
         * let monthViewsDisplayed = this.datePicker.monthsViewNumber;
         * ```
         */
        this.monthsViewNumber = 1;
        /**
         * Gets/Sets the value of `id` attribute.
         *
         * @remarks If not provided it will be automatically generated.
         * @example
         * ```html
         * <igx-date-picker [id]="'igx-date-picker-3'" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         */
        this.id = `igx-date-picker-${NEXT_ID++}`;
        /**
         * Gets/Sets the orientation of the `IgxDatePickerComponent` header.
         *
         *  @example
         * ```html
         * <igx-date-picker [vertical]="'true'" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         */
        this.vertical = false;
        /**
         * Gets/Sets the interaction mode - dialog or drop down.
         *
         *  @example
         * ```html
         * <igx-date-picker mode="dropdown"></igx-date-picker>
         * ```
         */
        this.mode = InteractionMode.Dialog;
        /**
         * Gets/Sets whether date should spin continuously or stop when min/max is reached.
         *
         *  @example
         * ```html
         * <igx-date-picker [isSpinLoop]="false"></igx-date-picker>
         * ```
         */
        this.isSpinLoop = true;
        /**
         * Emitted when the `IgxDatePickerComponent` calendar is opened.
         */
        this.onOpened = new EventEmitter();
        /**
         * Emitted after the `IgxDatePickerComponent` is closed.
         */
        this.onClosed = new EventEmitter();
        /**
         * Emitted when the `IgxDatePickerComponent` is being closed.
         */
        this.onClosing = new EventEmitter();
        /**
         * Emitted when selection is made in the calendar.
         *
         *  @example
         * ```html
         * <igx-date-picker (onSelection)="selection($event)"></igx-date-picker>
         * ```
         */
        this.onSelection = new EventEmitter();
        /**
         * Emitted when date picker value is changed.
         *
         * @example
         * ```html
         * <igx-date-picker (valueChange)="valueChanged($event)" mode="dropdown"></igx-date-picker>
         * ```
         */
        this.valueChange = new EventEmitter();
        /**
         * Emitted when the user types/spins to a disabled date in the date-picker editor.
         *
         *  @example
         * ```html
         * <igx-date-picker (onDisabledDate)="onDisabledDate($event)"></igx-date-picker>
         * ```
         */
        this.onDisabledDate = new EventEmitter();
        /**
         * Emitted when the user types/spins invalid date in the date-picker editor.
         *
         *  @example
         * ```html
         * <igx-date-picker (onValidationFailed)="onValidationFailed($event)"></igx-date-picker>
         * ```
         */
        this.onValidationFailed = new EventEmitter();
        /** @hidden @internal */
        this.hasHeader = true;
        /** @hidden @internal */
        this.collapsed = true;
        /** @hidden @internal */
        this.displayValuePipe = new DatePickerDisplayValuePipe(this);
        /** @hidden @internal */
        this.inputValuePipe = new DatePickerInputValuePipe(this);
        /** @hidden @internal */
        this.dateFormatParts = [];
        /** @hidden @internal */
        this.isEmpty = true;
        /** @hidden @internal */
        this.invalidDate = '';
        this.spinDelta = 1;
        this.defaultLocale = 'en';
        this._formatOptions = {
            day: 'numeric',
            month: 'short',
            weekday: 'short',
            year: 'numeric'
        };
        this._formatViews = {
            day: false,
            month: true,
            year: false
        };
        this._destroy$ = new Subject();
        this._disabledDates = null;
        this._specialDates = null;
        this._onOpen = new EventEmitter();
        this._onClose = new EventEmitter();
        this._ngControl = null;
        this._label = 'Date';
        //#region ControlValueAccessor
        this._onChangeCallback = noop;
        this._onTouchedCallback = noop;
        this._onValidatorChange = noop;
    }
    /**
     * Gets/Sets the `IgxDatePickerComponent` label.
     *
     * @remarks
     * The default label is 'Date'.
     * @example
     * ```html
     * <igx-date-picker [label]="Calendar"></igx-date-picker>
     * ```
     * @deprecated Use igxLabel inside the date picker to change the label:
     * ````html
     * <igx-date-picker>
     *      <label igxLabel>Custom label</label>
     * </igx-date-picker>
     * ````
     * to set a custom label.
     */
    get label() {
        return this._label;
    }
    set label(v) {
        this._label = v;
    }
    get labelInternal() {
        return this._label;
    }
    /** @hidden @internal */
    get labelTemplate() {
        return this._labelDirectiveUserTemplate;
    }
    /**
     * Gets the format options of the `IgxDatePickerComponent`.
     *
     * @example
     * ```typescript
     * let formatOptions = this.datePicker.formatOptions;
     * ```
     */
    get formatOptions() {
        return this._formatOptions;
    }
    /**
     * Sets the format options of the `IgxDatePickerComponent`.
     *
     * @example
     * ```typescript
     * this.datePicker.formatOptions = {  day: "numeric",  month: "long", weekday: "long", year: "numeric"};
     * ```
     */
    set formatOptions(formatOptions) {
        this._formatOptions = Object.assign(this._formatOptions, formatOptions);
    }
    /**
     * Gets/Sets the date display format of the `IgxDatePickerComponent` in dropdown mode.
     *
     * @example
     * ```typescript
     * let format = this.datePicker.format;
     * this.datePicker.format = 'yyyy-M-d';
     * ```
     */
    get format() {
        return (this._format === undefined) ? PredefinedFormatOptions.ShortDate : this._format;
    }
    set format(format) {
        this._format = format;
    }
    /**
     * Gets/Sets the format views of the `IgxDatePickerComponent`.
     *
     * @example
     * ```typescript
     * let formatViews = this.datePicker.formatViews;
     *  this.datePicker.formatViews = {day:false, month: false, year:false};
     * ```
     */
    get formatViews() {
        return this._formatViews;
    }
    set formatViews(formatViews) {
        this._formatViews = Object.assign(this._formatViews, formatViews);
    }
    /**
     * Gets/Sets the disabled dates descriptors.
     *
     * @example
     * ```typescript
     * let disabledDates = this.datepicker.disabledDates;
     * this.datePicker.disabledDates = [ {type: DateRangeType.Weekends}, ...];
     * ```
     */
    get disabledDates() {
        return this._disabledDates;
    }
    set disabledDates(value) {
        this._disabledDates = value;
        this._onValidatorChange();
    }
    /**
     * Gets/Sets the special dates descriptors.
     *
     * @example
     * ```typescript
     * let specialDates = this.datepicker.specialDates;
     * this.datePicker.specialDates = [ {type: DateRangeType.Weekends}, ... ];
     * ```
     */
    get specialDates() {
        return this._specialDates;
    }
    set specialDates(value) {
        this._specialDates = value;
    }
    /**
     * Gets/Sets the modal overlay settings.
     */
    get modalOverlaySettings() {
        return this._modalOverlay;
    }
    set modalOverlaySettings(value) {
        this._modalOverlay = value;
    }
    /**
     * Gets/Sets the drop-down overlay settings.
     */
    get dropDownOverlaySettings() {
        return this._dropDownOverlaySettings || this._defaultDropDownOverlaySettings;
    }
    set dropDownOverlaySettings(value) {
        this._dropDownOverlaySettings = value;
    }
    /**
     * Gets the formatted date when `IgxDatePickerComponent` is in dialog mode.
     *
     *  @example
     * ```typescript
     * let selectedDate = this.datePicker.displayData;
     * ```
     */
    get displayData() {
        if (this.value) {
            return this._customFormatChecker(this.formatter, this.value);
        }
        return '';
    }
    /** @hidden @internal */
    get transformedDate() {
        if (this._value) {
            this._transformedDate = (this._isInEditMode) ? this._getEditorDate(this._value) : this._getDisplayDate(this._value);
            this.isEmpty = false;
        }
        else {
            this._transformedDate = (this._isInEditMode) ? DatePickerUtil.maskToPromptChars(this.inputMask) : '';
        }
        return this._transformedDate;
    }
    /** @hidden @internal */
    set transformedDate(value) {
        this._transformedDate = value;
    }
    /**
     * Gets the input group template.
     *
     * @example
     * ```typescript
     * let template = this.template();
     * ```
     */
    get template() {
        if (this.datePickerTemplateDirective) {
            return this.datePickerTemplateDirective.template;
        }
        return (this.mode === InteractionMode.Dialog) ? this.readOnlyDatePickerTemplate : this.editableDatePickerTemplate;
    }
    /**
     * Gets the context passed to the input group template.
     */
    get context() {
        return {
            disabled: this.disabled,
            disabledDates: this.disabledDates,
            displayData: this.displayData,
            format: this.format,
            isSpinLoop: this.isSpinLoop,
            labelVisibility: this.labelVisibility,
            locale: this.locale,
            mask: this.mask,
            mode: this.mode,
            specialDates: this.specialDates,
            value: this.value,
            openDialog: () => this.openDialog()
        };
    }
    get required() {
        if (this._ngControl && this._ngControl.control && this._ngControl.control.validator) {
            // Run the validation with empty object to check if required is enabled.
            const error = this._ngControl.control.validator({});
            return error && error.required;
        }
        return false;
    }
    /**
     * Gets/Sets the selected date.
     *
     *  @example
     * ```html
     * <igx-date-picker [value]="date"></igx-date-picker>
     * ```
     */
    get value() {
        return this._value;
    }
    set value(date) {
        this._value = date;
        this._onChangeCallback(date);
    }
    /**
     * @hidden
     */
    onSpaceClick(event) {
        this.openDialog();
        event.preventDefault();
    }
    /** @hidden @internal */
    writeValue(value) {
        this._value = value;
        // TODO: do we need next call
        this._cdr.markForCheck();
    }
    /** @hidden @internal */
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    /** @hidden @internal */
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    /** @hidden @internal */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /** @hidden @internal */
    registerOnValidatorChange(fn) {
        this._onValidatorChange = fn;
    }
    /** @hidden @internal */
    validate() {
        if (!!this.value && this.disabledDates && isDateInRanges(this.value, this.disabledDates)) {
            return { dateIsDisabled: true };
        }
        return null;
    }
    //#endregion
    /** @hidden */
    getEditElement() {
        const inputDirectiveElementRef = this._inputElementRef || this._inputUserTemplateElementRef;
        return (inputDirectiveElementRef) ? inputDirectiveElementRef.nativeElement : null;
    }
    /** @hidden @internal */
    get inputGroupElement() {
        var _a;
        return (_a = this.inputGroup) === null || _a === void 0 ? void 0 : _a.element.nativeElement;
    }
    /** @hidden @internal */
    get inputGroup() {
        return this._inputGroup || this._inputGroupUserTemplate || null;
    }
    /** @hidden @internal */
    get inputDirective() {
        return this._inputDirective || this._inputDirectiveUserTemplates.first || null;
    }
    /** @hidden @internal */
    get labelDirective() {
        return this._labelDirective || this._labelDirectiveUserTemplate || null;
    }
    /** @hidden @internal */
    ngOnInit() {
        this._positionSettings = {
            openAnimation: fadeIn,
            closeAnimation: fadeOut
        };
        this._defaultDropDownOverlaySettings = {
            target: this.inputGroupElement,
            closeOnOutsideClick: true,
            modal: false,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new AutoPositionStrategy(this._positionSettings),
            outlet: this.outlet
        };
        this._modalOverlaySettings = {
            closeOnOutsideClick: true,
            modal: true,
            closeOnEscape: true,
            outlet: this.outlet
        };
        this._overlayService.onOpening.pipe(filter((overlay) => overlay.id === this._componentID), takeUntil(this._destroy$)).subscribe((eventArgs) => {
            this._onOpening(eventArgs);
        });
        this._overlayService.onOpened.pipe(filter((overlay) => overlay.id === this._componentID), takeUntil(this._destroy$)).subscribe(() => {
            this._onOpened();
        });
        this._overlayService.onClosed.pipe(filter(overlay => overlay.id === this._componentID), takeUntil(this._destroy$)).subscribe(() => {
            this._onClosed();
        });
        this._overlayService.onClosing.pipe(filter(overlay => overlay.id === this._componentID), takeUntil(this._destroy$)).subscribe((event) => {
            this.onClosing.emit(event);
            // If canceled in a user onClosing handler
            if (event.cancel) {
                return;
            }
            // Do not focus the input if clicking outside in dropdown mode
            const input = this.getEditElement();
            if (input && !(event.event && this.mode === InteractionMode.DropDown)) {
                input.focus();
            }
            else {
                // outside click
                this._updateValidityOnBlur();
            }
        });
        if (this.mode === InteractionMode.DropDown) {
            this.dateFormatParts = DatePickerUtil.parseDateFormat(this.mask, this.locale);
            if (this.mask === undefined) {
                this.mask = DatePickerUtil.getMask(this.dateFormatParts);
            }
            this.inputMask = DatePickerUtil.getInputMask(this.dateFormatParts);
        }
        this._ngControl = this._injector.get(NgControl, null);
    }
    /** @hidden @internal */
    ngAfterViewInit() {
        if (this.mode === InteractionMode.DropDown && this._inputElementRef) {
            fromEvent(this._inputElementRef.nativeElement, 'keydown').pipe(throttle(() => interval(0, animationFrameScheduler)), takeUntil(this._destroy$)).subscribe((res) => this.onKeyDown(res));
        }
        if (this._ngControl) {
            this._statusChanges$ = this._ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));
        }
        this._inputDirectiveUserTemplates.changes.subscribe(() => {
            this.attachTemplateBlur();
        });
        this.attachTemplateBlur();
    }
    /** @hidden @internal */
    ngAfterContentChecked() {
        // B.P. 27 Aug. 2021 - #10057
        // igxMask updates the input's value when its mask property is set
        // this is an expected behavior of the mask since it needs to be able to update the input's value
        // during runtime change of placeholder or format
        // this issue is not reproducible after #7199
        if (this.inputDirective && !this._inputGroupUserTemplate
            && this.format.length < this.inputDirective.value.length) {
            this.inputDirective.value = this.transformedDate;
        }
    }
    ngAfterViewChecked() {
        // If one sets mode at run time this forces initialization of new igxInputGroup
        // As a result a new igxInputDirective is initialized too. In ngAfterViewInit of
        // the new directive isRequired of the igxInputGroup is set again. However
        // ngAfterViewInit of date picker is not called again and we may finish with wrong
        // isRequired in igxInputGroup. This is why we should set it her, only when needed
        if (this.inputGroup && this.inputGroup.isRequired !== this.required) {
            this.inputGroup.isRequired = this.required;
            this._cdr.detectChanges();
        }
        // TODO: persist validation state when dynamically changing 'dropdown' to 'dialog' ot vice versa.
        // For reference -> it is currently persisted if a user template is passed (as template is not recreated)
        if (this.labelDirective) {
            this._renderer.setAttribute(this.inputDirective.nativeElement, 'aria-labelledby', this.labelDirective.id);
        }
    }
    /** @hidden @internal */
    ngOnDestroy() {
        if (this._componentID) {
            this._overlayService.hide(this._componentID);
        }
        if (this._statusChanges$) {
            this._statusChanges$.unsubscribe();
        }
        this._destroy$.next(true);
        this._destroy$.complete();
    }
    /**
     * Selects today's date from calendar.
     *
     *  @remarks
     * Changes the input field value, @calendar.viewDate and @calendar.value.
     *  @example
     * ```typescript
     * this.datePicker.triggerTodaySelection();
     * ```
     */
    triggerTodaySelection() {
        const today = new Date(Date.now());
        this.handleSelection(today);
    }
    /**
     * Change the calendar selection.
     *
     * @remarks
     * Calling this method will emit the @calendar.onSelection event,
     * which will fire @handleSelection method.
     * @example
     * ```typescript
     * this.datePicker.selectDate(this.date);
     * ```
     * @param date passed date that has to be set to the calendar.
     */
    selectDate(date) {
        const oldValue = this.value;
        this.value = date;
        this.emitValueChangeEvent(oldValue, this.value);
        this.onSelection.emit(date);
    }
    /**
     * Deselects the calendar date.
     *
     * @example
     * ```typescript
     * this.datePicker.deselectDate();
     * ```
     */
    deselectDate() {
        const oldValue = this.value;
        this.value = null;
        this.emitValueChangeEvent(oldValue, this.value);
        if (this.calendar) {
            this.calendar.deselectDate();
        }
    }
    /**
     * Opens the date picker drop down or dialog.
     *
     * @param target HTMLElement - the target element to use for positioning the drop down container according to
     * @example
     * ```typescript
     * this.datePicker.openDialog(target);
     * ```
     */
    openDialog() {
        if (!this.collapsed || this.disabled) {
            return;
        }
        switch (this.mode) {
            case InteractionMode.Dialog: {
                this.hasHeader = true;
                const modalOverlay = (this.modalOverlaySettings !== undefined) ? this._modalOverlay : this._modalOverlaySettings;
                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, modalOverlay, this._moduleRef);
                this._overlayService.show(this._componentID);
                break;
            }
            case InteractionMode.DropDown: {
                this.hasHeader = false;
                const target = this.inputGroupElement;
                if (target) {
                    this.dropDownOverlaySettings.target = target;
                }
                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, this.dropDownOverlaySettings, this._moduleRef);
                this._overlayService.show(this._componentID);
                break;
            }
        }
    }
    /**
     * Close the calendar.
     *
     * @hidden @internal
     */
    closeCalendar() {
        this._overlayService.hide(this._componentID);
    }
    /**
     * Clear the input field, date picker value and calendar selection.
     *
     * @hidden @internal
     */
    clear() {
        if (!this.disabled) {
            this.isEmpty = true;
            this.invalidDate = '';
            this.deselectDate();
            this._setCursorPosition(0);
        }
    }
    /**
     * Evaluates when @calendar.onSelection event was fired
     * and update the input value.
     *
     * @param event selected value from calendar.
     *
     * @hidden @internal
     */
    handleSelection(date) {
        if (this.value) {
            date.setHours(this.value.getHours());
            date.setMinutes(this.value.getMinutes());
            date.setSeconds(this.value.getSeconds());
            date.setMilliseconds(this.value.getMilliseconds());
        }
        const oldValue = this.value;
        this.value = date;
        this.emitValueChangeEvent(oldValue, this.value);
        this.calendar.viewDate = date;
        this.closeCalendar();
        this.onSelection.emit(date);
    }
    /** @hidden @internal */
    onOpenClick(event) {
        event.stopPropagation();
        this.openDialog();
    }
    /** @hidden @internal */
    onBlur(event, calcDate = true) {
        this._isInEditMode = false;
        if (this.mode === InteractionMode.DropDown && calcDate) {
            this.calculateDate(event.target.value, event.type);
        }
        if (this.collapsed) {
            this._updateValidityOnBlur();
        }
    }
    /** @hidden @internal */
    onFocus() {
        this._isInEditMode = true;
        if (this.value && this.invalidDate === '') {
            this._transformedDate = this._getEditorDate(this.value);
        }
    }
    /** @hidden @internal */
    onKeyDown(event) {
        switch (event.key) {
            case "ArrowUp" /* UP_ARROW */:
            case "Up" /* UP_ARROW_IE */:
                event.preventDefault();
                event.stopPropagation();
                this.spinValue(event.target.value, 1, event.type);
                break;
            case "ArrowDown" /* DOWN_ARROW */:
            case "Down" /* DOWN_ARROW_IE */:
                if (event.altKey) {
                    this.openDialog();
                }
                else {
                    event.preventDefault();
                    event.stopPropagation();
                    this.spinValue(event.target.value, -1, event.type);
                }
                break;
            default:
                break;
        }
    }
    /** @hidden @internal */
    onWheel(event) {
        if (this._isInEditMode) {
            event.preventDefault();
            event.stopPropagation();
            const sign = (event.deltaY > 0) ? -1 : 1;
            this.spinValue(event.target.value, sign, event.type);
        }
    }
    /** @hidden @internal */
    onInput(event) {
        /**
         * Fix for #8165 until refactoring (#6483).
         * The IgxDateTimeEditor will be used to handle all inputs, i.e. this handler will be removed.
         * It extends the IgxMaskDirective which contains logic that handles this issue.
         */
        if (isIE() && !this._isInEditMode && !this.inputGroup.isFocused) {
            return;
        }
        const targetValue = event.target.value;
        const cursorPosition = this._getCursorPosition();
        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, targetValue);
        this._isInEditMode = true;
        if (targetValue !== DatePickerUtil.maskToPromptChars(this.inputMask)) {
            this.isEmpty = false;
        }
        // If all date parts are completed, change the date-picker value, stay in edit mode
        if (checkInput === 'complete' && event.inputType !== 'deleteContentBackward') {
            this._transformedDate = targetValue;
            this.calculateDate(targetValue, event.type);
            this._setCursorPosition(cursorPosition);
        }
        else if (checkInput === 'partial') {
            // While editing, if one date part is deleted, date-picker value is set to null, the remaining input stays intact.
            this.deselectDate();
            requestAnimationFrame(() => {
                this.getEditElement().value = targetValue;
                this._setCursorPosition(cursorPosition);
            });
        }
        else if (checkInput === 'empty') {
            // Total clean-up as input is deleted.
            this.isEmpty = true;
            this.deselectDate();
        }
    }
    _updateValidityOnBlur() {
        this._onTouchedCallback();
        const input = this.inputDirective;
        if (input && this._ngControl && !this._ngControl.valid) {
            input.valid = IgxInputState.INVALID;
        }
        else {
            input.valid = IgxInputState.INITIAL;
        }
    }
    onStatusChanged() {
        if (this.inputDirective) {
            if ((this._ngControl.control.touched || this._ngControl.control.dirty) &&
                (this.inputDirective && this._ngControl.control.validator || this._ngControl.control.asyncValidator)) {
                if (this.inputGroup.isFocused) {
                    this.inputDirective.valid = this._ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;
                }
                else {
                    this.inputDirective.valid = this._ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;
                }
            }
            else {
                this.inputDirective.valid = IgxInputState.INITIAL;
            }
        }
        if (this.inputGroup && this.inputGroup.isRequired !== this.required) {
            this.inputGroup.isRequired = this.required;
        }
    }
    attachTemplateBlur() {
        if (this._templateInputBlur$) {
            this._templateInputBlur$.unsubscribe();
        }
        if (this._inputDirectiveUserTemplates.first) {
            const directive = this._inputDirectiveUserTemplates.first;
            this._templateInputBlur$ = fromEvent(directive.nativeElement, 'blur').pipe(takeUntil(this._destroy$)).subscribe((res) => {
                this.rawDateString = res.target.value;
                this.onBlur(res, false);
            });
            // TODO: Refactor custom template handling.
            // Revise blur handling when custom template is passed
        }
    }
    emitValueChangeEvent(oldValue, newValue) {
        if (!isEqual(oldValue, newValue)) {
            this.valueChange.emit(newValue);
        }
    }
    calculateDate(dateString, invokedByEvent) {
        if (dateString !== '') {
            const prevDateValue = this.value;
            const inputValue = (invokedByEvent === 'blur') ? this.rawDateString : dateString;
            const newDateArray = DatePickerUtil.parseDateArray(this.dateFormatParts, prevDateValue, inputValue);
            if (newDateArray.state === "valid" /* Valid */) {
                const newValue = newDateArray.date;
                // Restore the time part if any
                if (prevDateValue) {
                    newValue.setHours(prevDateValue.getHours());
                    newValue.setMinutes(prevDateValue.getMinutes());
                    newValue.setSeconds(prevDateValue.getSeconds());
                    newValue.setMilliseconds(prevDateValue.getMilliseconds());
                }
                if (this.disabledDates === null
                    || (this.disabledDates !== null && !isDateInRanges(newValue, this.disabledDates))) {
                    const oldValue = this.value;
                    this.value = newValue;
                    this.emitValueChangeEvent(oldValue, this.value);
                    this.invalidDate = '';
                }
                else {
                    const args = {
                        datePicker: this,
                        currentValue: newValue,
                    };
                    this.onDisabledDate.emit(args);
                }
            }
            else {
                const args = {
                    datePicker: this,
                    prevValue: prevDateValue
                };
                this.invalidDate = dateString;
                this.onValidationFailed.emit(args);
            }
        }
    }
    spinValue(inputValue, sign, eventType) {
        this._isInEditMode = true;
        this.isEmpty = false;
        const cursorPosition = this._getCursorPosition();
        const modifiedInputValue = DatePickerUtil.getModifiedDateInput(this.dateFormatParts, inputValue, cursorPosition, this.spinDelta * sign, this.isSpinLoop);
        this.getEditElement().value = modifiedInputValue;
        this._setCursorPosition(cursorPosition);
        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, modifiedInputValue);
        if (checkInput === 'complete') {
            this._isInEditMode = true;
            this.calculateDate(modifiedInputValue, eventType);
            this._setCursorPosition(cursorPosition);
        }
    }
    _onOpening(event) {
        this._initializeCalendarContainer(event.componentRef.instance);
        this.collapsed = false;
    }
    _onOpened() {
        this.onOpened.emit(this);
        if (this.calendar) {
            this._focusCalendarDate();
        }
    }
    _onClosed() {
        this.collapsed = true;
        this._componentID = null;
        this.onClosed.emit(this);
    }
    _initializeCalendarContainer(componentInstance) {
        this.calendar = componentInstance.calendar;
        const isVertical = (this.vertical && this.mode === InteractionMode.Dialog);
        this.calendar.hasHeader = this.hasHeader;
        this.calendar.formatOptions = this.formatOptions;
        this.calendar.formatViews = this.formatViews;
        this.calendar.locale = this.locale;
        this.calendar.vertical = isVertical;
        this.calendar.weekStart = this.weekStart;
        this.calendar.specialDates = this.specialDates;
        this.calendar.disabledDates = this.disabledDates;
        this.calendar.headerTemplate = this.headerTemplate;
        this.calendar.subheaderTemplate = this.subheaderTemplate;
        this.calendar.hideOutsideDays = this.hideOutsideDays;
        this.calendar.monthsViewNumber = this.monthsViewNumber;
        this.calendar.showWeekNumbers = this.showWeekNumbers;
        this.calendar.selected.pipe(takeUntil(this._destroy$)).subscribe((ev) => this.handleSelection(ev));
        if (this.value) {
            this.calendar.value = this.value;
            this.calendar.viewDate = this.value;
        }
        componentInstance.mode = this.mode;
        componentInstance.vertical = isVertical;
        componentInstance.cancelButtonLabel = this.cancelButtonLabel;
        componentInstance.todayButtonLabel = this.todayButtonLabel;
        componentInstance.datePickerActions = this.datePickerActionsDirective;
        componentInstance.onClose.pipe(takeUntil(this._destroy$)).subscribe(() => this.closeCalendar());
        componentInstance.onTodaySelection.pipe(takeUntil(this._destroy$)).subscribe(() => this.triggerTodaySelection());
    }
    // Focus a date, after the calendar appearance into DOM.
    _focusCalendarDate() {
        requestAnimationFrame(() => {
            this.calendar.daysView.focusActiveDate();
        });
    }
    _setLocaleToDate(value) {
        if (isIE()) {
            // this is a workaround fixing the following IE11 issue:
            // IE11 has added character code 8206 (mark for RTL) to the output of toLocaleDateString() that
            // precedes each portion that comprises the total date... For more information read this article:
            // eslint-disable-next-line max-len
            // https://www.csgpro.com/blog/2016/08/a-bad-date-with-internet-explorer-11-trouble-with-new-unicode-characters-in-javascript-date-strings/
            const localeDateStrIE = new Date(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds());
            return localeDateStrIE.toLocaleDateString(this.locale);
        }
        return value.toLocaleDateString(this.locale);
    }
    _getCursorPosition() {
        return this.getEditElement().selectionStart;
    }
    _setCursorPosition(start, end = start) {
        requestAnimationFrame(() => {
            this.getEditElement().setSelectionRange(start, end);
        });
    }
    /**
     * Apply custom user formatter upon date.
     *
     * @param formatter custom formatter function.
     * @param date passed date
     */
    _customFormatChecker(formatter, date) {
        return this.formatter ? this.formatter(date) : this._setLocaleToDate(date);
    }
    /*
    * Transforms the date according to the specified format when `IgxDatePickerComponent` is in edit mode
    * using @angular/common formatDate method: https://angular.io/api/common/formatDate
    * @param  value: string | number | Date
    * @returns formatted string
    */
    _getDisplayDate(value) {
        if (this.format && !this.formatter) {
            const locale = this.locale || this.defaultLocale;
            return formatDate(value, this.format, locale);
        }
        else {
            return this._customFormatChecker(this.formatter, value);
        }
    }
    _getEditorDate(value) {
        const locale = this.locale || this.defaultLocale;
        const changedValue = (value) ? formatDate(value, this.mask, locale) : '';
        return DatePickerUtil.addPromptCharsEditMode(this.dateFormatParts, this.value, changedValue);
    }
}
IgxDatePickerComponent.decorators = [
    { type: Component, args: [{
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: IgxDatePickerComponent,
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: IgxDatePickerComponent,
                        multi: true
                    }],
                // eslint-disable-next-line @angular-eslint/component-selector
                selector: 'igx-date-picker',
                template: "<ng-template #labelTemplate>\n    <ng-content select=\"[igxLabel]\"></ng-content>\n</ng-template>\n\n<ng-template #readOnlyDatePickerTemplate>\n    <igx-input-group (click)=\"openDialog()\">\n        <ng-container ngProjectAs=\"[igxLabel]\" *ngTemplateOutlet=\"labelTemplate\"></ng-container>\n        <igx-prefix>\n            <igx-icon>today</igx-icon>\n        </igx-prefix>\n        <label *ngIf=\"labelVisibility&&!_labelDirectiveUserTemplate\" igxLabel>{{labelInternal}}</label>\n        <input\n            class=\"igx-date-picker__input-date\"\n            igxInput\n            [value]=\"displayData || ''\"\n            [disabled]=\"disabled\"\n            (blur)=\"onBlur($event)\"\n            [tabindex]='editorTabIndex'\n            readonly\n        />\n    </igx-input-group>\n</ng-template>\n\n<ng-template #editableDatePickerTemplate>\n    <igx-input-group #editableInputGroup>\n        <ng-container ngProjectAs=\"[igxLabel]\" *ngTemplateOutlet=\"labelTemplate\"></ng-container>\n        <igx-prefix (click)=\"onOpenClick($event)\">\n            <igx-icon>today</igx-icon>\n        </igx-prefix>\n        <label *ngIf=\"labelVisibility&&!_labelDirectiveUserTemplate\" igxLabel>{{labelInternal}}</label>\n        <input\n            class=\"igx-date-picker__input-date\"\n            igxInput\n            type=\"text\"\n            [value]=\"transformedDate\"\n            [igxMask]=\"inputMask\"\n            [placeholder]=\"mask\"\n            [igxTextSelection]=\"true\"\n            [disabled]=\"disabled\"\n            [displayValuePipe]=\"displayValuePipe\"\n            [focusedValuePipe]=\"inputValuePipe\"\n            (blur)=\"onBlur($event)\"\n            (wheel)=\"onWheel($event)\"\n            (input)=\"onInput($event)\"\n            (focus)=\"onFocus()\"\n            [tabindex]='editorTabIndex'\n        />\n        <igx-suffix *ngIf=\"!isEmpty\" (click)=\"clear()\">\n            <igx-icon>clear</igx-icon>\n        </igx-suffix>\n    </igx-input-group>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template; context: context\"></ng-container>\n",
                styles: [`
        :host {
            display: block;
        }
    `]
            },] }
];
IgxDatePickerComponent.ctorParameters = () => [
    { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: NgModuleRef },
    { type: Injector },
    { type: Renderer2 }
];
IgxDatePickerComponent.propDecorators = {
    label: [{ type: Input }],
    labelVisibility: [{ type: Input }],
    locale: [{ type: Input }],
    editorTabIndex: [{ type: Input }],
    weekStart: [{ type: Input }],
    formatOptions: [{ type: Input }],
    hideOutsideDays: [{ type: Input }],
    monthsViewNumber: [{ type: Input }],
    showWeekNumbers: [{ type: Input }],
    format: [{ type: Input }],
    mask: [{ type: Input }],
    formatViews: [{ type: Input }],
    disabledDates: [{ type: Input }],
    specialDates: [{ type: Input }],
    modalOverlaySettings: [{ type: Input }],
    dropDownOverlaySettings: [{ type: Input }],
    value: [{ type: Input }],
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    formatter: [{ type: Input }],
    disabled: [{ type: Input }],
    vertical: [{ type: Input }],
    todayButtonLabel: [{ type: Input }],
    cancelButtonLabel: [{ type: Input }],
    mode: [{ type: Input }],
    isSpinLoop: [{ type: Input }],
    outlet: [{ type: Input }],
    onOpened: [{ type: Output }],
    onClosed: [{ type: Output }],
    onClosing: [{ type: Output }],
    onSelection: [{ type: Output }],
    valueChange: [{ type: Output }],
    onDisabledDate: [{ type: Output }],
    onValidationFailed: [{ type: Output }],
    _labelDirectiveUserTemplate: [{ type: ContentChild, args: [IgxLabelDirective,] }],
    headerTemplate: [{ type: ContentChild, args: [IgxCalendarHeaderTemplateDirective, { read: IgxCalendarHeaderTemplateDirective },] }],
    subheaderTemplate: [{ type: ContentChild, args: [IgxCalendarSubheaderTemplateDirective, { read: IgxCalendarSubheaderTemplateDirective },] }],
    datePickerActionsDirective: [{ type: ContentChild, args: [IgxDatePickerActionsDirective, { read: IgxDatePickerActionsDirective },] }],
    readOnlyDatePickerTemplate: [{ type: ViewChild, args: ['readOnlyDatePickerTemplate', { read: TemplateRef, static: true },] }],
    editableDatePickerTemplate: [{ type: ViewChild, args: ['editableDatePickerTemplate', { read: TemplateRef, static: true },] }],
    _inputGroup: [{ type: ViewChild, args: [IgxInputGroupComponent,] }],
    _inputGroupUserTemplate: [{ type: ContentChild, args: [IgxInputGroupComponent,] }],
    _inputUserTemplateElementRef: [{ type: ContentChild, args: [IgxInputDirective, { read: ElementRef },] }],
    _labelDirective: [{ type: ViewChild, args: [IgxLabelDirective,] }],
    datePickerTemplateDirective: [{ type: ContentChild, args: [IgxDatePickerTemplateDirective, { read: IgxDatePickerTemplateDirective },] }],
    _inputElementRef: [{ type: ViewChild, args: [IgxInputDirective, { read: ElementRef },] }],
    _inputDirective: [{ type: ViewChild, args: [IgxInputDirective,] }],
    _inputDirectiveUserTemplates: [{ type: ContentChildren, args: [IgxInputDirective, { descendants: true },] }],
    onSpaceClick: [{ type: HostListener, args: ['keydown.spacebar', ['$event'],] }, { type: HostListener, args: ['keydown.space', ['$event'],] }]
};
__decorate([
    DeprecateProperty(`Use igxLabel inside the date picker to change the label:
    <igx-date-picker>
        <label igxLabel>Custom label</label>
    </igx-date-picker> `)
], IgxDatePickerComponent.prototype, "label", null);
/**
 * @hidden
 */
export class IgxDatePickerModule {
}
IgxDatePickerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    IgxDatePickerComponent,
                    IgxCalendarContainerComponent,
                    IgxDatePickerActionsDirective,
                    IgxDatePickerTemplateDirective,
                    DatePickerDisplayValuePipe,
                    DatePickerInputValuePipe
                ],
                entryComponents: [
                    IgxCalendarContainerComponent
                ],
                exports: [
                    IgxDatePickerComponent,
                    IgxDatePickerTemplateDirective,
                    IgxDatePickerActionsDirective,
                    DatePickerDisplayValuePipe,
                    DatePickerInputValuePipe,
                    IgxInputGroupModule
                ],
                imports: [
                    CommonModule,
                    IgxIconModule,
                    IgxInputGroupModule,
                    IgxCalendarModule,
                    IgxButtonModule,
                    IgxRippleModule,
                    IgxMaskModule,
                    IgxTextSelectionModule
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2RhdGUtcGlja2VyL2RhdGUtcGlja2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzRCxPQUFPLEVBQ0gsU0FBUyxFQUNULFlBQVksRUFDWixZQUFZLEVBQ1osV0FBVyxFQUNYLEtBQUssRUFDTCxRQUFRLEVBRVIsTUFBTSxFQUNOLFNBQVMsRUFDVCxVQUFVLEVBQ1YsV0FBVyxFQUNYLE1BQU0sRUFDTixpQkFBaUIsRUFDakIsWUFBWSxFQUNaLFdBQVcsRUFHWCxRQUFRLEVBRVIsZUFBZSxFQUVmLFNBQVMsRUFFWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQXdCLGlCQUFpQixFQUFFLFNBQVMsRUFBbUIsYUFBYSxFQUFvQixNQUFNLGdCQUFnQixDQUFDO0FBQ3RJLE9BQU8sRUFFSCxrQ0FBa0MsRUFDbEMsaUJBQWlCLEVBQ2pCLHFDQUFxQyxFQUNyQyxRQUFRLEVBQ1IsY0FBYyxFQUNqQixNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRCxPQUFPLEVBQ0gsbUJBQW1CLEVBQ25CLGlCQUFpQixFQUNqQixzQkFBc0IsRUFDdEIsYUFBYSxFQUNiLGlCQUFpQixFQUNwQixNQUFNLDJCQUEyQixDQUFDO0FBQ25DLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLHVCQUF1QixFQUFFLFFBQVEsRUFBZ0IsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2pHLE9BQU8sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTdELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQy9GLE9BQU8sRUFFSCxpQkFBaUIsRUFFakIsc0JBQXNCLEVBQ3RCLG9CQUFvQixFQUV2QixNQUFNLHdCQUF3QixDQUFDO0FBR2hDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDeEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2xFLE9BQU8sRUFDSCxjQUFjLEVBRWpCLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLDBCQUEwQixFQUFFLHdCQUF3QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFM0YsT0FBTyxFQUFRLElBQUksRUFBRSxPQUFPLEVBQWtCLE1BQU0sRUFBbUMsTUFBTSxlQUFlLENBQUM7QUFDN0csT0FBTyxFQUFFLDhCQUE4QixFQUFFLDZCQUE2QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDekcsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDL0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRWhFLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQztBQXVDaEI7Ozs7Ozs7R0FPRztBQUNILE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLE1BQU0sQ0FBQztJQUMxQyxTQUFTLEVBQUUsV0FBVztJQUN0QixVQUFVLEVBQUUsWUFBWTtJQUN4QixRQUFRLEVBQUUsVUFBVTtJQUNwQixRQUFRLEVBQUUsVUFBVTtDQUN2QixDQUFDLENBQUM7QUFHSDs7Ozs7Ozs7Ozs7R0FXRztBQXNCSCxNQUFNLE9BQU8sc0JBQXNCO0lBd29CL0IsWUFDK0IsZUFBa0MsRUFDdEQsT0FBbUIsRUFDbEIsSUFBdUIsRUFDdkIsVUFBNEIsRUFDNUIsU0FBbUIsRUFDbkIsU0FBb0I7UUFMRCxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUFDdEQsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUNsQixTQUFJLEdBQUosSUFBSSxDQUFtQjtRQUN2QixlQUFVLEdBQVYsVUFBVSxDQUFrQjtRQUM1QixjQUFTLEdBQVQsU0FBUyxDQUFVO1FBQ25CLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFybUJoQzs7Ozs7OztXQU9HO1FBRUksb0JBQWUsR0FBRyxJQUFJLENBQUM7UUFFOUI7Ozs7Ozs7O1dBUUc7UUFDYSxXQUFNLEdBQUcsSUFBSSxDQUFDO1FBWTlCOzs7Ozs7O1dBT0c7UUFDYSxjQUFTLEdBQXNCLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUE2Qy9EOzs7Ozs7Ozs7Ozs7O1dBYUc7UUFFSSxxQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFzTjVCOzs7Ozs7OztXQVFHO1FBR0ksT0FBRSxHQUFHLG1CQUFtQixPQUFPLEVBQUUsRUFBRSxDQUFDO1FBd0IzQzs7Ozs7OztXQU9HO1FBRUksYUFBUSxHQUFHLEtBQUssQ0FBQztRQXdCeEI7Ozs7Ozs7V0FPRztRQUVJLFNBQUksR0FBb0IsZUFBZSxDQUFDLE1BQU0sQ0FBQztRQUV0RDs7Ozs7OztXQU9HO1FBRUksZUFBVSxHQUFHLElBQUksQ0FBQztRQWtCekI7O1dBRUc7UUFFSSxhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQTBCLENBQUM7UUFFN0Q7O1dBRUc7UUFFSSxhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQTBCLENBQUM7UUFFN0Q7O1dBRUc7UUFFSSxjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQW1DLENBQUM7UUFFdkU7Ozs7Ozs7V0FPRztRQUVJLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUU5Qzs7Ozs7OztXQU9HO1FBRUksZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBRTlDOzs7Ozs7O1dBT0c7UUFFSSxtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFvQyxDQUFDO1FBRTdFOzs7Ozs7O1dBT0c7UUFFSSx1QkFBa0IsR0FBRyxJQUFJLFlBQVksRUFBd0MsQ0FBQztRQW9FckYsd0JBQXdCO1FBQ2pCLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFDeEIsd0JBQXdCO1FBQ2pCLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFDeEIsd0JBQXdCO1FBQ2pCLHFCQUFnQixHQUFHLElBQUksMEJBQTBCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0Qsd0JBQXdCO1FBQ2pCLG1CQUFjLEdBQUcsSUFBSSx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzRCx3QkFBd0I7UUFDakIsb0JBQWUsR0FBRyxFQUFFLENBQUM7UUFLNUIsd0JBQXdCO1FBQ2pCLFlBQU8sR0FBRyxJQUFJLENBQUM7UUFDdEIsd0JBQXdCO1FBQ2pCLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBRVAsY0FBUyxHQUFHLENBQUMsQ0FBQztRQUNkLGtCQUFhLEdBQUcsSUFBSSxDQUFDO1FBRTlCLG1CQUFjLEdBQUc7WUFDckIsR0FBRyxFQUFFLFNBQVM7WUFDZCxLQUFLLEVBQUUsT0FBTztZQUNkLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLElBQUksRUFBRSxTQUFTO1NBQ2xCLENBQUM7UUFDTSxpQkFBWSxHQUFHO1lBQ25CLEdBQUcsRUFBRSxLQUFLO1lBQ1YsS0FBSyxFQUFFLElBQUk7WUFDWCxJQUFJLEVBQUUsS0FBSztTQUNkLENBQUM7UUFDTSxjQUFTLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztRQU9uQyxtQkFBYyxHQUEwQixJQUFJLENBQUM7UUFDN0Msa0JBQWEsR0FBMEIsSUFBSSxDQUFDO1FBTzVDLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBMEIsQ0FBQztRQUNyRCxhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQTBCLENBQUM7UUFDdEQsZUFBVSxHQUFjLElBQUksQ0FBQztRQUM3QixXQUFNLEdBQUcsTUFBTSxDQUFDO1FBRXhCLDhCQUE4QjtRQUV0QixzQkFBaUIsR0FBc0IsSUFBSSxDQUFDO1FBQzVDLHVCQUFrQixHQUFlLElBQUksQ0FBQztRQUN0Qyx1QkFBa0IsR0FBZSxJQUFJLENBQUM7SUFTOUMsQ0FBQztJQTdvQkQ7Ozs7Ozs7Ozs7Ozs7Ozs7T0FnQkc7SUFNSCxJQUFXLEtBQUs7UUFDWixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQVcsS0FBSyxDQUFDLENBQVM7UUFDdEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQVcsYUFBYTtRQUNwQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVELHdCQUF3QjtJQUN4QixJQUFXLGFBQWE7UUFDcEIsT0FBTyxJQUFJLENBQUMsMkJBQTJCLENBQUM7SUFDNUMsQ0FBQztJQTRDRDs7Ozs7OztPQU9HO0lBQ0gsSUFDVyxhQUFhO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUMvQixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILElBQVcsYUFBYSxDQUFDLGFBQTZCO1FBQ2xELElBQUksQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFnREQ7Ozs7Ozs7O09BUUc7SUFDSCxJQUNXLE1BQU07UUFDYixPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQzNGLENBQUM7SUFDRCxJQUFXLE1BQU0sQ0FBQyxNQUFjO1FBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQzFCLENBQUM7SUFhRDs7Ozs7Ozs7T0FRRztJQUNILElBQ1csV0FBVztRQUNsQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQVcsV0FBVyxDQUFDLFdBQXlCO1FBQzVDLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNILElBQ1csYUFBYTtRQUNwQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDL0IsQ0FBQztJQUNELElBQVcsYUFBYSxDQUFDLEtBQTRCO1FBQ2pELElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1FBQzVCLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNILElBQ1csWUFBWTtRQUNuQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDOUIsQ0FBQztJQUNELElBQVcsWUFBWSxDQUFDLEtBQTRCO1FBQ2hELElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO0lBQy9CLENBQUM7SUFFRDs7T0FFRztJQUNILElBQ1csb0JBQW9CO1FBQzNCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBVyxvQkFBb0IsQ0FBQyxLQUFzQjtRQUNsRCxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztJQUMvQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUNXLHVCQUF1QjtRQUM5QixPQUFPLElBQUksQ0FBQyx3QkFBd0IsSUFBSSxJQUFJLENBQUMsK0JBQStCLENBQUM7SUFDakYsQ0FBQztJQUVELElBQVcsdUJBQXVCLENBQUMsS0FBc0I7UUFDckQsSUFBSSxDQUFDLHdCQUF3QixHQUFHLEtBQUssQ0FBQztJQUMxQyxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILElBQVcsV0FBVztRQUNsQixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDWixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNoRTtRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELHdCQUF3QjtJQUN4QixJQUFXLGVBQWU7UUFDdEIsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDcEgsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7U0FDeEI7YUFBTTtZQUNILElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQ3hHO1FBQ0QsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDakMsQ0FBQztJQUVELHdCQUF3QjtJQUN4QixJQUFXLGVBQWUsQ0FBQyxLQUFLO1FBQzVCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7SUFDbEMsQ0FBQztJQUdEOzs7Ozs7O09BT0c7SUFDSCxJQUFJLFFBQVE7UUFDUixJQUFJLElBQUksQ0FBQywyQkFBMkIsRUFBRTtZQUNsQyxPQUFPLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxRQUFRLENBQUM7U0FDcEQ7UUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDO0lBQ3RILENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksT0FBTztRQUNQLE9BQU87WUFDSCxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhO1lBQ2pDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLGVBQWUsRUFBRSxJQUFJLENBQUMsZUFBZTtZQUNyQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQy9CLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtTQUN0QyxDQUFDO0lBQ04sQ0FBQztJQUVELElBQVksUUFBUTtRQUNoQixJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFO1lBQ2pGLHdFQUF3RTtZQUN4RSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBcUIsQ0FBQyxDQUFDO1lBQ3ZFLE9BQU8sS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUM7U0FDbEM7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBR0Q7Ozs7Ozs7T0FPRztJQUNILElBQ1csS0FBSztRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBVyxLQUFLLENBQUMsSUFBVTtRQUN2QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQWdURDs7T0FFRztJQUdJLFlBQVksQ0FBQyxLQUFvQjtRQUNwQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCx3QkFBd0I7SUFDakIsVUFBVSxDQUFDLEtBQVc7UUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsNkJBQTZCO1FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELHdCQUF3QjtJQUNqQixnQkFBZ0IsQ0FBQyxFQUFxQjtRQUN6QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFRCx3QkFBd0I7SUFDakIsaUJBQWlCLENBQUMsRUFBYztRQUNuQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRCx3QkFBd0I7SUFDakIsZ0JBQWdCLENBQUMsVUFBbUI7UUFDdkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7SUFDL0IsQ0FBQztJQUVELHdCQUF3QjtJQUNqQix5QkFBeUIsQ0FBQyxFQUFPO1FBQ3BDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxFQUFFLENBQUM7SUFDakMsQ0FBQztJQUVELHdCQUF3QjtJQUNqQixRQUFRO1FBQ1gsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUN0RixPQUFPLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxDQUFDO1NBQ25DO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUNELFlBQVk7SUFFWixjQUFjO0lBQ1AsY0FBYztRQUNqQixNQUFNLHdCQUF3QixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLENBQUMsNEJBQTRCLENBQUM7UUFDNUYsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3RGLENBQUM7SUFFRCx3QkFBd0I7SUFDeEIsSUFBVyxpQkFBaUI7O1FBQ3hCLGFBQU8sSUFBSSxDQUFDLFVBQVUsMENBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQztJQUNsRCxDQUFDO0lBRUQsd0JBQXdCO0lBQ3hCLElBQVcsVUFBVTtRQUNqQixPQUFPLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLHVCQUF1QixJQUFJLElBQUksQ0FBQztJQUNwRSxDQUFDO0lBRUQsd0JBQXdCO0lBQ3hCLElBQVcsY0FBYztRQUNyQixPQUFPLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLDRCQUE0QixDQUFDLEtBQUssSUFBSSxJQUFJLENBQUM7SUFDbkYsQ0FBQztJQUVELHdCQUF3QjtJQUN4QixJQUFXLGNBQWM7UUFDckIsT0FBTyxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQywyQkFBMkIsSUFBSSxJQUFJLENBQUM7SUFDNUUsQ0FBQztJQUVELHdCQUF3QjtJQUNqQixRQUFRO1FBQ1gsSUFBSSxDQUFDLGlCQUFpQixHQUFHO1lBQ3JCLGFBQWEsRUFBRSxNQUFNO1lBQ3JCLGNBQWMsRUFBRSxPQUFPO1NBQzFCLENBQUM7UUFFRixJQUFJLENBQUMsK0JBQStCLEdBQUc7WUFDbkMsTUFBTSxFQUFFLElBQUksQ0FBQyxpQkFBaUI7WUFDOUIsbUJBQW1CLEVBQUUsSUFBSTtZQUN6QixLQUFLLEVBQUUsS0FBSztZQUNaLGNBQWMsRUFBRSxJQUFJLHNCQUFzQixFQUFFO1lBQzVDLGdCQUFnQixFQUFFLElBQUksb0JBQW9CLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1lBQ2xFLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtTQUN0QixDQUFDO1FBRUYsSUFBSSxDQUFDLHFCQUFxQixHQUFHO1lBQ3pCLG1CQUFtQixFQUFFLElBQUk7WUFDekIsS0FBSyxFQUFFLElBQUk7WUFDWCxhQUFhLEVBQUUsSUFBSTtZQUNuQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07U0FDdEIsQ0FBQztRQUVGLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDL0IsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsRUFDckQsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQy9DLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7UUFFUCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQzlCLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQ3JELFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ3RDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztRQUVQLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDOUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQ25ELFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ3RDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztRQUVQLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDL0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQ25ELFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUMzQyxJQUFJ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QUksRUFBRSxVQUFVLEVBQUU7OEJBR3BELFNBQVMsU0FBQyxpQkFBaUI7MENBTTNCLFlBQVksU0FBQyw4QkFBOEIsRUFBRSxFQUFFLElBQUksRUFBRSw4QkFBOEIsRUFBRTsrQkFHckYsU0FBUyxTQUFDLGlCQUFpQixFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTs4QkFHakQsU0FBUyxTQUFDLGlCQUFpQjsyQ0FHM0IsZUFBZSxTQUFDLGlCQUFpQixFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRTsyQkE0RXhELFlBQVksU0FBQyxrQkFBa0IsRUFBRSxDQUFDLFFBQVEsQ0FBQyxjQUMzQyxZQUFZLFNBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDOztBQTduQnpDO0lBTEMsaUJBQWlCLENBQUM7Ozt3QkFHQyxDQUFDO21EQUlwQjtBQTh3Q0w7O0dBRUc7QUFnQ0gsTUFBTSxPQUFPLG1CQUFtQjs7O1lBL0IvQixRQUFRLFNBQUM7Z0JBQ04sWUFBWSxFQUFFO29CQUNWLHNCQUFzQjtvQkFDdEIsNkJBQTZCO29CQUM3Qiw2QkFBNkI7b0JBQzdCLDhCQUE4QjtvQkFDOUIsMEJBQTBCO29CQUMxQix3QkFBd0I7aUJBQzNCO2dCQUNELGVBQWUsRUFBRTtvQkFDYiw2QkFBNkI7aUJBQ2hDO2dCQUNELE9BQU8sRUFBRTtvQkFDTCxzQkFBc0I7b0JBQ3RCLDhCQUE4QjtvQkFDOUIsNkJBQTZCO29CQUM3QiwwQkFBMEI7b0JBQzFCLHdCQUF3QjtvQkFDeEIsbUJBQW1CO2lCQUN0QjtnQkFDRCxPQUFPLEVBQUU7b0JBQ0wsWUFBWTtvQkFDWixhQUFhO29CQUNiLG1CQUFtQjtvQkFDbkIsaUJBQWlCO29CQUNqQixlQUFlO29CQUNmLGVBQWU7b0JBQ2YsYUFBYTtvQkFDYixzQkFBc0I7aUJBQ3pCO2FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUsIGZvcm1hdERhdGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgQ29udGVudENoaWxkLFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbnB1dCxcbiAgICBOZ01vZHVsZSxcbiAgICBPbkRlc3Ryb3ksXG4gICAgT3V0cHV0LFxuICAgIFZpZXdDaGlsZCxcbiAgICBFbGVtZW50UmVmLFxuICAgIFRlbXBsYXRlUmVmLFxuICAgIEluamVjdCxcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgTmdNb2R1bGVSZWYsXG4gICAgT25Jbml0LFxuICAgIEFmdGVyVmlld0luaXQsXG4gICAgSW5qZWN0b3IsXG4gICAgQWZ0ZXJWaWV3Q2hlY2tlZCxcbiAgICBDb250ZW50Q2hpbGRyZW4sXG4gICAgUXVlcnlMaXN0LFxuICAgIFJlbmRlcmVyMixcbiAgICBBZnRlckNvbnRlbnRDaGVja2VkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SLCBOZ0NvbnRyb2wsIEFic3RyYWN0Q29udHJvbCwgTkdfVkFMSURBVE9SUywgVmFsaWRhdGlvbkVycm9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7XG4gICAgSWd4Q2FsZW5kYXJDb21wb25lbnQsXG4gICAgSWd4Q2FsZW5kYXJIZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICBJZ3hDYWxlbmRhck1vZHVsZSxcbiAgICBJZ3hDYWxlbmRhclN1YmhlYWRlclRlbXBsYXRlRGlyZWN0aXZlLFxuICAgIFdFRUtEQVlTLFxuICAgIGlzRGF0ZUluUmFuZ2VzXG59IGZyb20gJy4uL2NhbGVuZGFyL3B1YmxpY19hcGknO1xuaW1wb3J0IHsgSWd4SWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vcHVibGljX2FwaSc7XG5pbXBvcnQge1xuICAgIElneElucHV0R3JvdXBNb2R1bGUsXG4gICAgSWd4SW5wdXREaXJlY3RpdmUsXG4gICAgSWd4SW5wdXRHcm91cENvbXBvbmVudCxcbiAgICBJZ3hJbnB1dFN0YXRlLFxuICAgIElneExhYmVsRGlyZWN0aXZlXG59IGZyb20gJy4uL2lucHV0LWdyb3VwL3B1YmxpY19hcGknO1xuaW1wb3J0IHsgU3ViamVjdCwgZnJvbUV2ZW50LCBhbmltYXRpb25GcmFtZVNjaGVkdWxlciwgaW50ZXJ2YWwsIFN1YnNjcmlwdGlvbiwgbm9vcCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCB0YWtlVW50aWwsIHRocm90dGxlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSWd4T3ZlcmxheU91dGxldERpcmVjdGl2ZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvdG9nZ2xlL3RvZ2dsZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSWd4VGV4dFNlbGVjdGlvbk1vZHVsZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvdGV4dC1zZWxlY3Rpb24vdGV4dC1zZWxlY3Rpb24uZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gICAgT3ZlcmxheVNldHRpbmdzLFxuICAgIElneE92ZXJsYXlTZXJ2aWNlLFxuICAgIFBvc2l0aW9uU2V0dGluZ3MsXG4gICAgQWJzb2x1dGVTY3JvbGxTdHJhdGVneSxcbiAgICBBdXRvUG9zaXRpb25TdHJhdGVneSxcbiAgICBPdmVybGF5Q2FuY2VsYWJsZUV2ZW50QXJnc1xufSBmcm9tICcuLi9zZXJ2aWNlcy9wdWJsaWNfYXBpJztcbmltcG9ydCB7IERhdGVSYW5nZURlc2NyaXB0b3IgfSBmcm9tICcuLi9jb3JlL2RhdGVzL2RhdGVSYW5nZSc7XG5pbXBvcnQgeyBFZGl0b3JQcm92aWRlciB9IGZyb20gJy4uL2NvcmUvZWRpdC1wcm92aWRlcic7XG5pbXBvcnQgeyBJZ3hCdXR0b25Nb2R1bGUgfSBmcm9tICcuLi9kaXJlY3RpdmVzL2J1dHRvbi9idXR0b24uZGlyZWN0aXZlJztcbmltcG9ydCB7IElneFJpcHBsZU1vZHVsZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvcmlwcGxlL3JpcHBsZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSWd4TWFza01vZHVsZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvbWFzay9tYXNrLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1xuICAgIERhdGVQaWNrZXJVdGlsLFxuICAgIERhdGVTdGF0ZVxufSBmcm9tICcuL2RhdGUtcGlja2VyLnV0aWxzJztcbmltcG9ydCB7IERhdGVQaWNrZXJEaXNwbGF5VmFsdWVQaXBlLCBEYXRlUGlja2VySW5wdXRWYWx1ZVBpcGUgfSBmcm9tICcuL2RhdGUtcGlja2VyLnBpcGVzJztcbmltcG9ydCB7IElEYXRlUGlja2VyIH0gZnJvbSAnLi9kYXRlLXBpY2tlci5jb21tb24nO1xuaW1wb3J0IHsgS0VZUywgaXNJRSwgaXNFcXVhbCwgSUJhc2VFdmVudEFyZ3MsIG1rZW51bSwgSUJhc2VDYW5jZWxhYmxlQnJvd3NlckV2ZW50QXJncyB9IGZyb20gJy4uL2NvcmUvdXRpbHMnO1xuaW1wb3J0IHsgSWd4RGF0ZVBpY2tlclRlbXBsYXRlRGlyZWN0aXZlLCBJZ3hEYXRlUGlja2VyQWN0aW9uc0RpcmVjdGl2ZSB9IGZyb20gJy4vZGF0ZS1waWNrZXIuZGlyZWN0aXZlcyc7XG5pbXBvcnQgeyBJZ3hDYWxlbmRhckNvbnRhaW5lckNvbXBvbmVudCB9IGZyb20gJy4vY2FsZW5kYXItY29udGFpbmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJbnRlcmFjdGlvbk1vZGUgfSBmcm9tICcuLi9jb3JlL2VudW1zJztcbmltcG9ydCB7IGZhZGVJbiwgZmFkZU91dCB9IGZyb20gJy4uL2FuaW1hdGlvbnMvZmFkZSc7XG5pbXBvcnQgeyBEZXByZWNhdGVQcm9wZXJ0eSB9IGZyb20gJy4uL2NvcmUvZGVwcmVjYXRlRGVjb3JhdG9ycyc7XG5cbmxldCBORVhUX0lEID0gMDtcblxuLyoqXG4gKiBUaGlzIGludGVyZmFjZSBpcyB1c2VkIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgZGF0ZSBwaWNrZXIgcmVmZXJlbmNlIGFuZCBpdHMgY3VycmVudCB2YWx1ZVxuICogd2hlbiBvbkRpc2FibGVkRGF0ZSBldmVudCBpcyBmaXJlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRGF0ZVBpY2tlckRpc2FibGVkRGF0ZUV2ZW50QXJncyBleHRlbmRzIElCYXNlRXZlbnRBcmdzIHtcbiAgICBkYXRlUGlja2VyOiBJZ3hEYXRlUGlja2VyQ29tcG9uZW50O1xuICAgIGN1cnJlbnRWYWx1ZTogRGF0ZTtcbn1cblxuLyoqXG4gKiBUaGlzIGludGVyZmFjZSBpcyB1c2VkIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgZGF0ZSBwaWNrZXIgcmVmZXJlbmNlIGFuZCBpdHMgcHJldmlvdXNseSB2YWxpZCB2YWx1ZVxuICogd2hlbiBvblZhbGlkYXRpb25GYWlsZWQgZXZlbnQgaXMgZmlyZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSURhdGVQaWNrZXJWYWxpZGF0aW9uRmFpbGVkRXZlbnRBcmdzIGV4dGVuZHMgSUJhc2VFdmVudEFyZ3Mge1xuICAgIGRhdGVQaWNrZXI6IElneERhdGVQaWNrZXJDb21wb25lbnQ7XG4gICAgcHJldlZhbHVlOiBEYXRlO1xufVxuXG4vKipcbiAqIFRoaXMgaW50ZXJmYWNlIGlzIHVzZWQgdG8gY29uZmlndXJlIGNhbGVuZGFyIGZvcm1hdCB2aWV3IG9wdGlvbnMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUZvcm1hdFZpZXdzIHtcbiAgICBkYXk/OiBib29sZWFuO1xuICAgIG1vbnRoPzogYm9vbGVhbjtcbiAgICB5ZWFyPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBUaGlzIGludGVyZmFjZSBpcyB1c2VkIHRvIGNvbmZpZ3VyZSBjYWxlbmRhciBmb3JtYXQgb3B0aW9ucy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRm9ybWF0T3B0aW9ucyB7XG4gICAgZGF5Pzogc3RyaW5nO1xuICAgIG1vbnRoPzogc3RyaW5nO1xuICAgIHdlZWtkYXk/OiBzdHJpbmc7XG4gICAgeWVhcj86IHN0cmluZztcbn1cblxuLyoqXG4gKiBUaGlzIGVudW1lcmF0aW9uIGlzIHVzZWQgdG8gY29uZmlndXJlIHRoZSBkYXRlIHBpY2tlciB0byBvcGVyYXRlIHdpdGggcHJlLWRlZmluZWQgZm9ybWF0IG9wdGlvbiB1c2VkIGluIEFuZ3VsYXIgRGF0ZVBpcGUuXG4gKiAnaHR0cHM6Ly9hbmd1bGFyLmlvL2FwaS9jb21tb24vRGF0ZVBpcGUnXG4gKiAnc2hvcnREYXRlJzogZXF1aXZhbGVudCB0byAnTS9kL3l5JyAoNi8xNS8xNSkuXG4gKiAnbWVkaXVtRGF0ZSc6IGVxdWl2YWxlbnQgdG8gJ01NTSBkLCB5JyAoSnVuIDE1LCAyMDE1KS5cbiAqICdsb25nRGF0ZSc6IGVxdWl2YWxlbnQgdG8gJ01NTU0gZCwgeScgKEp1bmUgMTUsIDIwMTUpLlxuICogJ2Z1bGxEYXRlJzogZXF1aXZhbGVudCB0byAnRUVFRSwgTU1NTSBkLCB5JyAoTW9uZGF5LCBKdW5lIDE1LCAyMDE1KS5cbiAqL1xuZXhwb3J0IGNvbnN0IFByZWRlZmluZWRGb3JtYXRPcHRpb25zID0gbWtlbnVtKHtcbiAgICBTaG9ydERhdGU6ICdzaG9ydERhdGUnLFxuICAgIE1lZGl1bURhdGU6ICdtZWRpdW1EYXRlJyxcbiAgICBMb25nRGF0ZTogJ2xvbmdEYXRlJyxcbiAgICBGdWxsRGF0ZTogJ2Z1bGxEYXRlJ1xufSk7XG5leHBvcnQgdHlwZSBQcmVkZWZpbmVkRm9ybWF0T3B0aW9ucyA9ICh0eXBlb2YgUHJlZGVmaW5lZEZvcm1hdE9wdGlvbnMpW2tleW9mIHR5cGVvZiBQcmVkZWZpbmVkRm9ybWF0T3B0aW9uc107XG5cbi8qKlxuICogRGF0ZSBQaWNrZXIgZGlzcGxheXMgYSBwb3B1cCBjYWxlbmRhciB0aGF0IGxldHMgdXNlcnMgc2VsZWN0IGEgc2luZ2xlIGRhdGUuXG4gKlxuICogQGlneE1vZHVsZSBJZ3hEYXRlUGlja2VyTW9kdWxlXG4gKiBAaWd4VGhlbWUgaWd4LWNhbGVuZGFyLXRoZW1lLCBpZ3gtaWNvbi10aGVtZVxuICogQGlneEdyb3VwIFNjaGVkdWxpbmdcbiAqIEBpZ3hLZXl3b3JkcyAgZGF0ZXBpY2tlciwgY2FsZW5kYXIsIHNjaGVkdWxlLCBkYXRlXG4gKiBAZXhhbXBsZVxuICogYGBgaHRtbFxuICogPGlneC1kYXRlLXBpY2tlciBbKG5nTW9kZWwpXT1cInNlbGVjdGVkRGF0ZVwiPjwvaWd4LWRhdGUtcGlja2VyPlxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHByb3ZpZGVyczpcbiAgICAgICAgW3tcbiAgICAgICAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IElneERhdGVQaWNrZXJDb21wb25lbnQsXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IElneERhdGVQaWNrZXJDb21wb25lbnQsXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9XSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnaWd4LWRhdGUtcGlja2VyJyxcbiAgICB0ZW1wbGF0ZVVybDogJ2RhdGUtcGlja2VyLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZXM6IFtgXG4gICAgICAgIDpob3N0IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICB9XG4gICAgYF1cbn0pXG5leHBvcnQgY2xhc3MgSWd4RGF0ZVBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIElEYXRlUGlja2VyLCBDb250cm9sVmFsdWVBY2Nlc3NvcixcbiAgICBFZGl0b3JQcm92aWRlciwgT25Jbml0LCBBZnRlclZpZXdJbml0LCBBZnRlckNvbnRlbnRDaGVja2VkLCBPbkRlc3Ryb3ksIEFmdGVyVmlld0NoZWNrZWQge1xuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyB0aGUgYElneERhdGVQaWNrZXJDb21wb25lbnRgIGxhYmVsLlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGUgZGVmYXVsdCBsYWJlbCBpcyAnRGF0ZScuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1kYXRlLXBpY2tlciBbbGFiZWxdPVwiQ2FsZW5kYXJcIj48L2lneC1kYXRlLXBpY2tlcj5cbiAgICAgKiBgYGBcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgaWd4TGFiZWwgaW5zaWRlIHRoZSBkYXRlIHBpY2tlciB0byBjaGFuZ2UgdGhlIGxhYmVsOlxuICAgICAqIGBgYGBodG1sXG4gICAgICogPGlneC1kYXRlLXBpY2tlcj5cbiAgICAgKiAgICAgIDxsYWJlbCBpZ3hMYWJlbD5DdXN0b20gbGFiZWw8L2xhYmVsPlxuICAgICAqIDwvaWd4LWRhdGUtcGlja2VyPlxuICAgICAqIGBgYGBcbiAgICAgKiB0byBzZXQgYSBjdXN0b20gbGFiZWwuXG4gICAgICovXG4gICAgQERlcHJlY2F0ZVByb3BlcnR5KGBVc2UgaWd4TGFiZWwgaW5zaWRlIHRoZSBkYXRlIHBpY2tlciB0byBjaGFuZ2UgdGhlIGxhYmVsOlxuICAgIDxpZ3gtZGF0ZS1waWNrZXI+XG4gICAgICAgIDxsYWJlbCBpZ3hMYWJlbD5DdXN0b20gbGFiZWw8L2xhYmVsPlxuICAgIDwvaWd4LWRhdGUtcGlja2VyPiBgKVxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGdldCBsYWJlbCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFiZWw7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBsYWJlbCh2OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fbGFiZWwgPSB2O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgbGFiZWxJbnRlcm5hbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhYmVsO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHB1YmxpYyBnZXQgbGFiZWxUZW1wbGF0ZSgpOiBJZ3hMYWJlbERpcmVjdGl2ZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sYWJlbERpcmVjdGl2ZVVzZXJUZW1wbGF0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgdGhlIGBJZ3hEYXRlUGlja2VyQ29tcG9uZW50YCBsYWJlbCB2aXNpYmlsaXR5LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBCeSBkZWZhdWx0IHRoZSB2aXNpYmlsaXR5IGlzIHNldCB0byB0cnVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogPGlneC1kYXRlLXBpY2tlciBbbGFiZWxWaXNpYmlsaXR5XT1cImZhbHNlXCI+PC9pZ3gtZGF0ZS1waWNrZXI+XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgbGFiZWxWaXNpYmlsaXR5ID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyB0aGUgbG9jYWxlcy5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzIERlZmF1bHQgbG9jYWxlIGlzIGVuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZGF0ZS1waWNrZXIgbG9jYWxlPVwiamEtSlBcIiBbdmFsdWVdPVwiZGF0ZVwiPjwvaWd4LWRhdGUtcGlja2VyPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpIHB1YmxpYyBsb2NhbGUgPSAnZW4nO1xuXG4gICAgLyoqXG4gICAgICogR2V0cy9TZXRzIHRoZSBkZWZhdWx0IHRlbXBsYXRlIGVkaXRvcidzIHRhYmluZGV4LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1kYXRlLXBpY2tlciBlZGl0b3JUYWJJbmRleD1cIjFcIj48L2lneC1kYXRlLXBpY2tlcj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKSBwdWJsaWMgZWRpdG9yVGFiSW5kZXg6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyBvbiB3aGljaCBkYXkgdGhlIHdlZWsgc3RhcnRzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1kYXRlLXBpY2tlciBbd2Vla1N0YXJ0XT1cIldFRUtEQVlTLkZSSURBWVwiIGNhbmNlbEJ1dHRvbkxhYmVsPVwiY2FuY2VsXCIgdG9kYXlCdXR0b25MYWJlbD1cInRvZGF5XCI+PC9pZ3gtZGF0ZS1waWNrZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KCkgcHVibGljIHdlZWtTdGFydDogV0VFS0RBWVMgfCBudW1iZXIgPSBXRUVLREFZUy5TVU5EQVk7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBmb3JtYXQgb3B0aW9ucyBvZiB0aGUgYElneERhdGVQaWNrZXJDb21wb25lbnRgLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGZvcm1hdE9wdGlvbnMgPSB0aGlzLmRhdGVQaWNrZXIuZm9ybWF0T3B0aW9ucztcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgZm9ybWF0T3B0aW9ucygpOiBJRm9ybWF0T3B0aW9ucyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb3JtYXRPcHRpb25zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGZvcm1hdCBvcHRpb25zIG9mIHRoZSBgSWd4RGF0ZVBpY2tlckNvbXBvbmVudGAuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmRhdGVQaWNrZXIuZm9ybWF0T3B0aW9ucyA9IHsgIGRheTogXCJudW1lcmljXCIsICBtb250aDogXCJsb25nXCIsIHdlZWtkYXk6IFwibG9uZ1wiLCB5ZWFyOiBcIm51bWVyaWNcIn07XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIHNldCBmb3JtYXRPcHRpb25zKGZvcm1hdE9wdGlvbnM6IElGb3JtYXRPcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX2Zvcm1hdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHRoaXMuX2Zvcm1hdE9wdGlvbnMsIGZvcm1hdE9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyB3aGV0aGVyIHRoZSBpbmFjdGl2ZSBkYXRlcyB3aWxsIGJlIGhpZGRlbi5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogQXBsbGllcyB0byBkYXRlcyB0aGF0IGFyZSBvdXQgb2YgdGhlIGN1cnJlbnQgbW9udGguXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZGF0ZS1waWNrZXIgW2hpZGVPdXRzaWRlRGF5c109XCJ0cnVlXCI+PC9pZ3gtZGF0ZS1waWNrZXI+XG4gICAgICogYGBgXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGhpZGVPdXRzaWRlRGF5cyA9IHRoaXMuZGF0ZVBpY2tlci5oaWRlT3V0c2lkZURheXM7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaGlkZU91dHNpZGVEYXlzOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogR2V0cy9TZXRzIHRoZSBudW1iZXIgb2YgbW9udGggdmlld3MgZGlzcGxheWVkLlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGAxYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWRhdGUtcGlja2VyIFttb250aHNWaWV3TnVtYmVyXT1cIjJcIj48L2lneC1kYXRlLXBpY2tlcj5cbiAgICAgKiBgYGBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgbW9udGhWaWV3c0Rpc3BsYXllZCA9IHRoaXMuZGF0ZVBpY2tlci5tb250aHNWaWV3TnVtYmVyO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIG1vbnRoc1ZpZXdOdW1iZXIgPSAxO1xuXG4gICAgLyoqXG4gICAgICogU2hvdy9oaWRlIHdlZWsgbnVtYmVyc1xuICAgICAqXG4gICAgICogQGV4bXBhbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1kYXRlLXBpY2tlciBbc2hvd1dlZWtOdW1iZXJzXT1cInRydWVcIj48L2lneC1kYXRlLXBpY2tlcj5cbiAgICAgKiBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHNob3dXZWVrTnVtYmVyczogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyB0aGUgZGF0ZSBkaXNwbGF5IGZvcm1hdCBvZiB0aGUgYElneERhdGVQaWNrZXJDb21wb25lbnRgIGluIGRyb3Bkb3duIG1vZGUuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgZm9ybWF0ID0gdGhpcy5kYXRlUGlja2VyLmZvcm1hdDtcbiAgICAgKiB0aGlzLmRhdGVQaWNrZXIuZm9ybWF0ID0gJ3l5eXktTS1kJztcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgZm9ybWF0KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAodGhpcy5fZm9ybWF0ID09PSB1bmRlZmluZWQpID8gUHJlZGVmaW5lZEZvcm1hdE9wdGlvbnMuU2hvcnREYXRlIDogdGhpcy5fZm9ybWF0O1xuICAgIH1cbiAgICBwdWJsaWMgc2V0IGZvcm1hdChmb3JtYXQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9mb3JtYXQgPSBmb3JtYXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cy9TZXRzIHRoZSBkYXRlIG1hc2sgb2YgdGhlIGBJZ3hEYXRlUGlja2VyQ29tcG9uZW50YCB3aGVuIGluIGVkaXRhYmxlIGRyb3Bkb3duIG1vZGUuXG4gICAgICpcbiAgICAgKiAgQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IG1hc2sgPSB0aGlzLmRhdGVQaWNrZXIubWFzaztcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBtYXNrOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgdGhlIGZvcm1hdCB2aWV3cyBvZiB0aGUgYElneERhdGVQaWNrZXJDb21wb25lbnRgLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGZvcm1hdFZpZXdzID0gdGhpcy5kYXRlUGlja2VyLmZvcm1hdFZpZXdzO1xuICAgICAqICB0aGlzLmRhdGVQaWNrZXIuZm9ybWF0Vmlld3MgPSB7ZGF5OmZhbHNlLCBtb250aDogZmFsc2UsIHllYXI6ZmFsc2V9O1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGdldCBmb3JtYXRWaWV3cygpOiBJRm9ybWF0Vmlld3Mge1xuICAgICAgICByZXR1cm4gdGhpcy5fZm9ybWF0Vmlld3M7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBmb3JtYXRWaWV3cyhmb3JtYXRWaWV3czogSUZvcm1hdFZpZXdzKSB7XG4gICAgICAgIHRoaXMuX2Zvcm1hdFZpZXdzID0gT2JqZWN0LmFzc2lnbih0aGlzLl9mb3JtYXRWaWV3cywgZm9ybWF0Vmlld3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyB0aGUgZGlzYWJsZWQgZGF0ZXMgZGVzY3JpcHRvcnMuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgZGlzYWJsZWREYXRlcyA9IHRoaXMuZGF0ZXBpY2tlci5kaXNhYmxlZERhdGVzO1xuICAgICAqIHRoaXMuZGF0ZVBpY2tlci5kaXNhYmxlZERhdGVzID0gWyB7dHlwZTogRGF0ZVJhbmdlVHlwZS5XZWVrZW5kc30sIC4uLl07XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IGRpc2FibGVkRGF0ZXMoKTogRGF0ZVJhbmdlRGVzY3JpcHRvcltdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkRGF0ZXM7XG4gICAgfVxuICAgIHB1YmxpYyBzZXQgZGlzYWJsZWREYXRlcyh2YWx1ZTogRGF0ZVJhbmdlRGVzY3JpcHRvcltdKSB7XG4gICAgICAgIHRoaXMuX2Rpc2FibGVkRGF0ZXMgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fb25WYWxpZGF0b3JDaGFuZ2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgdGhlIHNwZWNpYWwgZGF0ZXMgZGVzY3JpcHRvcnMuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgc3BlY2lhbERhdGVzID0gdGhpcy5kYXRlcGlja2VyLnNwZWNpYWxEYXRlcztcbiAgICAgKiB0aGlzLmRhdGVQaWNrZXIuc3BlY2lhbERhdGVzID0gWyB7dHlwZTogRGF0ZVJhbmdlVHlwZS5XZWVrZW5kc30sIC4uLiBdO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGdldCBzcGVjaWFsRGF0ZXMoKTogRGF0ZVJhbmdlRGVzY3JpcHRvcltdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NwZWNpYWxEYXRlcztcbiAgICB9XG4gICAgcHVibGljIHNldCBzcGVjaWFsRGF0ZXModmFsdWU6IERhdGVSYW5nZURlc2NyaXB0b3JbXSkge1xuICAgICAgICB0aGlzLl9zcGVjaWFsRGF0ZXMgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgdGhlIG1vZGFsIG92ZXJsYXkgc2V0dGluZ3MuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IG1vZGFsT3ZlcmxheVNldHRpbmdzKCk6IE92ZXJsYXlTZXR0aW5ncyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tb2RhbE92ZXJsYXk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBtb2RhbE92ZXJsYXlTZXR0aW5ncyh2YWx1ZTogT3ZlcmxheVNldHRpbmdzKSB7XG4gICAgICAgIHRoaXMuX21vZGFsT3ZlcmxheSA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyB0aGUgZHJvcC1kb3duIG92ZXJsYXkgc2V0dGluZ3MuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IGRyb3BEb3duT3ZlcmxheVNldHRpbmdzKCk6IE92ZXJsYXlTZXR0aW5ncyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kcm9wRG93bk92ZXJsYXlTZXR0aW5ncyB8fCB0aGlzLl9kZWZhdWx0RHJvcERvd25PdmVybGF5U2V0dGluZ3M7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBkcm9wRG93bk92ZXJsYXlTZXR0aW5ncyh2YWx1ZTogT3ZlcmxheVNldHRpbmdzKSB7XG4gICAgICAgIHRoaXMuX2Ryb3BEb3duT3ZlcmxheVNldHRpbmdzID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZm9ybWF0dGVkIGRhdGUgd2hlbiBgSWd4RGF0ZVBpY2tlckNvbXBvbmVudGAgaXMgaW4gZGlhbG9nIG1vZGUuXG4gICAgICpcbiAgICAgKiAgQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IHNlbGVjdGVkRGF0ZSA9IHRoaXMuZGF0ZVBpY2tlci5kaXNwbGF5RGF0YTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGRpc3BsYXlEYXRhKCk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY3VzdG9tRm9ybWF0Q2hlY2tlcih0aGlzLmZvcm1hdHRlciwgdGhpcy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHB1YmxpYyBnZXQgdHJhbnNmb3JtZWREYXRlKCk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLl92YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fdHJhbnNmb3JtZWREYXRlID0gKHRoaXMuX2lzSW5FZGl0TW9kZSkgPyB0aGlzLl9nZXRFZGl0b3JEYXRlKHRoaXMuX3ZhbHVlKSA6IHRoaXMuX2dldERpc3BsYXlEYXRlKHRoaXMuX3ZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuaXNFbXB0eSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdHJhbnNmb3JtZWREYXRlID0gKHRoaXMuX2lzSW5FZGl0TW9kZSkgPyBEYXRlUGlja2VyVXRpbC5tYXNrVG9Qcm9tcHRDaGFycyh0aGlzLmlucHV0TWFzaykgOiAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNmb3JtZWREYXRlO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHB1YmxpYyBzZXQgdHJhbnNmb3JtZWREYXRlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zZm9ybWVkRGF0ZSA9IHZhbHVlO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5wdXQgZ3JvdXAgdGVtcGxhdGUuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgdGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlKCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IHRlbXBsYXRlKCk6IFRlbXBsYXRlUmVmPGFueT4ge1xuICAgICAgICBpZiAodGhpcy5kYXRlUGlja2VyVGVtcGxhdGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGVQaWNrZXJUZW1wbGF0ZURpcmVjdGl2ZS50ZW1wbGF0ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHRoaXMubW9kZSA9PT0gSW50ZXJhY3Rpb25Nb2RlLkRpYWxvZykgPyB0aGlzLnJlYWRPbmx5RGF0ZVBpY2tlclRlbXBsYXRlIDogdGhpcy5lZGl0YWJsZURhdGVQaWNrZXJUZW1wbGF0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjb250ZXh0IHBhc3NlZCB0byB0aGUgaW5wdXQgZ3JvdXAgdGVtcGxhdGUuXG4gICAgICovXG4gICAgZ2V0IGNvbnRleHQoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaXNhYmxlZDogdGhpcy5kaXNhYmxlZCxcbiAgICAgICAgICAgIGRpc2FibGVkRGF0ZXM6IHRoaXMuZGlzYWJsZWREYXRlcyxcbiAgICAgICAgICAgIGRpc3BsYXlEYXRhOiB0aGlzLmRpc3BsYXlEYXRhLFxuICAgICAgICAgICAgZm9ybWF0OiB0aGlzLmZvcm1hdCxcbiAgICAgICAgICAgIGlzU3Bpbkxvb3A6IHRoaXMuaXNTcGluTG9vcCxcbiAgICAgICAgICAgIGxhYmVsVmlzaWJpbGl0eTogdGhpcy5sYWJlbFZpc2liaWxpdHksXG4gICAgICAgICAgICBsb2NhbGU6IHRoaXMubG9jYWxlLFxuICAgICAgICAgICAgbWFzazogdGhpcy5tYXNrLFxuICAgICAgICAgICAgbW9kZTogdGhpcy5tb2RlLFxuICAgICAgICAgICAgc3BlY2lhbERhdGVzOiB0aGlzLnNwZWNpYWxEYXRlcyxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgb3BlbkRpYWxvZzogKCkgPT4gdGhpcy5vcGVuRGlhbG9nKClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCByZXF1aXJlZCgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXMuX25nQ29udHJvbCAmJiB0aGlzLl9uZ0NvbnRyb2wuY29udHJvbCAmJiB0aGlzLl9uZ0NvbnRyb2wuY29udHJvbC52YWxpZGF0b3IpIHtcbiAgICAgICAgICAgIC8vIFJ1biB0aGUgdmFsaWRhdGlvbiB3aXRoIGVtcHR5IG9iamVjdCB0byBjaGVjayBpZiByZXF1aXJlZCBpcyBlbmFibGVkLlxuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSB0aGlzLl9uZ0NvbnRyb2wuY29udHJvbC52YWxpZGF0b3Ioe30gYXMgQWJzdHJhY3RDb250cm9sKTtcbiAgICAgICAgICAgIHJldHVybiBlcnJvciAmJiBlcnJvci5yZXF1aXJlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyB0aGUgc2VsZWN0ZWQgZGF0ZS5cbiAgICAgKlxuICAgICAqICBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWRhdGUtcGlja2VyIFt2YWx1ZV09XCJkYXRlXCI+PC9pZ3gtZGF0ZS1waWNrZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IHZhbHVlKCk6IERhdGUge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCB2YWx1ZShkYXRlOiBEYXRlKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gZGF0ZTtcbiAgICAgICAgdGhpcy5fb25DaGFuZ2VDYWxsYmFjayhkYXRlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgdGhlIHZhbHVlIG9mIGBpZGAgYXR0cmlidXRlLlxuICAgICAqXG4gICAgICogQHJlbWFya3MgSWYgbm90IHByb3ZpZGVkIGl0IHdpbGwgYmUgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1kYXRlLXBpY2tlciBbaWRdPVwiJ2lneC1kYXRlLXBpY2tlci0zJ1wiIGNhbmNlbEJ1dHRvbkxhYmVsPVwiY2FuY2VsXCIgdG9kYXlCdXR0b25MYWJlbD1cInRvZGF5XCI+PC9pZ3gtZGF0ZS1waWNrZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmlkJylcbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBpZCA9IGBpZ3gtZGF0ZS1waWNrZXItJHtORVhUX0lEKyt9YDtcblxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyBhIGN1c3RvbSBmb3JtYXR0ZXIgZnVuY3Rpb24gb24gdGhlIHNlbGVjdGVkIG9yIHBhc3NlZCBkYXRlLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1kYXRlLXBpY2tlciBbdmFsdWVdPVwiZGF0ZVwiIFtmb3JtYXR0ZXJdPVwiZm9ybWF0dGVyXCI+PC9pZ3gtZGF0ZS1waWNrZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZm9ybWF0dGVyOiAodmFsOiBEYXRlKSA9PiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzL0Rpc2FibGVzIHRoZSBgSWd4RGF0ZVBpY2tlckNvbXBvbmVudGAuXG4gICAgICpcbiAgICAgKiAgQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1kYXRlLXBpY2tlciBbZGlzYWJsZWRdPVwiJ3RydWUnXCIgY2FuY2VsQnV0dG9uTGFiZWw9XCJjYW5jZWxcIiB0b2RheUJ1dHRvbkxhYmVsPVwidG9kYXlcIj48L2lneC1kYXRlLXBpY2tlcj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBkaXNhYmxlZDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyB0aGUgb3JpZW50YXRpb24gb2YgdGhlIGBJZ3hEYXRlUGlja2VyQ29tcG9uZW50YCBoZWFkZXIuXG4gICAgICpcbiAgICAgKiAgQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1kYXRlLXBpY2tlciBbdmVydGljYWxdPVwiJ3RydWUnXCIgY2FuY2VsQnV0dG9uTGFiZWw9XCJjYW5jZWxcIiB0b2RheUJ1dHRvbkxhYmVsPVwidG9kYXlcIj48L2lneC1kYXRlLXBpY2tlcj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyB2ZXJ0aWNhbCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogR2V0cy9TZXRzIHRoZSB0b2RheSBidXR0b24ncyBsYWJlbC5cbiAgICAgKlxuICAgICAqICBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWRhdGUtcGlja2VyIGNhbmNlbEJ1dHRvbkxhYmVsPVwiY2FuY2VsXCIgdG9kYXlCdXR0b25MYWJlbD1cIlRvbW9ycm93XCI+PC9pZ3gtZGF0ZS1waWNrZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgdG9kYXlCdXR0b25MYWJlbDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogKkdldHMvU2V0cyB0aGUgY2FuY2VsIGJ1dHRvbidzIGxhYmVsLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1kYXRlLXBpY2tlciBjYW5jZWxCdXR0b25MYWJlbD1cIkNsb3NlXCIgdG9kYXlCdXR0b25MYWJlbD1cIlRvZGF5XCI+PC9pZ3gtZGF0ZS1waWNrZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgY2FuY2VsQnV0dG9uTGFiZWw6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyB0aGUgaW50ZXJhY3Rpb24gbW9kZSAtIGRpYWxvZyBvciBkcm9wIGRvd24uXG4gICAgICpcbiAgICAgKiAgQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1kYXRlLXBpY2tlciBtb2RlPVwiZHJvcGRvd25cIj48L2lneC1kYXRlLXBpY2tlcj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBtb2RlOiBJbnRlcmFjdGlvbk1vZGUgPSBJbnRlcmFjdGlvbk1vZGUuRGlhbG9nO1xuXG4gICAgLyoqXG4gICAgICogR2V0cy9TZXRzIHdoZXRoZXIgZGF0ZSBzaG91bGQgc3BpbiBjb250aW51b3VzbHkgb3Igc3RvcCB3aGVuIG1pbi9tYXggaXMgcmVhY2hlZC5cbiAgICAgKlxuICAgICAqICBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWRhdGUtcGlja2VyIFtpc1NwaW5Mb29wXT1cImZhbHNlXCI+PC9pZ3gtZGF0ZS1waWNrZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaXNTcGluTG9vcCA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgdGhlIGNvbnRhaW5lciB1c2VkIGZvciB0aGUgcG9wdXAgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogIGBvdXRsZXRgIGlzIGFuIGluc3RhbmNlIG9mIGBJZ3hPdmVybGF5T3V0bGV0RGlyZWN0aXZlYCBvciBhbiBgRWxlbWVudFJlZmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGRpdiBpZ3hPdmVybGF5T3V0bGV0ICNvdXRsZXQ9XCJvdmVybGF5LW91dGxldFwiPjwvZGl2PlxuICAgICAqIC8vLi5cbiAgICAgKiA8aWd4LWRhdGUtcGlja2VyIFtvdXRsZXRdPVwib3V0bGV0XCI+PC9pZ3gtZGF0ZS1waWNrZXI+XG4gICAgICogLy8uLlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIG91dGxldDogSWd4T3ZlcmxheU91dGxldERpcmVjdGl2ZSB8IEVsZW1lbnRSZWY7XG5cbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gdGhlIGBJZ3hEYXRlUGlja2VyQ29tcG9uZW50YCBjYWxlbmRhciBpcyBvcGVuZWQuXG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIG9uT3BlbmVkID0gbmV3IEV2ZW50RW1pdHRlcjxJZ3hEYXRlUGlja2VyQ29tcG9uZW50PigpO1xuXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCBhZnRlciB0aGUgYElneERhdGVQaWNrZXJDb21wb25lbnRgIGlzIGNsb3NlZC5cbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgb25DbG9zZWQgPSBuZXcgRXZlbnRFbWl0dGVyPElneERhdGVQaWNrZXJDb21wb25lbnQ+KCk7XG5cbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gdGhlIGBJZ3hEYXRlUGlja2VyQ29tcG9uZW50YCBpcyBiZWluZyBjbG9zZWQuXG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIG9uQ2xvc2luZyA9IG5ldyBFdmVudEVtaXR0ZXI8SUJhc2VDYW5jZWxhYmxlQnJvd3NlckV2ZW50QXJncz4oKTtcblxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBzZWxlY3Rpb24gaXMgbWFkZSBpbiB0aGUgY2FsZW5kYXIuXG4gICAgICpcbiAgICAgKiAgQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1kYXRlLXBpY2tlciAob25TZWxlY3Rpb24pPVwic2VsZWN0aW9uKCRldmVudClcIj48L2lneC1kYXRlLXBpY2tlcj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgb25TZWxlY3Rpb24gPSBuZXcgRXZlbnRFbWl0dGVyPERhdGU+KCk7XG5cbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gZGF0ZSBwaWNrZXIgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZGF0ZS1waWNrZXIgKHZhbHVlQ2hhbmdlKT1cInZhbHVlQ2hhbmdlZCgkZXZlbnQpXCIgbW9kZT1cImRyb3Bkb3duXCI+PC9pZ3gtZGF0ZS1waWNrZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIHZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxEYXRlPigpO1xuXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIHRoZSB1c2VyIHR5cGVzL3NwaW5zIHRvIGEgZGlzYWJsZWQgZGF0ZSBpbiB0aGUgZGF0ZS1waWNrZXIgZWRpdG9yLlxuICAgICAqXG4gICAgICogIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZGF0ZS1waWNrZXIgKG9uRGlzYWJsZWREYXRlKT1cIm9uRGlzYWJsZWREYXRlKCRldmVudClcIj48L2lneC1kYXRlLXBpY2tlcj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgb25EaXNhYmxlZERhdGUgPSBuZXcgRXZlbnRFbWl0dGVyPElEYXRlUGlja2VyRGlzYWJsZWREYXRlRXZlbnRBcmdzPigpO1xuXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIHRoZSB1c2VyIHR5cGVzL3NwaW5zIGludmFsaWQgZGF0ZSBpbiB0aGUgZGF0ZS1waWNrZXIgZWRpdG9yLlxuICAgICAqXG4gICAgICogIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZGF0ZS1waWNrZXIgKG9uVmFsaWRhdGlvbkZhaWxlZCk9XCJvblZhbGlkYXRpb25GYWlsZWQoJGV2ZW50KVwiPjwvaWd4LWRhdGUtcGlja2VyPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvblZhbGlkYXRpb25GYWlsZWQgPSBuZXcgRXZlbnRFbWl0dGVyPElEYXRlUGlja2VyVmFsaWRhdGlvbkZhaWxlZEV2ZW50QXJncz4oKTtcblxuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIEBDb250ZW50Q2hpbGQoSWd4TGFiZWxEaXJlY3RpdmUpXG4gICAgcHVibGljIF9sYWJlbERpcmVjdGl2ZVVzZXJUZW1wbGF0ZTogSWd4TGFiZWxEaXJlY3RpdmU7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQENvbnRlbnRDaGlsZChJZ3hDYWxlbmRhckhlYWRlclRlbXBsYXRlRGlyZWN0aXZlLCB7IHJlYWQ6IElneENhbGVuZGFySGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUgfSlcbiAgICBwdWJsaWMgaGVhZGVyVGVtcGxhdGU6IElneENhbGVuZGFySGVhZGVyVGVtcGxhdGVEaXJlY3RpdmU7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQENvbnRlbnRDaGlsZChJZ3hDYWxlbmRhclN1YmhlYWRlclRlbXBsYXRlRGlyZWN0aXZlLCB7IHJlYWQ6IElneENhbGVuZGFyU3ViaGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUgfSlcbiAgICBwdWJsaWMgc3ViaGVhZGVyVGVtcGxhdGU6IElneENhbGVuZGFyU3ViaGVhZGVyVGVtcGxhdGVEaXJlY3RpdmU7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQENvbnRlbnRDaGlsZChJZ3hEYXRlUGlja2VyQWN0aW9uc0RpcmVjdGl2ZSwgeyByZWFkOiBJZ3hEYXRlUGlja2VyQWN0aW9uc0RpcmVjdGl2ZSB9KVxuICAgIHB1YmxpYyBkYXRlUGlja2VyQWN0aW9uc0RpcmVjdGl2ZTogSWd4RGF0ZVBpY2tlckFjdGlvbnNEaXJlY3RpdmU7XG5cbiAgICAvKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBAVmlld0NoaWxkKCdyZWFkT25seURhdGVQaWNrZXJUZW1wbGF0ZScsIHsgcmVhZDogVGVtcGxhdGVSZWYsIHN0YXRpYzogdHJ1ZSB9KVxuICAgIHByb3RlY3RlZCByZWFkT25seURhdGVQaWNrZXJUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIC8qXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGQoJ2VkaXRhYmxlRGF0ZVBpY2tlclRlbXBsYXRlJywgeyByZWFkOiBUZW1wbGF0ZVJlZiwgc3RhdGljOiB0cnVlIH0pXG4gICAgcHJvdGVjdGVkIGVkaXRhYmxlRGF0ZVBpY2tlclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgLypcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGQoSWd4SW5wdXRHcm91cENvbXBvbmVudClcbiAgICBwcm90ZWN0ZWQgX2lucHV0R3JvdXA6IElneElucHV0R3JvdXBDb21wb25lbnQ7XG5cbiAgICBAQ29udGVudENoaWxkKElneElucHV0R3JvdXBDb21wb25lbnQpXG4gICAgcHJvdGVjdGVkIF9pbnB1dEdyb3VwVXNlclRlbXBsYXRlOiBJZ3hJbnB1dEdyb3VwQ29tcG9uZW50O1xuXG4gICAgQENvbnRlbnRDaGlsZChJZ3hJbnB1dERpcmVjdGl2ZSwgeyByZWFkOiBFbGVtZW50UmVmIH0pXG4gICAgcHJvdGVjdGVkIF9pbnB1dFVzZXJUZW1wbGF0ZUVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG5cbiAgICBAVmlld0NoaWxkKElneExhYmVsRGlyZWN0aXZlKVxuICAgIHByb3RlY3RlZCBfbGFiZWxEaXJlY3RpdmU6IElneExhYmVsRGlyZWN0aXZlO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBDb250ZW50Q2hpbGQoSWd4RGF0ZVBpY2tlclRlbXBsYXRlRGlyZWN0aXZlLCB7IHJlYWQ6IElneERhdGVQaWNrZXJUZW1wbGF0ZURpcmVjdGl2ZSB9KVxuICAgIHByb3RlY3RlZCBkYXRlUGlja2VyVGVtcGxhdGVEaXJlY3RpdmU6IElneERhdGVQaWNrZXJUZW1wbGF0ZURpcmVjdGl2ZTtcblxuICAgIEBWaWV3Q2hpbGQoSWd4SW5wdXREaXJlY3RpdmUsIHsgcmVhZDogRWxlbWVudFJlZiB9KVxuICAgIHByaXZhdGUgX2lucHV0RWxlbWVudFJlZjogRWxlbWVudFJlZjtcblxuICAgIEBWaWV3Q2hpbGQoSWd4SW5wdXREaXJlY3RpdmUpXG4gICAgcHJpdmF0ZSBfaW5wdXREaXJlY3RpdmU6IElneElucHV0RGlyZWN0aXZlO1xuXG4gICAgQENvbnRlbnRDaGlsZHJlbihJZ3hJbnB1dERpcmVjdGl2ZSwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KVxuICAgIHByaXZhdGUgX2lucHV0RGlyZWN0aXZlVXNlclRlbXBsYXRlczogUXVlcnlMaXN0PElneElucHV0RGlyZWN0aXZlPjtcblxuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHB1YmxpYyBjYWxlbmRhcjogSWd4Q2FsZW5kYXJDb21wb25lbnQ7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcHVibGljIGhhc0hlYWRlciA9IHRydWU7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcHVibGljIGNvbGxhcHNlZCA9IHRydWU7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcHVibGljIGRpc3BsYXlWYWx1ZVBpcGUgPSBuZXcgRGF0ZVBpY2tlckRpc3BsYXlWYWx1ZVBpcGUodGhpcyk7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcHVibGljIGlucHV0VmFsdWVQaXBlID0gbmV3IERhdGVQaWNrZXJJbnB1dFZhbHVlUGlwZSh0aGlzKTtcbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgZGF0ZUZvcm1hdFBhcnRzID0gW107XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcHVibGljIHJhd0RhdGVTdHJpbmc6IHN0cmluZztcbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgaW5wdXRNYXNrOiBzdHJpbmc7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcHVibGljIGlzRW1wdHkgPSB0cnVlO1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHB1YmxpYyBpbnZhbGlkRGF0ZSA9ICcnO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBzcGluRGVsdGEgPSAxO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZGVmYXVsdExvY2FsZSA9ICdlbic7XG5cbiAgICBwcml2YXRlIF9mb3JtYXRPcHRpb25zID0ge1xuICAgICAgICBkYXk6ICdudW1lcmljJyxcbiAgICAgICAgbW9udGg6ICdzaG9ydCcsXG4gICAgICAgIHdlZWtkYXk6ICdzaG9ydCcsXG4gICAgICAgIHllYXI6ICdudW1lcmljJ1xuICAgIH07XG4gICAgcHJpdmF0ZSBfZm9ybWF0Vmlld3MgPSB7XG4gICAgICAgIGRheTogZmFsc2UsXG4gICAgICAgIG1vbnRoOiB0cnVlLFxuICAgICAgICB5ZWFyOiBmYWxzZVxuICAgIH07XG4gICAgcHJpdmF0ZSBfZGVzdHJveSQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuICAgIHByaXZhdGUgX3N0YXR1c0NoYW5nZXMkOiBTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBfdGVtcGxhdGVJbnB1dEJsdXIkOiBTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBfY29tcG9uZW50SUQ6IHN0cmluZztcbiAgICBwcml2YXRlIF9mb3JtYXQ6IHN0cmluZztcbiAgICBwcml2YXRlIF92YWx1ZTogRGF0ZTtcbiAgICBwcml2YXRlIF9pc0luRWRpdE1vZGU6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfZGlzYWJsZWREYXRlczogRGF0ZVJhbmdlRGVzY3JpcHRvcltdID0gbnVsbDtcbiAgICBwcml2YXRlIF9zcGVjaWFsRGF0ZXM6IERhdGVSYW5nZURlc2NyaXB0b3JbXSA9IG51bGw7XG4gICAgcHJpdmF0ZSBfbW9kYWxPdmVybGF5OiBPdmVybGF5U2V0dGluZ3M7XG4gICAgcHJpdmF0ZSBfZHJvcERvd25PdmVybGF5U2V0dGluZ3M6IE92ZXJsYXlTZXR0aW5ncztcbiAgICBwcml2YXRlIF9wb3NpdGlvblNldHRpbmdzOiBQb3NpdGlvblNldHRpbmdzO1xuICAgIHByaXZhdGUgX2RlZmF1bHREcm9wRG93bk92ZXJsYXlTZXR0aW5nczogT3ZlcmxheVNldHRpbmdzO1xuICAgIHByaXZhdGUgX21vZGFsT3ZlcmxheVNldHRpbmdzOiBPdmVybGF5U2V0dGluZ3M7XG4gICAgcHJpdmF0ZSBfdHJhbnNmb3JtZWREYXRlO1xuICAgIHByaXZhdGUgX29uT3BlbiA9IG5ldyBFdmVudEVtaXR0ZXI8SWd4RGF0ZVBpY2tlckNvbXBvbmVudD4oKTtcbiAgICBwcml2YXRlIF9vbkNsb3NlID0gbmV3IEV2ZW50RW1pdHRlcjxJZ3hEYXRlUGlja2VyQ29tcG9uZW50PigpO1xuICAgIHByaXZhdGUgX25nQ29udHJvbDogTmdDb250cm9sID0gbnVsbDtcbiAgICBwcml2YXRlIF9sYWJlbCA9ICdEYXRlJztcblxuICAgIC8vI3JlZ2lvbiBDb250cm9sVmFsdWVBY2Nlc3NvclxuXG4gICAgcHJpdmF0ZSBfb25DaGFuZ2VDYWxsYmFjazogKF86IERhdGUpID0+IHZvaWQgPSBub29wO1xuICAgIHByaXZhdGUgX29uVG91Y2hlZENhbGxiYWNrOiAoKSA9PiB2b2lkID0gbm9vcDtcbiAgICBwcml2YXRlIF9vblZhbGlkYXRvckNoYW5nZTogKCkgPT4gdm9pZCA9IG5vb3A7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KFxuICAgICAgICBJZ3hPdmVybGF5U2VydmljZSkgcHJpdmF0ZSBfb3ZlcmxheVNlcnZpY2U6IElneE92ZXJsYXlTZXJ2aWNlLFxuICAgICAgICBwdWJsaWMgZWxlbWVudDogRWxlbWVudFJlZixcbiAgICAgICAgcHJpdmF0ZSBfY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgcHJpdmF0ZSBfbW9kdWxlUmVmOiBOZ01vZHVsZVJlZjxhbnk+LFxuICAgICAgICBwcml2YXRlIF9pbmplY3RvcjogSW5qZWN0b3IsXG4gICAgICAgIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5zcGFjZWJhcicsIFsnJGV2ZW50J10pXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5zcGFjZScsIFsnJGV2ZW50J10pXG4gICAgcHVibGljIG9uU3BhY2VDbGljayhldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICB0aGlzLm9wZW5EaWFsb2coKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgd3JpdGVWYWx1ZSh2YWx1ZTogRGF0ZSkge1xuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgICAgICAvLyBUT0RPOiBkbyB3ZSBuZWVkIG5leHQgY2FsbFxuICAgICAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcHVibGljIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBEYXRlKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sgPSBmbjtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb25Ub3VjaGVkQ2FsbGJhY2sgPSBmbjtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHB1YmxpYyByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKGZuOiBhbnkpIHtcbiAgICAgICAgdGhpcy5fb25WYWxpZGF0b3JDaGFuZ2UgPSBmbjtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgdmFsaWRhdGUoKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwge1xuICAgICAgICBpZiAoISF0aGlzLnZhbHVlICYmIHRoaXMuZGlzYWJsZWREYXRlcyAmJiBpc0RhdGVJblJhbmdlcyh0aGlzLnZhbHVlLCB0aGlzLmRpc2FibGVkRGF0ZXMpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBkYXRlSXNEaXNhYmxlZDogdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgcHVibGljIGdldEVkaXRFbGVtZW50KCkge1xuICAgICAgICBjb25zdCBpbnB1dERpcmVjdGl2ZUVsZW1lbnRSZWYgPSB0aGlzLl9pbnB1dEVsZW1lbnRSZWYgfHwgdGhpcy5faW5wdXRVc2VyVGVtcGxhdGVFbGVtZW50UmVmO1xuICAgICAgICByZXR1cm4gKGlucHV0RGlyZWN0aXZlRWxlbWVudFJlZikgPyBpbnB1dERpcmVjdGl2ZUVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCA6IG51bGw7XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcHVibGljIGdldCBpbnB1dEdyb3VwRWxlbWVudCgpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLmlucHV0R3JvdXA/LmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgZ2V0IGlucHV0R3JvdXAoKTogSWd4SW5wdXRHcm91cENvbXBvbmVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnB1dEdyb3VwIHx8IHRoaXMuX2lucHV0R3JvdXBVc2VyVGVtcGxhdGUgfHwgbnVsbDtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgZ2V0IGlucHV0RGlyZWN0aXZlKCk6IElneElucHV0RGlyZWN0aXZlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lucHV0RGlyZWN0aXZlIHx8IHRoaXMuX2lucHV0RGlyZWN0aXZlVXNlclRlbXBsYXRlcy5maXJzdCB8fCBudWxsO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHB1YmxpYyBnZXQgbGFiZWxEaXJlY3RpdmUoKTogSWd4TGFiZWxEaXJlY3RpdmUge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFiZWxEaXJlY3RpdmUgfHwgdGhpcy5fbGFiZWxEaXJlY3RpdmVVc2VyVGVtcGxhdGUgfHwgbnVsbDtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uU2V0dGluZ3MgPSB7XG4gICAgICAgICAgICBvcGVuQW5pbWF0aW9uOiBmYWRlSW4sXG4gICAgICAgICAgICBjbG9zZUFuaW1hdGlvbjogZmFkZU91dFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX2RlZmF1bHREcm9wRG93bk92ZXJsYXlTZXR0aW5ncyA9IHtcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy5pbnB1dEdyb3VwRWxlbWVudCxcbiAgICAgICAgICAgIGNsb3NlT25PdXRzaWRlQ2xpY2s6IHRydWUsXG4gICAgICAgICAgICBtb2RhbDogZmFsc2UsXG4gICAgICAgICAgICBzY3JvbGxTdHJhdGVneTogbmV3IEFic29sdXRlU2Nyb2xsU3RyYXRlZ3koKSxcbiAgICAgICAgICAgIHBvc2l0aW9uU3RyYXRlZ3k6IG5ldyBBdXRvUG9zaXRpb25TdHJhdGVneSh0aGlzLl9wb3NpdGlvblNldHRpbmdzKSxcbiAgICAgICAgICAgIG91dGxldDogdGhpcy5vdXRsZXRcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9tb2RhbE92ZXJsYXlTZXR0aW5ncyA9IHtcbiAgICAgICAgICAgIGNsb3NlT25PdXRzaWRlQ2xpY2s6IHRydWUsXG4gICAgICAgICAgICBtb2RhbDogdHJ1ZSxcbiAgICAgICAgICAgIGNsb3NlT25Fc2NhcGU6IHRydWUsXG4gICAgICAgICAgICBvdXRsZXQ6IHRoaXMub3V0bGV0XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fb3ZlcmxheVNlcnZpY2Uub25PcGVuaW5nLnBpcGUoXG4gICAgICAgICAgICBmaWx0ZXIoKG92ZXJsYXkpID0+IG92ZXJsYXkuaWQgPT09IHRoaXMuX2NvbXBvbmVudElEKSxcbiAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLl9kZXN0cm95JCkpLnN1YnNjcmliZSgoZXZlbnRBcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25PcGVuaW5nKGV2ZW50QXJncyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9vdmVybGF5U2VydmljZS5vbk9wZW5lZC5waXBlKFxuICAgICAgICAgICAgZmlsdGVyKChvdmVybGF5KSA9PiBvdmVybGF5LmlkID09PSB0aGlzLl9jb21wb25lbnRJRCksXG4gICAgICAgICAgICB0YWtlVW50aWwodGhpcy5fZGVzdHJveSQpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uT3BlbmVkKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9vdmVybGF5U2VydmljZS5vbkNsb3NlZC5waXBlKFxuICAgICAgICAgICAgZmlsdGVyKG92ZXJsYXkgPT4gb3ZlcmxheS5pZCA9PT0gdGhpcy5fY29tcG9uZW50SUQpLFxuICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3kkKSkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkNsb3NlZCgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fb3ZlcmxheVNlcnZpY2Uub25DbG9zaW5nLnBpcGUoXG4gICAgICAgICAgICBmaWx0ZXIob3ZlcmxheSA9PiBvdmVybGF5LmlkID09PSB0aGlzLl9jb21wb25lbnRJRCksXG4gICAgICAgICAgICB0YWtlVW50aWwodGhpcy5fZGVzdHJveSQpKS5zdWJzY3JpYmUoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkNsb3NpbmcuZW1pdChldmVudCk7XG4gICAgICAgICAgICAgICAgLy8gSWYgY2FuY2VsZWQgaW4gYSB1c2VyIG9uQ2xvc2luZyBoYW5kbGVyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmNhbmNlbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIERvIG5vdCBmb2N1cyB0aGUgaW5wdXQgaWYgY2xpY2tpbmcgb3V0c2lkZSBpbiBkcm9wZG93biBtb2RlXG4gICAgICAgICAgICAgICAgY29uc3QgaW5wdXQgPSB0aGlzLmdldEVkaXRFbGVtZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ICYmICEoZXZlbnQuZXZlbnQgJiYgdGhpcy5tb2RlID09PSBJbnRlcmFjdGlvbk1vZGUuRHJvcERvd24pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gb3V0c2lkZSBjbGlja1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVWYWxpZGl0eU9uQmx1cigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5tb2RlID09PSBJbnRlcmFjdGlvbk1vZGUuRHJvcERvd24pIHtcbiAgICAgICAgICAgIHRoaXMuZGF0ZUZvcm1hdFBhcnRzID0gRGF0ZVBpY2tlclV0aWwucGFyc2VEYXRlRm9ybWF0KHRoaXMubWFzaywgdGhpcy5sb2NhbGUpO1xuICAgICAgICAgICAgaWYgKHRoaXMubWFzayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXNrID0gRGF0ZVBpY2tlclV0aWwuZ2V0TWFzayh0aGlzLmRhdGVGb3JtYXRQYXJ0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmlucHV0TWFzayA9IERhdGVQaWNrZXJVdGlsLmdldElucHV0TWFzayh0aGlzLmRhdGVGb3JtYXRQYXJ0cyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9uZ0NvbnRyb2wgPSB0aGlzLl9pbmplY3Rvci5nZXQ8TmdDb250cm9sPihOZ0NvbnRyb2wsIG51bGwpO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLm1vZGUgPT09IEludGVyYWN0aW9uTW9kZS5Ecm9wRG93biAmJiB0aGlzLl9pbnB1dEVsZW1lbnRSZWYpIHtcbiAgICAgICAgICAgIGZyb21FdmVudCh0aGlzLl9pbnB1dEVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2tleWRvd24nKS5waXBlKFxuICAgICAgICAgICAgICAgIHRocm90dGxlKCgpID0+IGludGVydmFsKDAsIGFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyKSksXG4gICAgICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3kkKVxuICAgICAgICAgICAgKS5zdWJzY3JpYmUoKHJlcykgPT4gdGhpcy5vbktleURvd24ocmVzKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fbmdDb250cm9sKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0dXNDaGFuZ2VzJCA9IHRoaXMuX25nQ29udHJvbC5zdGF0dXNDaGFuZ2VzLnN1YnNjcmliZSh0aGlzLm9uU3RhdHVzQ2hhbmdlZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2lucHV0RGlyZWN0aXZlVXNlclRlbXBsYXRlcy5jaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmF0dGFjaFRlbXBsYXRlQmx1cigpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hdHRhY2hUZW1wbGF0ZUJsdXIoKTtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgbmdBZnRlckNvbnRlbnRDaGVja2VkKCkge1xuICAgICAgICAvLyBCLlAuIDI3IEF1Zy4gMjAyMSAtICMxMDA1N1xuICAgICAgICAvLyBpZ3hNYXNrIHVwZGF0ZXMgdGhlIGlucHV0J3MgdmFsdWUgd2hlbiBpdHMgbWFzayBwcm9wZXJ0eSBpcyBzZXRcbiAgICAgICAgLy8gdGhpcyBpcyBhbiBleHBlY3RlZCBiZWhhdmlvciBvZiB0aGUgbWFzayBzaW5jZSBpdCBuZWVkcyB0byBiZSBhYmxlIHRvIHVwZGF0ZSB0aGUgaW5wdXQncyB2YWx1ZVxuICAgICAgICAvLyBkdXJpbmcgcnVudGltZSBjaGFuZ2Ugb2YgcGxhY2Vob2xkZXIgb3IgZm9ybWF0XG4gICAgICAgIC8vIHRoaXMgaXNzdWUgaXMgbm90IHJlcHJvZHVjaWJsZSBhZnRlciAjNzE5OVxuICAgICAgICBpZiAodGhpcy5pbnB1dERpcmVjdGl2ZSAmJiAhdGhpcy5faW5wdXRHcm91cFVzZXJUZW1wbGF0ZVxuICAgICAgICAgICAgJiYgdGhpcy5mb3JtYXQubGVuZ3RoIDwgdGhpcy5pbnB1dERpcmVjdGl2ZS52YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXREaXJlY3RpdmUudmFsdWUgPSB0aGlzLnRyYW5zZm9ybWVkRGF0ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBuZ0FmdGVyVmlld0NoZWNrZWQoKSB7XG4gICAgICAgIC8vIElmIG9uZSBzZXRzIG1vZGUgYXQgcnVuIHRpbWUgdGhpcyBmb3JjZXMgaW5pdGlhbGl6YXRpb24gb2YgbmV3IGlneElucHV0R3JvdXBcbiAgICAgICAgLy8gQXMgYSByZXN1bHQgYSBuZXcgaWd4SW5wdXREaXJlY3RpdmUgaXMgaW5pdGlhbGl6ZWQgdG9vLiBJbiBuZ0FmdGVyVmlld0luaXQgb2ZcbiAgICAgICAgLy8gdGhlIG5ldyBkaXJlY3RpdmUgaXNSZXF1aXJlZCBvZiB0aGUgaWd4SW5wdXRHcm91cCBpcyBzZXQgYWdhaW4uIEhvd2V2ZXJcbiAgICAgICAgLy8gbmdBZnRlclZpZXdJbml0IG9mIGRhdGUgcGlja2VyIGlzIG5vdCBjYWxsZWQgYWdhaW4gYW5kIHdlIG1heSBmaW5pc2ggd2l0aCB3cm9uZ1xuICAgICAgICAvLyBpc1JlcXVpcmVkIGluIGlneElucHV0R3JvdXAuIFRoaXMgaXMgd2h5IHdlIHNob3VsZCBzZXQgaXQgaGVyLCBvbmx5IHdoZW4gbmVlZGVkXG4gICAgICAgIGlmICh0aGlzLmlucHV0R3JvdXAgJiYgdGhpcy5pbnB1dEdyb3VwLmlzUmVxdWlyZWQgIT09IHRoaXMucmVxdWlyZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRHcm91cC5pc1JlcXVpcmVkID0gdGhpcy5yZXF1aXJlZDtcbiAgICAgICAgICAgIHRoaXMuX2Nkci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETzogcGVyc2lzdCB2YWxpZGF0aW9uIHN0YXRlIHdoZW4gZHluYW1pY2FsbHkgY2hhbmdpbmcgJ2Ryb3Bkb3duJyB0byAnZGlhbG9nJyBvdCB2aWNlIHZlcnNhLlxuICAgICAgICAvLyBGb3IgcmVmZXJlbmNlIC0+IGl0IGlzIGN1cnJlbnRseSBwZXJzaXN0ZWQgaWYgYSB1c2VyIHRlbXBsYXRlIGlzIHBhc3NlZCAoYXMgdGVtcGxhdGUgaXMgbm90IHJlY3JlYXRlZClcblxuICAgICAgICBpZiAodGhpcy5sYWJlbERpcmVjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuaW5wdXREaXJlY3RpdmUubmF0aXZlRWxlbWVudCwgJ2FyaWEtbGFiZWxsZWRieScsIHRoaXMubGFiZWxEaXJlY3RpdmUuaWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcHVibGljIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5fY29tcG9uZW50SUQpIHtcbiAgICAgICAgICAgIHRoaXMuX292ZXJsYXlTZXJ2aWNlLmhpZGUodGhpcy5fY29tcG9uZW50SUQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9zdGF0dXNDaGFuZ2VzJCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdHVzQ2hhbmdlcyQudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kZXN0cm95JC5uZXh0KHRydWUpO1xuICAgICAgICB0aGlzLl9kZXN0cm95JC5jb21wbGV0ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbGVjdHMgdG9kYXkncyBkYXRlIGZyb20gY2FsZW5kYXIuXG4gICAgICpcbiAgICAgKiAgQHJlbWFya3NcbiAgICAgKiBDaGFuZ2VzIHRoZSBpbnB1dCBmaWVsZCB2YWx1ZSwgQGNhbGVuZGFyLnZpZXdEYXRlIGFuZCBAY2FsZW5kYXIudmFsdWUuXG4gICAgICogIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuZGF0ZVBpY2tlci50cmlnZ2VyVG9kYXlTZWxlY3Rpb24oKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgdHJpZ2dlclRvZGF5U2VsZWN0aW9uKCk6IHZvaWQge1xuICAgICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKERhdGUubm93KCkpO1xuICAgICAgICB0aGlzLmhhbmRsZVNlbGVjdGlvbih0b2RheSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRoZSBjYWxlbmRhciBzZWxlY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIENhbGxpbmcgdGhpcyBtZXRob2Qgd2lsbCBlbWl0IHRoZSBAY2FsZW5kYXIub25TZWxlY3Rpb24gZXZlbnQsXG4gICAgICogd2hpY2ggd2lsbCBmaXJlIEBoYW5kbGVTZWxlY3Rpb24gbWV0aG9kLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuZGF0ZVBpY2tlci5zZWxlY3REYXRlKHRoaXMuZGF0ZSk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGRhdGUgcGFzc2VkIGRhdGUgdGhhdCBoYXMgdG8gYmUgc2V0IHRvIHRoZSBjYWxlbmRhci5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2VsZWN0RGF0ZShkYXRlOiBEYXRlKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IGRhdGU7XG5cbiAgICAgICAgdGhpcy5lbWl0VmFsdWVDaGFuZ2VFdmVudChvbGRWYWx1ZSwgdGhpcy52YWx1ZSk7XG4gICAgICAgIHRoaXMub25TZWxlY3Rpb24uZW1pdChkYXRlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXNlbGVjdHMgdGhlIGNhbGVuZGFyIGRhdGUuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmRhdGVQaWNrZXIuZGVzZWxlY3REYXRlKCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIGRlc2VsZWN0RGF0ZSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbWl0VmFsdWVDaGFuZ2VFdmVudChvbGRWYWx1ZSwgdGhpcy52YWx1ZSk7XG4gICAgICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmRlc2VsZWN0RGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIGRhdGUgcGlja2VyIGRyb3AgZG93biBvciBkaWFsb2cuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IEhUTUxFbGVtZW50IC0gdGhlIHRhcmdldCBlbGVtZW50IHRvIHVzZSBmb3IgcG9zaXRpb25pbmcgdGhlIGRyb3AgZG93biBjb250YWluZXIgYWNjb3JkaW5nIHRvXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5kYXRlUGlja2VyLm9wZW5EaWFsb2codGFyZ2V0KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgb3BlbkRpYWxvZygpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbGxhcHNlZCB8fCB0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHRoaXMubW9kZSkge1xuICAgICAgICAgICAgY2FzZSBJbnRlcmFjdGlvbk1vZGUuRGlhbG9nOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYXNIZWFkZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vZGFsT3ZlcmxheSA9ICh0aGlzLm1vZGFsT3ZlcmxheVNldHRpbmdzICE9PSB1bmRlZmluZWQpID8gdGhpcy5fbW9kYWxPdmVybGF5IDogdGhpcy5fbW9kYWxPdmVybGF5U2V0dGluZ3M7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50SUQgPSB0aGlzLl9vdmVybGF5U2VydmljZS5hdHRhY2goSWd4Q2FsZW5kYXJDb250YWluZXJDb21wb25lbnQsIG1vZGFsT3ZlcmxheSwgdGhpcy5fbW9kdWxlUmVmKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vdmVybGF5U2VydmljZS5zaG93KHRoaXMuX2NvbXBvbmVudElEKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW50ZXJhY3Rpb25Nb2RlLkRyb3BEb3duOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYXNIZWFkZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLmlucHV0R3JvdXBFbGVtZW50O1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcm9wRG93bk92ZXJsYXlTZXR0aW5ncy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudElEID0gdGhpcy5fb3ZlcmxheVNlcnZpY2UuYXR0YWNoKElneENhbGVuZGFyQ29udGFpbmVyQ29tcG9uZW50LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyb3BEb3duT3ZlcmxheVNldHRpbmdzLCB0aGlzLl9tb2R1bGVSZWYpO1xuICAgICAgICAgICAgICAgIHRoaXMuX292ZXJsYXlTZXJ2aWNlLnNob3codGhpcy5fY29tcG9uZW50SUQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2UgdGhlIGNhbGVuZGFyLlxuICAgICAqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgY2xvc2VDYWxlbmRhcigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fb3ZlcmxheVNlcnZpY2UuaGlkZSh0aGlzLl9jb21wb25lbnRJRCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgdGhlIGlucHV0IGZpZWxkLCBkYXRlIHBpY2tlciB2YWx1ZSBhbmQgY2FsZW5kYXIgc2VsZWN0aW9uLlxuICAgICAqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5pc0VtcHR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuaW52YWxpZERhdGUgPSAnJztcbiAgICAgICAgICAgIHRoaXMuZGVzZWxlY3REYXRlKCk7XG4gICAgICAgICAgICB0aGlzLl9zZXRDdXJzb3JQb3NpdGlvbigwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV2YWx1YXRlcyB3aGVuIEBjYWxlbmRhci5vblNlbGVjdGlvbiBldmVudCB3YXMgZmlyZWRcbiAgICAgKiBhbmQgdXBkYXRlIHRoZSBpbnB1dCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudCBzZWxlY3RlZCB2YWx1ZSBmcm9tIGNhbGVuZGFyLlxuICAgICAqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgaGFuZGxlU2VsZWN0aW9uKGRhdGU6IERhdGUpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUpIHtcbiAgICAgICAgICAgIGRhdGUuc2V0SG91cnModGhpcy52YWx1ZS5nZXRIb3VycygpKTtcbiAgICAgICAgICAgIGRhdGUuc2V0TWludXRlcyh0aGlzLnZhbHVlLmdldE1pbnV0ZXMoKSk7XG4gICAgICAgICAgICBkYXRlLnNldFNlY29uZHModGhpcy52YWx1ZS5nZXRTZWNvbmRzKCkpO1xuICAgICAgICAgICAgZGF0ZS5zZXRNaWxsaXNlY29uZHModGhpcy52YWx1ZS5nZXRNaWxsaXNlY29uZHMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICB0aGlzLnZhbHVlID0gZGF0ZTtcblxuICAgICAgICB0aGlzLmVtaXRWYWx1ZUNoYW5nZUV2ZW50KG9sZFZhbHVlLCB0aGlzLnZhbHVlKTtcbiAgICAgICAgdGhpcy5jYWxlbmRhci52aWV3RGF0ZSA9IGRhdGU7XG4gICAgICAgIHRoaXMuY2xvc2VDYWxlbmRhcigpO1xuICAgICAgICB0aGlzLm9uU2VsZWN0aW9uLmVtaXQoZGF0ZSk7XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcHVibGljIG9uT3BlbkNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLm9wZW5EaWFsb2coKTtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgb25CbHVyKGV2ZW50LCBjYWxjRGF0ZSA9IHRydWUpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5faXNJbkVkaXRNb2RlID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLm1vZGUgPT09IEludGVyYWN0aW9uTW9kZS5Ecm9wRG93biAmJiBjYWxjRGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVEYXRlKGV2ZW50LnRhcmdldC52YWx1ZSwgZXZlbnQudHlwZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jb2xsYXBzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVZhbGlkaXR5T25CbHVyKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgb25Gb2N1cygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5faXNJbkVkaXRNb2RlID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgJiYgdGhpcy5pbnZhbGlkRGF0ZSA9PT0gJycpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybWVkRGF0ZSA9IHRoaXMuX2dldEVkaXRvckRhdGUodGhpcy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgb25LZXlEb3duKGV2ZW50KSB7XG4gICAgICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICAgICAgICBjYXNlIEtFWVMuVVBfQVJST1c6XG4gICAgICAgICAgICBjYXNlIEtFWVMuVVBfQVJST1dfSUU6XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNwaW5WYWx1ZShldmVudC50YXJnZXQudmFsdWUsIDEsIGV2ZW50LnR5cGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBLRVlTLkRPV05fQVJST1c6XG4gICAgICAgICAgICBjYXNlIEtFWVMuRE9XTl9BUlJPV19JRTpcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuYWx0S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3BlbkRpYWxvZygpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNwaW5WYWx1ZShldmVudC50YXJnZXQudmFsdWUsIC0xLCBldmVudC50eXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcHVibGljIG9uV2hlZWwoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzSW5FZGl0TW9kZSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgY29uc3Qgc2lnbiA9IChldmVudC5kZWx0YVkgPiAwKSA/IC0xIDogMTtcbiAgICAgICAgICAgIHRoaXMuc3BpblZhbHVlKGV2ZW50LnRhcmdldC52YWx1ZSwgc2lnbiwgZXZlbnQudHlwZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgb25JbnB1dChldmVudCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRml4IGZvciAjODE2NSB1bnRpbCByZWZhY3RvcmluZyAoIzY0ODMpLlxuICAgICAgICAgKiBUaGUgSWd4RGF0ZVRpbWVFZGl0b3Igd2lsbCBiZSB1c2VkIHRvIGhhbmRsZSBhbGwgaW5wdXRzLCBpLmUuIHRoaXMgaGFuZGxlciB3aWxsIGJlIHJlbW92ZWQuXG4gICAgICAgICAqIEl0IGV4dGVuZHMgdGhlIElneE1hc2tEaXJlY3RpdmUgd2hpY2ggY29udGFpbnMgbG9naWMgdGhhdCBoYW5kbGVzIHRoaXMgaXNzdWUuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoaXNJRSgpICYmICF0aGlzLl9pc0luRWRpdE1vZGUgJiYgIXRoaXMuaW5wdXRHcm91cC5pc0ZvY3VzZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YXJnZXRWYWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICAgICAgY29uc3QgY3Vyc29yUG9zaXRpb24gPSB0aGlzLl9nZXRDdXJzb3JQb3NpdGlvbigpO1xuICAgICAgICBjb25zdCBjaGVja0lucHV0ID0gRGF0ZVBpY2tlclV0aWwuY2hlY2tGb3JDb21wbGV0ZURhdGVJbnB1dCh0aGlzLmRhdGVGb3JtYXRQYXJ0cywgdGFyZ2V0VmFsdWUpO1xuICAgICAgICB0aGlzLl9pc0luRWRpdE1vZGUgPSB0cnVlO1xuXG4gICAgICAgIGlmICh0YXJnZXRWYWx1ZSAhPT0gRGF0ZVBpY2tlclV0aWwubWFza1RvUHJvbXB0Q2hhcnModGhpcy5pbnB1dE1hc2spKSB7XG4gICAgICAgICAgICB0aGlzLmlzRW1wdHkgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGFsbCBkYXRlIHBhcnRzIGFyZSBjb21wbGV0ZWQsIGNoYW5nZSB0aGUgZGF0ZS1waWNrZXIgdmFsdWUsIHN0YXkgaW4gZWRpdCBtb2RlXG4gICAgICAgIGlmIChjaGVja0lucHV0ID09PSAnY29tcGxldGUnICYmIGV2ZW50LmlucHV0VHlwZSAhPT0gJ2RlbGV0ZUNvbnRlbnRCYWNrd2FyZCcpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybWVkRGF0ZSA9IHRhcmdldFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVEYXRlKHRhcmdldFZhbHVlLCBldmVudC50eXBlKTtcbiAgICAgICAgICAgIHRoaXMuX3NldEN1cnNvclBvc2l0aW9uKGN1cnNvclBvc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGVja0lucHV0ID09PSAncGFydGlhbCcpIHtcbiAgICAgICAgICAgIC8vIFdoaWxlIGVkaXRpbmcsIGlmIG9uZSBkYXRlIHBhcnQgaXMgZGVsZXRlZCwgZGF0ZS1waWNrZXIgdmFsdWUgaXMgc2V0IHRvIG51bGwsIHRoZSByZW1haW5pbmcgaW5wdXQgc3RheXMgaW50YWN0LlxuICAgICAgICAgICAgdGhpcy5kZXNlbGVjdERhdGUoKTtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRFZGl0RWxlbWVudCgpLnZhbHVlID0gdGFyZ2V0VmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0Q3Vyc29yUG9zaXRpb24oY3Vyc29yUG9zaXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hlY2tJbnB1dCA9PT0gJ2VtcHR5Jykge1xuICAgICAgICAgICAgLy8gVG90YWwgY2xlYW4tdXAgYXMgaW5wdXQgaXMgZGVsZXRlZC5cbiAgICAgICAgICAgIHRoaXMuaXNFbXB0eSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmRlc2VsZWN0RGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIF91cGRhdGVWYWxpZGl0eU9uQmx1cigpIHtcbiAgICAgICAgdGhpcy5fb25Ub3VjaGVkQ2FsbGJhY2soKTtcbiAgICAgICAgY29uc3QgaW5wdXQgPSB0aGlzLmlucHV0RGlyZWN0aXZlO1xuICAgICAgICBpZiAoaW5wdXQgJiYgdGhpcy5fbmdDb250cm9sICYmICF0aGlzLl9uZ0NvbnRyb2wudmFsaWQpIHtcbiAgICAgICAgICAgIGlucHV0LnZhbGlkID0gSWd4SW5wdXRTdGF0ZS5JTlZBTElEO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5wdXQudmFsaWQgPSBJZ3hJbnB1dFN0YXRlLklOSVRJQUw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgb25TdGF0dXNDaGFuZ2VkKCkge1xuICAgICAgICBpZiAodGhpcy5pbnB1dERpcmVjdGl2ZSkge1xuICAgICAgICAgICAgaWYgKCh0aGlzLl9uZ0NvbnRyb2wuY29udHJvbC50b3VjaGVkIHx8IHRoaXMuX25nQ29udHJvbC5jb250cm9sLmRpcnR5KSAmJlxuICAgICAgICAgICAgICAgICh0aGlzLmlucHV0RGlyZWN0aXZlICYmIHRoaXMuX25nQ29udHJvbC5jb250cm9sLnZhbGlkYXRvciB8fCB0aGlzLl9uZ0NvbnRyb2wuY29udHJvbC5hc3luY1ZhbGlkYXRvcikpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnB1dEdyb3VwLmlzRm9jdXNlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0RGlyZWN0aXZlLnZhbGlkID0gdGhpcy5fbmdDb250cm9sLnZhbGlkID8gSWd4SW5wdXRTdGF0ZS5WQUxJRCA6IElneElucHV0U3RhdGUuSU5WQUxJRDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0RGlyZWN0aXZlLnZhbGlkID0gdGhpcy5fbmdDb250cm9sLnZhbGlkID8gSWd4SW5wdXRTdGF0ZS5JTklUSUFMIDogSWd4SW5wdXRTdGF0ZS5JTlZBTElEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dERpcmVjdGl2ZS52YWxpZCA9IElneElucHV0U3RhdGUuSU5JVElBTDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbnB1dEdyb3VwICYmIHRoaXMuaW5wdXRHcm91cC5pc1JlcXVpcmVkICE9PSB0aGlzLnJlcXVpcmVkKSB7XG4gICAgICAgICAgICB0aGlzLmlucHV0R3JvdXAuaXNSZXF1aXJlZCA9IHRoaXMucmVxdWlyZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGF0dGFjaFRlbXBsYXRlQmx1cigpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RlbXBsYXRlSW5wdXRCbHVyJCkge1xuICAgICAgICAgICAgdGhpcy5fdGVtcGxhdGVJbnB1dEJsdXIkLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5faW5wdXREaXJlY3RpdmVVc2VyVGVtcGxhdGVzLmZpcnN0KSB7XG4gICAgICAgICAgICBjb25zdCBkaXJlY3RpdmUgPSB0aGlzLl9pbnB1dERpcmVjdGl2ZVVzZXJUZW1wbGF0ZXMuZmlyc3Q7XG4gICAgICAgICAgICB0aGlzLl90ZW1wbGF0ZUlucHV0Qmx1ciQgPSBmcm9tRXZlbnQoZGlyZWN0aXZlLm5hdGl2ZUVsZW1lbnQsICdibHVyJykucGlwZShcbiAgICAgICAgICAgICAgICB0YWtlVW50aWwodGhpcy5fZGVzdHJveSQpKS5zdWJzY3JpYmUoKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJhd0RhdGVTdHJpbmcgPSAocmVzLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkJsdXIocmVzLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBUT0RPOiBSZWZhY3RvciBjdXN0b20gdGVtcGxhdGUgaGFuZGxpbmcuXG4gICAgICAgICAgICAvLyBSZXZpc2UgYmx1ciBoYW5kbGluZyB3aGVuIGN1c3RvbSB0ZW1wbGF0ZSBpcyBwYXNzZWRcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZW1pdFZhbHVlQ2hhbmdlRXZlbnQob2xkVmFsdWU6IERhdGUsIG5ld1ZhbHVlOiBEYXRlKSB7XG4gICAgICAgIGlmICghaXNFcXVhbChvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQobmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVEYXRlKGRhdGVTdHJpbmc6IHN0cmluZywgaW52b2tlZEJ5RXZlbnQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAoZGF0ZVN0cmluZyAhPT0gJycpIHtcbiAgICAgICAgICAgIGNvbnN0IHByZXZEYXRlVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICAgICAgY29uc3QgaW5wdXRWYWx1ZSA9IChpbnZva2VkQnlFdmVudCA9PT0gJ2JsdXInKSA/IHRoaXMucmF3RGF0ZVN0cmluZyA6IGRhdGVTdHJpbmc7XG4gICAgICAgICAgICBjb25zdCBuZXdEYXRlQXJyYXkgPSBEYXRlUGlja2VyVXRpbC5wYXJzZURhdGVBcnJheSh0aGlzLmRhdGVGb3JtYXRQYXJ0cywgcHJldkRhdGVWYWx1ZSwgaW5wdXRWYWx1ZSk7XG5cbiAgICAgICAgICAgIGlmIChuZXdEYXRlQXJyYXkuc3RhdGUgPT09IERhdGVTdGF0ZS5WYWxpZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gbmV3RGF0ZUFycmF5LmRhdGU7XG4gICAgICAgICAgICAgICAgLy8gUmVzdG9yZSB0aGUgdGltZSBwYXJ0IGlmIGFueVxuICAgICAgICAgICAgICAgIGlmIChwcmV2RGF0ZVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlLnNldEhvdXJzKHByZXZEYXRlVmFsdWUuZ2V0SG91cnMoKSk7XG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlLnNldE1pbnV0ZXMocHJldkRhdGVWYWx1ZS5nZXRNaW51dGVzKCkpO1xuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZS5zZXRTZWNvbmRzKHByZXZEYXRlVmFsdWUuZ2V0U2Vjb25kcygpKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUuc2V0TWlsbGlzZWNvbmRzKHByZXZEYXRlVmFsdWUuZ2V0TWlsbGlzZWNvbmRzKCkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpc2FibGVkRGF0ZXMgPT09IG51bGxcbiAgICAgICAgICAgICAgICAgICAgfHwgKHRoaXMuZGlzYWJsZWREYXRlcyAhPT0gbnVsbCAmJiAhaXNEYXRlSW5SYW5nZXMobmV3VmFsdWUsIHRoaXMuZGlzYWJsZWREYXRlcykpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG5ld1ZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFZhbHVlQ2hhbmdlRXZlbnQob2xkVmFsdWUsIHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmludmFsaWREYXRlID0gJyc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJnczogSURhdGVQaWNrZXJEaXNhYmxlZERhdGVFdmVudEFyZ3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlUGlja2VyOiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlOiBuZXdWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkRpc2FibGVkRGF0ZS5lbWl0KGFyZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJnczogSURhdGVQaWNrZXJWYWxpZGF0aW9uRmFpbGVkRXZlbnRBcmdzID0ge1xuICAgICAgICAgICAgICAgICAgICBkYXRlUGlja2VyOiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBwcmV2VmFsdWU6IHByZXZEYXRlVmFsdWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMuaW52YWxpZERhdGUgPSBkYXRlU3RyaW5nO1xuICAgICAgICAgICAgICAgIHRoaXMub25WYWxpZGF0aW9uRmFpbGVkLmVtaXQoYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHNwaW5WYWx1ZShpbnB1dFZhbHVlOiBzdHJpbmcsIHNpZ246IG51bWJlciwgZXZlbnRUeXBlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5faXNJbkVkaXRNb2RlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pc0VtcHR5ID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGN1cnNvclBvc2l0aW9uID0gdGhpcy5fZ2V0Q3Vyc29yUG9zaXRpb24oKTtcblxuICAgICAgICBjb25zdCBtb2RpZmllZElucHV0VmFsdWUgPVxuICAgICAgICAgICAgRGF0ZVBpY2tlclV0aWwuZ2V0TW9kaWZpZWREYXRlSW5wdXQodGhpcy5kYXRlRm9ybWF0UGFydHMsIGlucHV0VmFsdWUsIGN1cnNvclBvc2l0aW9uLCB0aGlzLnNwaW5EZWx0YSAqIHNpZ24sIHRoaXMuaXNTcGluTG9vcCk7XG5cbiAgICAgICAgdGhpcy5nZXRFZGl0RWxlbWVudCgpLnZhbHVlID0gbW9kaWZpZWRJbnB1dFZhbHVlO1xuICAgICAgICB0aGlzLl9zZXRDdXJzb3JQb3NpdGlvbihjdXJzb3JQb3NpdGlvbik7XG5cbiAgICAgICAgY29uc3QgY2hlY2tJbnB1dCA9IERhdGVQaWNrZXJVdGlsLmNoZWNrRm9yQ29tcGxldGVEYXRlSW5wdXQodGhpcy5kYXRlRm9ybWF0UGFydHMsIG1vZGlmaWVkSW5wdXRWYWx1ZSk7XG4gICAgICAgIGlmIChjaGVja0lucHV0ID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgICB0aGlzLl9pc0luRWRpdE1vZGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVEYXRlKG1vZGlmaWVkSW5wdXRWYWx1ZSwgZXZlbnRUeXBlKTtcbiAgICAgICAgICAgIHRoaXMuX3NldEN1cnNvclBvc2l0aW9uKGN1cnNvclBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX29uT3BlbmluZyhldmVudDogT3ZlcmxheUNhbmNlbGFibGVFdmVudEFyZ3MpIHtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZUNhbGVuZGFyQ29udGFpbmVyKGV2ZW50LmNvbXBvbmVudFJlZi5pbnN0YW5jZSBhcyBJZ3hDYWxlbmRhckNvbnRhaW5lckNvbXBvbmVudCk7XG4gICAgICAgIHRoaXMuY29sbGFwc2VkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfb25PcGVuZWQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMub25PcGVuZWQuZW1pdCh0aGlzKTtcblxuICAgICAgICBpZiAodGhpcy5jYWxlbmRhcikge1xuICAgICAgICAgICAgdGhpcy5fZm9jdXNDYWxlbmRhckRhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX29uQ2xvc2VkKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbGxhcHNlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX2NvbXBvbmVudElEID0gbnVsbDtcbiAgICAgICAgdGhpcy5vbkNsb3NlZC5lbWl0KHRoaXMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2luaXRpYWxpemVDYWxlbmRhckNvbnRhaW5lcihjb21wb25lbnRJbnN0YW5jZTogSWd4Q2FsZW5kYXJDb250YWluZXJDb21wb25lbnQpIHtcbiAgICAgICAgdGhpcy5jYWxlbmRhciA9IGNvbXBvbmVudEluc3RhbmNlLmNhbGVuZGFyO1xuICAgICAgICBjb25zdCBpc1ZlcnRpY2FsID0gKHRoaXMudmVydGljYWwgJiYgdGhpcy5tb2RlID09PSBJbnRlcmFjdGlvbk1vZGUuRGlhbG9nKTtcbiAgICAgICAgdGhpcy5jYWxlbmRhci5oYXNIZWFkZXIgPSB0aGlzLmhhc0hlYWRlcjtcbiAgICAgICAgdGhpcy5jYWxlbmRhci5mb3JtYXRPcHRpb25zID0gdGhpcy5mb3JtYXRPcHRpb25zO1xuICAgICAgICB0aGlzLmNhbGVuZGFyLmZvcm1hdFZpZXdzID0gdGhpcy5mb3JtYXRWaWV3cztcbiAgICAgICAgdGhpcy5jYWxlbmRhci5sb2NhbGUgPSB0aGlzLmxvY2FsZTtcbiAgICAgICAgdGhpcy5jYWxlbmRhci52ZXJ0aWNhbCA9IGlzVmVydGljYWw7XG4gICAgICAgIHRoaXMuY2FsZW5kYXIud2Vla1N0YXJ0ID0gdGhpcy53ZWVrU3RhcnQ7XG4gICAgICAgIHRoaXMuY2FsZW5kYXIuc3BlY2lhbERhdGVzID0gdGhpcy5zcGVjaWFsRGF0ZXM7XG4gICAgICAgIHRoaXMuY2FsZW5kYXIuZGlzYWJsZWREYXRlcyA9IHRoaXMuZGlzYWJsZWREYXRlcztcbiAgICAgICAgdGhpcy5jYWxlbmRhci5oZWFkZXJUZW1wbGF0ZSA9IHRoaXMuaGVhZGVyVGVtcGxhdGU7XG4gICAgICAgIHRoaXMuY2FsZW5kYXIuc3ViaGVhZGVyVGVtcGxhdGUgPSB0aGlzLnN1YmhlYWRlclRlbXBsYXRlO1xuICAgICAgICB0aGlzLmNhbGVuZGFyLmhpZGVPdXRzaWRlRGF5cyA9IHRoaXMuaGlkZU91dHNpZGVEYXlzO1xuICAgICAgICB0aGlzLmNhbGVuZGFyLm1vbnRoc1ZpZXdOdW1iZXIgPSB0aGlzLm1vbnRoc1ZpZXdOdW1iZXI7XG4gICAgICAgIHRoaXMuY2FsZW5kYXIuc2hvd1dlZWtOdW1iZXJzID0gdGhpcy5zaG93V2Vla051bWJlcnM7XG4gICAgICAgIHRoaXMuY2FsZW5kYXIuc2VsZWN0ZWQucGlwZSh0YWtlVW50aWwodGhpcy5fZGVzdHJveSQpKS5zdWJzY3JpYmUoKGV2OiBEYXRlKSA9PiB0aGlzLmhhbmRsZVNlbGVjdGlvbihldikpO1xuXG4gICAgICAgIGlmICh0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFyLnZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIudmlld0RhdGUgPSB0aGlzLnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UubW9kZSA9IHRoaXMubW9kZTtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UudmVydGljYWwgPSBpc1ZlcnRpY2FsO1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS5jYW5jZWxCdXR0b25MYWJlbCA9IHRoaXMuY2FuY2VsQnV0dG9uTGFiZWw7XG4gICAgICAgIGNvbXBvbmVudEluc3RhbmNlLnRvZGF5QnV0dG9uTGFiZWwgPSB0aGlzLnRvZGF5QnV0dG9uTGFiZWw7XG4gICAgICAgIGNvbXBvbmVudEluc3RhbmNlLmRhdGVQaWNrZXJBY3Rpb25zID0gdGhpcy5kYXRlUGlja2VyQWN0aW9uc0RpcmVjdGl2ZTtcblxuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS5vbkNsb3NlLnBpcGUodGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3kkKSkuc3Vic2NyaWJlKCgpID0+IHRoaXMuY2xvc2VDYWxlbmRhcigpKTtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2Uub25Ub2RheVNlbGVjdGlvbi5waXBlKHRha2VVbnRpbCh0aGlzLl9kZXN0cm95JCkpLnN1YnNjcmliZSgoKSA9PiB0aGlzLnRyaWdnZXJUb2RheVNlbGVjdGlvbigpKTtcbiAgICB9XG5cbiAgICAvLyBGb2N1cyBhIGRhdGUsIGFmdGVyIHRoZSBjYWxlbmRhciBhcHBlYXJhbmNlIGludG8gRE9NLlxuICAgIHByaXZhdGUgX2ZvY3VzQ2FsZW5kYXJEYXRlKCk6IHZvaWQge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5kYXlzVmlldy5mb2N1c0FjdGl2ZURhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfc2V0TG9jYWxlVG9EYXRlKHZhbHVlOiBEYXRlKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKGlzSUUoKSkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBhIHdvcmthcm91bmQgZml4aW5nIHRoZSBmb2xsb3dpbmcgSUUxMSBpc3N1ZTpcbiAgICAgICAgICAgIC8vIElFMTEgaGFzIGFkZGVkIGNoYXJhY3RlciBjb2RlIDgyMDYgKG1hcmsgZm9yIFJUTCkgdG8gdGhlIG91dHB1dCBvZiB0b0xvY2FsZURhdGVTdHJpbmcoKSB0aGF0XG4gICAgICAgICAgICAvLyBwcmVjZWRlcyBlYWNoIHBvcnRpb24gdGhhdCBjb21wcmlzZXMgdGhlIHRvdGFsIGRhdGUuLi4gRm9yIG1vcmUgaW5mb3JtYXRpb24gcmVhZCB0aGlzIGFydGljbGU6XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgICAgICAgICAgLy8gaHR0cHM6Ly93d3cuY3NncHJvLmNvbS9ibG9nLzIwMTYvMDgvYS1iYWQtZGF0ZS13aXRoLWludGVybmV0LWV4cGxvcmVyLTExLXRyb3VibGUtd2l0aC1uZXctdW5pY29kZS1jaGFyYWN0ZXJzLWluLWphdmFzY3JpcHQtZGF0ZS1zdHJpbmdzL1xuICAgICAgICAgICAgY29uc3QgbG9jYWxlRGF0ZVN0cklFID0gbmV3IERhdGUodmFsdWUuZ2V0RnVsbFllYXIoKSwgdmFsdWUuZ2V0TW9udGgoKSwgdmFsdWUuZ2V0RGF0ZSgpLFxuICAgICAgICAgICAgICAgIHZhbHVlLmdldEhvdXJzKCksIHZhbHVlLmdldE1pbnV0ZXMoKSwgdmFsdWUuZ2V0U2Vjb25kcygpLCB2YWx1ZS5nZXRNaWxsaXNlY29uZHMoKSk7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlRGF0ZVN0cklFLnRvTG9jYWxlRGF0ZVN0cmluZyh0aGlzLmxvY2FsZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWUudG9Mb2NhbGVEYXRlU3RyaW5nKHRoaXMubG9jYWxlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9nZXRDdXJzb3JQb3NpdGlvbigpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRFZGl0RWxlbWVudCgpLnNlbGVjdGlvblN0YXJ0O1xuICAgIH1cblxuICAgIHByaXZhdGUgX3NldEN1cnNvclBvc2l0aW9uKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyID0gc3RhcnQpOiB2b2lkIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZ2V0RWRpdEVsZW1lbnQoKS5zZXRTZWxlY3Rpb25SYW5nZShzdGFydCwgZW5kKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXBwbHkgY3VzdG9tIHVzZXIgZm9ybWF0dGVyIHVwb24gZGF0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmb3JtYXR0ZXIgY3VzdG9tIGZvcm1hdHRlciBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0gZGF0ZSBwYXNzZWQgZGF0ZVxuICAgICAqL1xuICAgIHByaXZhdGUgX2N1c3RvbUZvcm1hdENoZWNrZXIoZm9ybWF0dGVyOiAoXzogRGF0ZSkgPT4gc3RyaW5nLCBkYXRlOiBEYXRlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdHRlciA/IHRoaXMuZm9ybWF0dGVyKGRhdGUpIDogdGhpcy5fc2V0TG9jYWxlVG9EYXRlKGRhdGUpO1xuICAgIH1cblxuICAgIC8qXG4gICAgKiBUcmFuc2Zvcm1zIHRoZSBkYXRlIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGZvcm1hdCB3aGVuIGBJZ3hEYXRlUGlja2VyQ29tcG9uZW50YCBpcyBpbiBlZGl0IG1vZGVcbiAgICAqIHVzaW5nIEBhbmd1bGFyL2NvbW1vbiBmb3JtYXREYXRlIG1ldGhvZDogaHR0cHM6Ly9hbmd1bGFyLmlvL2FwaS9jb21tb24vZm9ybWF0RGF0ZVxuICAgICogQHBhcmFtICB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyIHwgRGF0ZVxuICAgICogQHJldHVybnMgZm9ybWF0dGVkIHN0cmluZ1xuICAgICovXG4gICAgcHJpdmF0ZSBfZ2V0RGlzcGxheURhdGUodmFsdWU6IGFueSk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLmZvcm1hdCAmJiAhdGhpcy5mb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsZSA9IHRoaXMubG9jYWxlIHx8IHRoaXMuZGVmYXVsdExvY2FsZTtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXREYXRlKHZhbHVlLCB0aGlzLmZvcm1hdCwgbG9jYWxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXN0b21Gb3JtYXRDaGVja2VyKHRoaXMuZm9ybWF0dGVyLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9nZXRFZGl0b3JEYXRlKHZhbHVlOiBhbnkpIHtcbiAgICAgICAgY29uc3QgbG9jYWxlID0gdGhpcy5sb2NhbGUgfHwgdGhpcy5kZWZhdWx0TG9jYWxlO1xuICAgICAgICBjb25zdCBjaGFuZ2VkVmFsdWUgPSAodmFsdWUpID8gZm9ybWF0RGF0ZSh2YWx1ZSwgdGhpcy5tYXNrLCBsb2NhbGUpIDogJyc7XG4gICAgICAgIHJldHVybiBEYXRlUGlja2VyVXRpbC5hZGRQcm9tcHRDaGFyc0VkaXRNb2RlKHRoaXMuZGF0ZUZvcm1hdFBhcnRzLCB0aGlzLnZhbHVlLCBjaGFuZ2VkVmFsdWUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgIElneERhdGVQaWNrZXJDb21wb25lbnQsXG4gICAgICAgIElneENhbGVuZGFyQ29udGFpbmVyQ29tcG9uZW50LFxuICAgICAgICBJZ3hEYXRlUGlja2VyQWN0aW9uc0RpcmVjdGl2ZSxcbiAgICAgICAgSWd4RGF0ZVBpY2tlclRlbXBsYXRlRGlyZWN0aXZlLFxuICAgICAgICBEYXRlUGlja2VyRGlzcGxheVZhbHVlUGlwZSxcbiAgICAgICAgRGF0ZVBpY2tlcklucHV0VmFsdWVQaXBlXG4gICAgXSxcbiAgICBlbnRyeUNvbXBvbmVudHM6IFtcbiAgICAgICAgSWd4Q2FsZW5kYXJDb250YWluZXJDb21wb25lbnRcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgSWd4RGF0ZVBpY2tlckNvbXBvbmVudCxcbiAgICAgICAgSWd4RGF0ZVBpY2tlclRlbXBsYXRlRGlyZWN0aXZlLFxuICAgICAgICBJZ3hEYXRlUGlja2VyQWN0aW9uc0RpcmVjdGl2ZSxcbiAgICAgICAgRGF0ZVBpY2tlckRpc3BsYXlWYWx1ZVBpcGUsXG4gICAgICAgIERhdGVQaWNrZXJJbnB1dFZhbHVlUGlwZSxcbiAgICAgICAgSWd4SW5wdXRHcm91cE1vZHVsZVxuICAgIF0sXG4gICAgaW1wb3J0czogW1xuICAgICAgICBDb21tb25Nb2R1bGUsXG4gICAgICAgIElneEljb25Nb2R1bGUsXG4gICAgICAgIElneElucHV0R3JvdXBNb2R1bGUsXG4gICAgICAgIElneENhbGVuZGFyTW9kdWxlLFxuICAgICAgICBJZ3hCdXR0b25Nb2R1bGUsXG4gICAgICAgIElneFJpcHBsZU1vZHVsZSxcbiAgICAgICAgSWd4TWFza01vZHVsZSxcbiAgICAgICAgSWd4VGV4dFNlbGVjdGlvbk1vZHVsZVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgSWd4RGF0ZVBpY2tlck1vZHVsZSB7IH1cbiJdfQ==