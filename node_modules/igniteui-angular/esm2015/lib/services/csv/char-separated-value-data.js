import { ExportUtilities } from '../exporter-common/export-utilities';
import { yieldingLoop } from '../../core/utils';
/**
 * @hidden
 */
export class CharSeparatedValueData {
    constructor(_data, valueDelimiter, columns = []) {
        this._data = _data;
        this.columns = columns;
        this._headerRecord = '';
        this._dataRecords = '';
        this._eor = '\r\n';
        this._escapeCharacters = ['\r', '\n', '\r\n'];
        this._delimiterLength = 1;
        this._isSpecialData = false;
        this.setDelimiter(valueDelimiter);
    }
    prepareData(key) {
        if (!this._data || this._data.length === 0) {
            return '';
        }
        let keys = [];
        if (key) {
            keys = key;
        }
        else {
            keys = ExportUtilities.getKeysFromData(this._data);
        }
        if (keys.length === 0) {
            return '';
        }
        this._isSpecialData = ExportUtilities.isSpecialData(this._data);
        this._escapeCharacters.push(this._delimiter);
        this._headerRecord = this.processHeaderRecord(keys);
        this._dataRecords = this.processDataRecords(this._data, keys);
        return this._headerRecord + this._dataRecords;
    }
    prepareDataAsync(done) {
        var _a;
        if (!this._data || this._data.length === 0) {
            done('');
        }
        const columns = (_a = this.columns) === null || _a === void 0 ? void 0 : _a.filter(c => !c.skip);
        const keys = columns && columns.length ? columns.map(c => c.field) : ExportUtilities.getKeysFromData(this._data);
        if (keys.length === 0) {
            done('');
        }
        this._isSpecialData = ExportUtilities.isSpecialData(this._data);
        this._escapeCharacters.push(this._delimiter);
        const headers = columns && columns.length ?
            columns.map(c => c.header ? c.header : c.field) :
            keys;
        this._headerRecord = this.processHeaderRecord(headers);
        this.processDataRecordsAsync(this._data, keys, (dr) => {
            done(this._headerRecord + dr);
        });
    }
    processField(value, escapeChars) {
        let safeValue = ExportUtilities.hasValue(value) ? String(value) : '';
        if (escapeChars.some((v) => safeValue.includes(v))) {
            safeValue = `"${safeValue}"`;
        }
        return safeValue + this._delimiter;
    }
    processHeaderRecord(keys) {
        let recordData = '';
        for (const keyName of keys) {
            recordData += this.processField(keyName, this._escapeCharacters);
        }
        return recordData.slice(0, -this._delimiterLength) + this._eor;
    }
    processRecord(record, keys) {
        const recordData = new Array(keys.length);
        for (let index = 0; index < keys.length; index++) {
            const value = (record[keys[index]] !== undefined) ? record[keys[index]] : this._isSpecialData ? record : '';
            recordData[index] = this.processField(value, this._escapeCharacters);
        }
        return recordData.join('').slice(0, -this._delimiterLength) + this._eor;
    }
    processDataRecords(currentData, keys) {
        const dataRecords = new Array(currentData.length);
        for (let i = 0; i < currentData.length; i++) {
            const row = currentData[i];
            dataRecords[i] = this.processRecord(row, keys);
        }
        return dataRecords.join('');
    }
    processDataRecordsAsync(currentData, keys, done) {
        const dataRecords = new Array(currentData.length);
        yieldingLoop(currentData.length, 1000, (i) => {
            const row = currentData[i];
            dataRecords[i] = this.processRecord(row, keys);
        }, () => {
            done(dataRecords.join(''));
        });
    }
    setDelimiter(value) {
        this._delimiter = value;
        this._delimiterLength = value.length;
    }
}
//# sourceMappingURL=data:application/json;base64,