import { __awaiter } from "tslib";
import * as JSZip from 'jszip';
import { EventEmitter, Injectable } from '@angular/core';
import { ExcelElementsFactory } from './excel-elements-factory';
import { ExcelFolderTypes } from './excel-enums';
import { DEFAULT_OWNER, IgxBaseExporter } from '../exporter-common/base-export-service';
import { ExportUtilities } from '../exporter-common/export-utilities';
import { WorksheetData } from './worksheet-data';
import { WorksheetFile } from './excel-files';
const EXCEL_MAX_ROWS = 1048576;
const EXCEL_MAX_COLS = 16384;
/**
 * **Ignite UI for Angular Excel Exporter Service** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_excel.html)
 *
 * The Ignite UI for Angular Excel Exporter service can export data in Microsoft® Excel® format from both raw data
 * (array) or from an `IgxGrid`.
 *
 * Example:
 * ```typescript
 * public localData = [
 *   { Name: "Eric Ridley", Age: "26" },
 *   { Name: "Alanis Brook", Age: "22" },
 *   { Name: "Jonathan Morris", Age: "23" }
 * ];
 *
 * constructor(private excelExportService: IgxExcelExporterService) {
 * }
 *
 * this.excelExportService.exportData(this.localData, new IgxExcelExporterOptions("FileName"));
 * ```
 */
export class IgxExcelExporterService extends IgxBaseExporter {
    constructor() {
        super(...arguments);
        /**
         * This event is emitted when the export process finishes.
         * ```typescript
         * this.exporterService.exportEnded.subscribe((args: IExcelExportEndedEventArgs) => {
         * // put event handler code here
         * });
         * ```
         *
         * @memberof IgxExcelExporterService
         */
        this.exportEnded = new EventEmitter();
    }
    static populateFolderAsync(folder, zip, worksheetData) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const childFolder of folder.childFolders(worksheetData)) {
                const folderInstance = ExcelElementsFactory.getExcelFolder(childFolder);
                const zipFolder = zip.folder(folderInstance.folderName);
                yield IgxExcelExporterService.populateFolderAsync(folderInstance, zipFolder, worksheetData);
            }
            for (const childFile of folder.childFiles(worksheetData)) {
                const fileInstance = ExcelElementsFactory.getExcelFile(childFile);
                if (fileInstance instanceof WorksheetFile) {
                    yield fileInstance.writeElementAsync(zip, worksheetData);
                }
                else {
                    fileInstance.writeElement(zip, worksheetData);
                }
            }
        });
    }
    exportDataImplementation(data, options) {
        const firstDataElement = data[0];
        const columnsLength = firstDataElement ? Object.keys(firstDataElement.data).length : 0;
        let columnCount;
        let columnWidths;
        let indexOfLastPinnedColumn;
        let defaultOwner;
        if (data.length > EXCEL_MAX_ROWS || columnsLength > EXCEL_MAX_COLS) {
            throw Error('The Excel file can contain up to 1,048,576 rows and 16,384 columns.');
        }
        const level = firstDataElement === null || firstDataElement === void 0 ? void 0 : firstDataElement.level;
        if (typeof level !== 'undefined') {
            let maxLevel = 0;
            data.forEach((r) => {
                maxLevel = Math.max(maxLevel, r.level);
            });
            if (maxLevel > 7) {
                throw Error('Can create an outline of up to eight levels!');
            }
            defaultOwner = this._ownersMap.get(DEFAULT_OWNER);
            const columns = defaultOwner.columns.filter(col => !col.skip);
            columnWidths = defaultOwner.columnWidths;
            indexOfLastPinnedColumn = defaultOwner.indexOfLastPinnedColumn;
            columnCount = columns.length;
        }
        const worksheetData = new WorksheetData(data, options, this._sort, columnCount, indexOfLastPinnedColumn, columnWidths, defaultOwner);
        this._xlsx = typeof JSZip.default === 'function' ? new JSZip.default() : new JSZip();
        const rootFolder = ExcelElementsFactory.getExcelFolder(ExcelFolderTypes.RootExcelFolder);
        IgxExcelExporterService.populateFolderAsync(rootFolder, this._xlsx, worksheetData)
            .then(() => {
            this._xlsx.generateAsync(IgxExcelExporterService.ZIP_OPTIONS).then((result) => {
                this.saveFile(result, options.fileName);
                this.exportEnded.emit({ xlsx: this._xlsx });
            });
        });
    }
    saveFile(data, fileName) {
        const blob = new Blob([ExportUtilities.stringToArrayBuffer(atob(data))], {
            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        });
        ExportUtilities.saveBlobToFile(blob, fileName);
    }
}
IgxExcelExporterService.ZIP_OPTIONS = { compression: 'DEFLATE', type: 'base64' };
IgxExcelExporterService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,