import { Component, ContentChild, ElementRef, HostBinding, Inject, Input, Optional } from '@angular/core';
import { DisplayDensityToken, DisplayDensityBase } from '../../core/displayDensity';
import { IgxIconService } from '../../icon/public_api';
import { pinLeft, unpinLeft } from '@igniteui/material-icons-extended';
import { IgxGridToolbarTitleDirective, IgxGridToolbarActionsDirective } from './common';
import { GridBaseAPIService } from '../api.service';
/**
 * Provides a context-aware container component for UI operations for the grid components.
 *
 * @igxModule IgxGridToolbarModule
 *
 */
export class IgxGridToolbarComponent extends DisplayDensityBase {
    constructor(_displayDensityOptions, api, iconService, element) {
        super(_displayDensityOptions);
        this._displayDensityOptions = _displayDensityOptions;
        this.api = api;
        this.iconService = iconService;
        this.element = element;
        /**
         * When enabled, shows the indeterminate progress bar.
         *
         * @remarks
         * By default this will be toggled, when the default exporter component is present
         * and an exporting is in progress.
         */
        this.showProgress = false;
        /**
         * @hidden
         * @internal
         */
        this.defaultStyle = true;
        this.iconService.addSvgIconFromText(pinLeft.name, pinLeft.value, 'imx-icons');
        this.iconService.addSvgIconFromText(unpinLeft.name, unpinLeft.value, 'imx-icons');
    }
    /**
     * Gets/sets the grid component for the toolbar component.
     *
     * @remarks
     * Usually you should not set this property in the context of the default grid/tree grid.
     * The only grids that demands this to be set are the hierarchical child grids. For additional
     * information check the toolbar topic.
     */
    get grid() {
        if (this._grid) {
            return this._grid;
        }
        return this.api.grid;
    }
    set grid(value) {
        this._grid = value;
    }
    /** Returns the native DOM element of the toolbar component */
    get nativeElement() {
        return this.element.nativeElement;
    }
    /**
     * @hidden
     * @internal
     */
    get cosyStyle() {
        return this.displayDensity === 'cosy';
    }
    /**
     * @hidden
     * @internal
     */
    get compactStyle() {
        return this.displayDensity === 'compact';
    }
    /** @hidden @internal */
    ngOnDestroy() {
        var _a;
        (_a = this.sub) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
}
IgxGridToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-grid-toolbar',
                template: "<ng-template #title>\n    <ng-content select=\"[igxGridToolbarTitle],igx-grid-toolbar-title\"></ng-content>\n</ng-template>\n<igx-grid-toolbar-title *ngIf=\"!hasTitle\">{{ grid.toolbarTitle }}</igx-grid-toolbar-title>\n<ng-container *ngTemplateOutlet=\"title\"></ng-container>\n\n<div class=\"igx-grid-toolbar__custom-content\">\n    <ng-content></ng-content>\n</div>\n\n<ng-template #actions>\n    <ng-content select=\"[igxGridToolbarActions],igx-grid-toolbar-actions\"></ng-content>\n</ng-template>\n<igx-grid-toolbar-actions *ngIf=\"!hasActions\">\n    <igx-grid-toolbar-advanced-filtering *ngIf=\"grid.allowAdvancedFiltering\"></igx-grid-toolbar-advanced-filtering>\n    <igx-grid-toolbar-hiding *ngIf=\"grid.columnHiding\"></igx-grid-toolbar-hiding>\n    <igx-grid-toolbar-pinning *ngIf=\"grid.columnPinning\"></igx-grid-toolbar-pinning>\n    <igx-grid-toolbar-exporter *ngIf=\"grid.exportExcel || grid.exportCsv\" (exportStarted)=\"showProgress = true\" (exportEnded)=\"showProgress = false\">\n    </igx-grid-toolbar-exporter>\n</igx-grid-toolbar-actions>\n<ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n\n<div class=\"igx-grid-toolbar__progress-bar\" *ngIf=\"showProgress\">\n    <igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n</div>\n"
            },] }
];
IgxGridToolbarComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] },
    { type: GridBaseAPIService },
    { type: IgxIconService },
    { type: ElementRef }
];
IgxGridToolbarComponent.propDecorators = {
    showProgress: [{ type: Input }],
    grid: [{ type: Input }],
    hasTitle: [{ type: ContentChild, args: [IgxGridToolbarTitleDirective,] }],
    hasActions: [{ type: ContentChild, args: [IgxGridToolbarActionsDirective,] }],
    defaultStyle: [{ type: HostBinding, args: ['class.igx-grid-toolbar',] }],
    cosyStyle: [{ type: HostBinding, args: ['class.igx-grid-toolbar--cosy',] }],
    compactStyle: [{ type: HostBinding, args: ['class.igx-grid-toolbar--compact',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC10b29sYmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9ncmlkcy90b29sYmFyL2dyaWQtdG9vbGJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCxZQUFZLEVBQ1osVUFBVSxFQUNWLFdBQVcsRUFDWCxNQUFNLEVBQ04sS0FBSyxFQUVMLFFBQVEsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQTBCLG1CQUFtQixFQUFFLGtCQUFrQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDNUcsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdkUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLDhCQUE4QixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS25EOzs7OztHQUtHO0FBS0osTUFBTSxPQUFPLHVCQUF3QixTQUFRLGtCQUFrQjtJQStFM0QsWUFDdUQsc0JBQThDLEVBQ3pGLEdBQXdELEVBQ3hELFdBQTJCLEVBQzNCLE9BQWdDO1FBRXhDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBTHFCLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFDekYsUUFBRyxHQUFILEdBQUcsQ0FBcUQ7UUFDeEQsZ0JBQVcsR0FBWCxXQUFXLENBQWdCO1FBQzNCLFlBQU8sR0FBUCxPQUFPLENBQXlCO1FBakY1Qzs7Ozs7O1dBTUc7UUFFSSxpQkFBWSxHQUFHLEtBQUssQ0FBQztRQXlDNUI7OztXQUdHO1FBRUgsaUJBQVksR0FBRyxJQUFJLENBQUM7UUE4QmhCLElBQUksQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzlFLElBQUksQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3RGLENBQUM7SUE1RUQ7Ozs7Ozs7T0FPRztJQUNILElBQ0ksSUFBSTtRQUNKLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNaLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztTQUNyQjtRQUNELE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUVELElBQUksSUFBSSxDQUFDLEtBQTJCO1FBQ2hDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCw4REFBOEQ7SUFDOUQsSUFBVyxhQUFhO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7SUFDdEMsQ0FBQztJQXVCRDs7O09BR0c7SUFDSCxJQUNJLFNBQVM7UUFDaEIsT0FBTyxJQUFJLENBQUMsY0FBYyxLQUFLLE1BQU0sQ0FBQztJQUN2QyxDQUFDO0lBRUc7OztPQUdHO0lBQ0gsSUFDSSxZQUFZO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGNBQWMsS0FBSyxTQUFTLENBQUM7SUFDMUMsQ0FBQztJQWdCRyx3QkFBd0I7SUFDeEIsV0FBVzs7UUFDUCxNQUFBLElBQUksQ0FBQyxHQUFHLDBDQUFFLFdBQVcsR0FBRztJQUM1QixDQUFDOzs7WUFqR0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLG93Q0FBNEM7YUFDL0M7Ozs0Q0FpRlEsUUFBUSxZQUFJLE1BQU0sU0FBQyxtQkFBbUI7WUEvRnRDLGtCQUFrQjtZQUhsQixjQUFjO1lBVG5CLFVBQVU7OzsyQkFvQ1QsS0FBSzttQkFXTCxLQUFLO3VCQXFCTCxZQUFZLFNBQUMsNEJBQTRCO3lCQU96QyxZQUFZLFNBQUMsOEJBQThCOzJCQU8zQyxXQUFXLFNBQUMsd0JBQXdCO3dCQU9wQyxXQUFXLFNBQUMsOEJBQThCOzJCQVMxQyxXQUFXLFNBQUMsaUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgQ29udGVudENoaWxkLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE9uRGVzdHJveSxcbiAgICBPcHRpb25hbFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSURpc3BsYXlEZW5zaXR5T3B0aW9ucywgRGlzcGxheURlbnNpdHlUb2tlbiwgRGlzcGxheURlbnNpdHlCYXNlIH0gZnJvbSAnLi4vLi4vY29yZS9kaXNwbGF5RGVuc2l0eSc7XG5pbXBvcnQgeyBJZ3hJY29uU2VydmljZSB9IGZyb20gJy4uLy4uL2ljb24vcHVibGljX2FwaSc7XG5pbXBvcnQgeyBwaW5MZWZ0LCB1bnBpbkxlZnQgfSBmcm9tICdAaWduaXRldWkvbWF0ZXJpYWwtaWNvbnMtZXh0ZW5kZWQnO1xuaW1wb3J0IHsgSWd4R3JpZFRvb2xiYXJUaXRsZURpcmVjdGl2ZSwgSWd4R3JpZFRvb2xiYXJBY3Rpb25zRGlyZWN0aXZlIH0gZnJvbSAnLi9jb21tb24nO1xuaW1wb3J0IHsgR3JpZEJhc2VBUElTZXJ2aWNlIH0gZnJvbSAnLi4vYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgSWd4R3JpZEJhc2VEaXJlY3RpdmUgfSBmcm9tICcuLi9ncmlkLWJhc2UuZGlyZWN0aXZlJztcbmltcG9ydCB7IEdyaWRUeXBlIH0gZnJvbSAnLi4vY29tbW9uL2dyaWQuaW50ZXJmYWNlJztcblxuXG4gLyoqXG4gICogUHJvdmlkZXMgYSBjb250ZXh0LWF3YXJlIGNvbnRhaW5lciBjb21wb25lbnQgZm9yIFVJIG9wZXJhdGlvbnMgZm9yIHRoZSBncmlkIGNvbXBvbmVudHMuXG4gICpcbiAgKiBAaWd4TW9kdWxlIElneEdyaWRUb29sYmFyTW9kdWxlXG4gICpcbiAgKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaWd4LWdyaWQtdG9vbGJhcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2dyaWQtdG9vbGJhci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSWd4R3JpZFRvb2xiYXJDb21wb25lbnQgZXh0ZW5kcyBEaXNwbGF5RGVuc2l0eUJhc2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gICAgLyoqXG4gICAgICogV2hlbiBlbmFibGVkLCBzaG93cyB0aGUgaW5kZXRlcm1pbmF0ZSBwcm9ncmVzcyBiYXIuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIEJ5IGRlZmF1bHQgdGhpcyB3aWxsIGJlIHRvZ2dsZWQsIHdoZW4gdGhlIGRlZmF1bHQgZXhwb3J0ZXIgY29tcG9uZW50IGlzIHByZXNlbnRcbiAgICAgKiBhbmQgYW4gZXhwb3J0aW5nIGlzIGluIHByb2dyZXNzLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHNob3dQcm9ncmVzcyA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogR2V0cy9zZXRzIHRoZSBncmlkIGNvbXBvbmVudCBmb3IgdGhlIHRvb2xiYXIgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBVc3VhbGx5IHlvdSBzaG91bGQgbm90IHNldCB0aGlzIHByb3BlcnR5IGluIHRoZSBjb250ZXh0IG9mIHRoZSBkZWZhdWx0IGdyaWQvdHJlZSBncmlkLlxuICAgICAqIFRoZSBvbmx5IGdyaWRzIHRoYXQgZGVtYW5kcyB0aGlzIHRvIGJlIHNldCBhcmUgdGhlIGhpZXJhcmNoaWNhbCBjaGlsZCBncmlkcy4gRm9yIGFkZGl0aW9uYWxcbiAgICAgKiBpbmZvcm1hdGlvbiBjaGVjayB0aGUgdG9vbGJhciB0b3BpYy5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGdldCBncmlkKCkge1xuICAgICAgICBpZiAodGhpcy5fZ3JpZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dyaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpLmdyaWQ7XG4gICAgfVxuXG4gICAgc2V0IGdyaWQodmFsdWU6IElneEdyaWRCYXNlRGlyZWN0aXZlKSB7XG4gICAgICAgIHRoaXMuX2dyaWQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKiogUmV0dXJucyB0aGUgbmF0aXZlIERPTSBlbGVtZW50IG9mIHRoZSB0b29sYmFyIGNvbXBvbmVudCAqL1xuICAgIHB1YmxpYyBnZXQgbmF0aXZlRWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBAQ29udGVudENoaWxkKElneEdyaWRUb29sYmFyVGl0bGVEaXJlY3RpdmUpXG4gICAgcHVibGljIGhhc1RpdGxlOiBJZ3hHcmlkVG9vbGJhclRpdGxlRGlyZWN0aXZlO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIEBDb250ZW50Q2hpbGQoSWd4R3JpZFRvb2xiYXJBY3Rpb25zRGlyZWN0aXZlKVxuICAgIHB1YmxpYyBoYXNBY3Rpb25zOiBJZ3hHcmlkVG9vbGJhckFjdGlvbnNEaXJlY3RpdmU7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtZ3JpZC10b29sYmFyJylcbiAgICBkZWZhdWx0U3R5bGUgPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWdyaWQtdG9vbGJhci0tY29zeScpXG4gICAgZ2V0IGNvc3lTdHlsZSgpIHtcbiByZXR1cm4gdGhpcy5kaXNwbGF5RGVuc2l0eSA9PT0gJ2Nvc3knO1xufVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWdyaWQtdG9vbGJhci0tY29tcGFjdCcpXG4gICAgZ2V0IGNvbXBhY3RTdHlsZSgpIHtcbiByZXR1cm4gdGhpcy5kaXNwbGF5RGVuc2l0eSA9PT0gJ2NvbXBhY3QnO1xufVxuXG4gICAgcHJvdGVjdGVkIF9ncmlkOiBJZ3hHcmlkQmFzZURpcmVjdGl2ZTtcbiAgICBwcm90ZWN0ZWQgc3ViOiBTdWJzY3JpcHRpb247XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChEaXNwbGF5RGVuc2l0eVRva2VuKSBwcm90ZWN0ZWQgX2Rpc3BsYXlEZW5zaXR5T3B0aW9uczogSURpc3BsYXlEZW5zaXR5T3B0aW9ucyxcbiAgICAgICAgcHJpdmF0ZSBhcGk6IEdyaWRCYXNlQVBJU2VydmljZTxJZ3hHcmlkQmFzZURpcmVjdGl2ZSAmIEdyaWRUeXBlPixcbiAgICAgICAgcHJpdmF0ZSBpY29uU2VydmljZTogSWd4SWNvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD5cbiAgICApIHtcbiAgICAgICAgc3VwZXIoX2Rpc3BsYXlEZW5zaXR5T3B0aW9ucyk7XG4gICAgICAgIHRoaXMuaWNvblNlcnZpY2UuYWRkU3ZnSWNvbkZyb21UZXh0KHBpbkxlZnQubmFtZSwgcGluTGVmdC52YWx1ZSwgJ2lteC1pY29ucycpO1xuICAgICAgICB0aGlzLmljb25TZXJ2aWNlLmFkZFN2Z0ljb25Gcm9tVGV4dCh1bnBpbkxlZnQubmFtZSwgdW5waW5MZWZ0LnZhbHVlLCAnaW14LWljb25zJyk7XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc3ViPy51bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbiJdfQ==