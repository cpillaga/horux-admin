{"version":3,"sources":["../../../projects/ngx-bootstrap-spinner/src/lib/ngx-spinner.enum.ts","../../../projects/ngx-bootstrap-spinner/src/lib/ngx-spinner.service.ts","../../../projects/ngx-bootstrap-spinner/src/lib/ngx-spinner.component.ts","../../../projects/ngx-bootstrap-spinner/src/lib/safe-html.pipe.ts","../../../projects/ngx-bootstrap-spinner/src/lib/ngx-spinner.module.ts"],"names":["DEFAULTS","NgxSpinner","init","Object","assign","this","NgxSpinnerService","spinnerObservable","BehaviorSubject","prototype","getSpinner","name","asObservable","pipe","filter","x","show","spinner","_this","setTimeout","Promise","resolve","_reject","keys","length","next","hide","debounce","Injectable","args","providedIn","NgxSpinnerComponent","spinnerService","changeDetector","elementRef","isButtonSpinner","autoDisableButton","ngUnsubscribe","Subject","setDefaultOptions","bdColor","size","color","type","fullScreen","zIndex","loaderTemplate","loadingTextTemplate","ngOnInit","subscribe","nativeElement","closest","disabled","takeUntil","onInputChange","markForCheck","ngOnChanges","changes","propName","changedProp","isFirstChange","currentValue","previousValue","getClass","sizeClass","toLowerCase","class","ngOnDestroy","complete","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","ElementRef","Input","SafeHtmlPipe","_sanitizer","transform","v","bypassSecurityTrustHtml","Pipe","DomSanitizer","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["export type LOADERS = 'border' | 'grow';\n\nexport const DEFAULTS = {\n  BD_COLOR: 'rgba(51,51,51,0.8)',\n  SPINNER_COLOR: '#fff',\n  SPINNER_TYPE: 'border',\n  Z_INDEX: 99999,\n};\n\nexport const PRIMARY_SPINNER = 'primary';\n\nexport type Size = 'default' | 'small';\n\nexport interface Spinner {\n  bdColor?: string;\n  size?: Size;\n  color?: string;\n  type?: string;\n  fullScreen?: boolean;\n  zIndex?: number;\n  loaderTemplate?: string;\n  loadingTextTemplate?:string;\n  autoDisableButton?:boolean;\n}\n\nexport class NgxSpinner {\n  name: string;\n  bdColor: string;\n  size: Size;\n  color: string;\n  type: string;\n  class: string[];\n  fullScreen: boolean;\n  show: boolean;\n  zIndex: number;\n  loaderTemplate: string;\n  loadingTextTemplate:string;\n  autoDisableButton:boolean;\n\n  constructor(init?: Partial<NgxSpinner>) {\n    Object.assign(this, init);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { NgxSpinner, PRIMARY_SPINNER, Spinner } from './ngx-spinner.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxSpinnerService {\n  /**\n   * Spinner observable\n   *\n   * @memberof NgxSpinnerService\n   */\n  // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\n  private spinnerObservable = new BehaviorSubject<NgxSpinner>(null);\n  /**\n   * Creates an instance of NgxSpinnerService.\n   * @memberof NgxSpinnerService\n   */\n  constructor() { }\n  /**\n  * Get subscription of desired spinner\n  * @memberof NgxSpinnerService\n  **/\n  getSpinner(name: string): Observable<NgxSpinner> {\n    return this.spinnerObservable.asObservable().pipe(filter((x: NgxSpinner) => x && x.name === name));\n  }\n  /**\n   * To show spinner\n   *\n   * @memberof NgxSpinnerService\n   */\n  show(name: string = PRIMARY_SPINNER, spinner?: Spinner) {\n    setTimeout(() => {\n      const showPromise = new Promise((resolve, _reject) => {\n        if (spinner && Object.keys(spinner).length) {\n          spinner['name'] = name;\n          this.spinnerObservable.next(new NgxSpinner({ ...spinner, show: true }));\n          resolve(true);\n        } else {\n          this.spinnerObservable.next(new NgxSpinner({ name, show: true }));\n          resolve(true);\n        }\n      });\n      return showPromise;\n    }, 10);\n  }\n  /**\n  * To hide spinner\n  *\n  * @memberof NgxSpinnerService\n  */\n  hide(name: string = PRIMARY_SPINNER, debounce: number = 10) {\n    setTimeout(() => {\n      const hidePromise = new Promise((resolve, _reject) => {\n        this.spinnerObservable.next(new NgxSpinner({ name, show: false }));\n        resolve(true);\n      });\n      return hidePromise;\n    }, debounce);\n  }\n}\n","import {\n  Component,\n  OnDestroy,\n  Input,\n  OnInit,\n  OnChanges,\n  SimpleChange,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ElementRef\n} from '@angular/core';\nimport { NgxSpinnerService } from './ngx-spinner.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DEFAULTS, Size, NgxSpinner, PRIMARY_SPINNER, LOADERS } from './ngx-spinner.enum';\n// import { trigger, state, style, transition, animate } from '@angular/animations';\n\n@Component({\n  selector: 'ngx-bootstrap-spinner',\n  templateUrl: 'ngx-spinner.component.html',\n  styleUrls: ['ngx-spinner.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // animations: [\n  //   trigger('fadeIn', [\n  //     state('in', style({ opacity: 1 })),\n  //     transition(':enter', [\n  //       style({ opacity: 0 }),\n  //       animate(300)\n  //     ]),\n  //     transition(':leave',\n  //       animate(200, style({ opacity: 0 })))\n  //   ])\n  // ]\n})\nexport class NgxSpinnerComponent implements OnDestroy, OnInit, OnChanges {\n\n  /**\n   * To set backdrop color\n   * Only supports RGBA color format\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() bdColor: string;\n  /**\n   * To set spinner size\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() size: Size;\n  /**\n   * To set spinner color(DEFAULTS.SPINNER_COLOR)\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() color: string;\n  /**\n   * To set type of spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() type: string;\n  /**\n   * To toggle fullscreen mode\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() fullScreen: boolean;\n  /**\n   * Spinner name\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() name: string;\n  /**\n   * z-index value\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() zIndex: number;\n  /**\n   * Custom loader for spinner/loader\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() loaderTemplate: string;\n  /**\n * display loading text\n *\n * @memberof NgxSpinnerComponent\n */\n  @Input() loadingText: string;\n  /**\n * Custom loading text Template for spinner/loader\n *\n * @memberof NgxSpinnerComponent\n */\n  @Input() loadingTextTemplate: string;\n  /**\n   * button Spinner.\n   * https://getbootstrap.com/docs/4.4/components/spinners/#buttons\n   *\n   * @memberof NgxSpinnerComponent\n   *\n   */\n  @Input() isButtonSpinner: boolean = false;\n\n  /**\n   * isButtonSpinner is true and when the spinner shown,the button disabled set to true\n   *\n   * @memberof NgxSpinnerComponent\n   *\n   */\n  @Input() autoDisableButton: boolean = false;\n\n  /**\n   * Spinner Object\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  spinner: NgxSpinner = new NgxSpinner();\n  /**\n   * Show spinner\n   *\n   * @memberof NgxSpinnerComponent\n  **/\n  show: boolean;\n  /**\n   * Unsubscribe from spinner's observable\n   *\n   * @memberof NgxSpinnerComponent\n  **/\n  ngUnsubscribe: Subject<void> = new Subject();\n\n  /**\n   * Creates an instance of NgxSpinnerComponent.\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  constructor(private spinnerService: NgxSpinnerService, private changeDetector: ChangeDetectorRef, private elementRef: ElementRef) {\n    this.bdColor = DEFAULTS.BD_COLOR;\n    this.zIndex = DEFAULTS.Z_INDEX;\n    this.color = DEFAULTS.SPINNER_COLOR;\n    this.type = DEFAULTS.SPINNER_TYPE;\n    this.size = 'default';\n    this.fullScreen = true;\n    this.name = PRIMARY_SPINNER;\n    this.loaderTemplate = null;\n\n    this.show = false;\n  }\n  /**\n   * Initialization method\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnInit() {\n    this.setDefaultOptions();\n    this.spinnerService.getSpinner(this.name).subscribe(x => {\n      if (this.isButtonSpinner && this.autoDisableButton) {\n        let button = (this.elementRef.nativeElement as HTMLElement).closest(\"button\");\n        button.disabled = x.show;\n      }\n    });\n    this.spinnerService.getSpinner(this.name)\n      .pipe(\n        takeUntil(this.ngUnsubscribe)\n      )\n      .subscribe((spinner: NgxSpinner) => {\n        this.setDefaultOptions();\n        Object.assign(this.spinner, spinner);\n        if (spinner.show) {\n          this.onInputChange();\n        }\n        this.changeDetector.markForCheck();\n      });\n  }\n  /**\n   * To set default ngx-spinner options\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  setDefaultOptions = () => {\n    this.spinner = new NgxSpinner({\n      name: this.name,\n      bdColor: this.bdColor,\n      size: this.size,\n      color: this.color,\n      type: this.type,\n      fullScreen: this.fullScreen,\n      show: this.show,\n      zIndex: this.zIndex,\n      loaderTemplate: this.loaderTemplate,\n      loadingTextTemplate: this.loadingTextTemplate,\n      autoDisableButton:this.autoDisableButton\n    });\n  }\n  /**\n   * On changes event for input variables\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnChanges(changes: { [propKey: string]: SimpleChange }) {\n    for (const propName in changes) {\n      if (propName) {\n        const changedProp = changes[propName];\n        if (changedProp.isFirstChange()) {\n          return;\n        } else if (typeof changedProp.currentValue !== 'undefined' && changedProp.currentValue !== changedProp.previousValue) {\n          if (changedProp.currentValue !== '') {\n            this.spinner[propName] = changedProp.currentValue;\n          }\n        }\n      }\n    }\n  }\n  /**\n   * To get class for spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  getClass(type: string, size: Size): string[] {\n    let sizeClass = '';\n    switch (size.toLowerCase()) {\n      case 'small':\n        sizeClass = 'sm';\n        break;\n      default:\n        break;\n    }\n    if (sizeClass == '')\n      return ['spinner-' + type];\n    else\n      return ['spinner-' + type, 'spinner-' + type + '-' + sizeClass];\n  }\n  /**\n   * Check if input variables have changed\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  onInputChange() {\n    this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\n  }\n  /**\n   * Component destroy event\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnDestroy() {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n}\n","import { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'safeHtml'\n})\nexport class SafeHtmlPipe implements PipeTransform {\n\n  constructor(private _sanitizer: DomSanitizer) {\n  }\n\n  transform(v: string): SafeHtml {\n    if (v) {\n      return this._sanitizer.bypassSecurityTrustHtml(v);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxSpinnerComponent } from './ngx-spinner.component';\nimport { SafeHtmlPipe } from './safe-html.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [NgxSpinnerComponent, SafeHtmlPipe],\n  exports: [NgxSpinnerComponent]\n})\nexport class NgxSpinnerModule { }\n"]}