{"version":3,"file":"ngx-bootstrap-spinner.umd.js","sources":["../../../projects/ngx-bootstrap-spinner/src/lib/ngx-spinner.enum.ts","../../../projects/ngx-bootstrap-spinner/src/lib/ngx-spinner.service.ts","../../../projects/ngx-bootstrap-spinner/src/lib/ngx-spinner.component.ts","../../../projects/ngx-bootstrap-spinner/src/lib/safe-html.pipe.ts","../../../projects/ngx-bootstrap-spinner/src/lib/ngx-spinner.module.ts","../../../projects/ngx-bootstrap-spinner/src/public_api.ts","../../../projects/ngx-bootstrap-spinner/src/ngx-bootstrap-spinner.ts"],"sourcesContent":["export type LOADERS = 'border' | 'grow';\n\nexport const DEFAULTS = {\n  BD_COLOR: 'rgba(51,51,51,0.8)',\n  SPINNER_COLOR: '#fff',\n  SPINNER_TYPE: 'border',\n  Z_INDEX: 99999,\n};\n\nexport const PRIMARY_SPINNER = 'primary';\n\nexport type Size = 'default' | 'small';\n\nexport interface Spinner {\n  bdColor?: string;\n  size?: Size;\n  color?: string;\n  type?: string;\n  fullScreen?: boolean;\n  zIndex?: number;\n  loaderTemplate?: string;\n  loadingTextTemplate?:string;\n  autoDisableButton?:boolean;\n}\n\nexport class NgxSpinner {\n  name: string;\n  bdColor: string;\n  size: Size;\n  color: string;\n  type: string;\n  class: string[];\n  fullScreen: boolean;\n  show: boolean;\n  zIndex: number;\n  loaderTemplate: string;\n  loadingTextTemplate:string;\n  autoDisableButton:boolean;\n\n  constructor(init?: Partial<NgxSpinner>) {\n    Object.assign(this, init);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { NgxSpinner, PRIMARY_SPINNER, Spinner } from './ngx-spinner.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxSpinnerService {\n  /**\n   * Spinner observable\n   *\n   * @memberof NgxSpinnerService\n   */\n  // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\n  private spinnerObservable = new BehaviorSubject<NgxSpinner>(null);\n  /**\n   * Creates an instance of NgxSpinnerService.\n   * @memberof NgxSpinnerService\n   */\n  constructor() { }\n  /**\n  * Get subscription of desired spinner\n  * @memberof NgxSpinnerService\n  **/\n  getSpinner(name: string): Observable<NgxSpinner> {\n    return this.spinnerObservable.asObservable().pipe(filter((x: NgxSpinner) => x && x.name === name));\n  }\n  /**\n   * To show spinner\n   *\n   * @memberof NgxSpinnerService\n   */\n  show(name: string = PRIMARY_SPINNER, spinner?: Spinner) {\n    setTimeout(() => {\n      const showPromise = new Promise((resolve, _reject) => {\n        if (spinner && Object.keys(spinner).length) {\n          spinner['name'] = name;\n          this.spinnerObservable.next(new NgxSpinner({ ...spinner, show: true }));\n          resolve(true);\n        } else {\n          this.spinnerObservable.next(new NgxSpinner({ name, show: true }));\n          resolve(true);\n        }\n      });\n      return showPromise;\n    }, 10);\n  }\n  /**\n  * To hide spinner\n  *\n  * @memberof NgxSpinnerService\n  */\n  hide(name: string = PRIMARY_SPINNER, debounce: number = 10) {\n    setTimeout(() => {\n      const hidePromise = new Promise((resolve, _reject) => {\n        this.spinnerObservable.next(new NgxSpinner({ name, show: false }));\n        resolve(true);\n      });\n      return hidePromise;\n    }, debounce);\n  }\n}\n","import {\n  Component,\n  OnDestroy,\n  Input,\n  OnInit,\n  OnChanges,\n  SimpleChange,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ElementRef\n} from '@angular/core';\nimport { NgxSpinnerService } from './ngx-spinner.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DEFAULTS, Size, NgxSpinner, PRIMARY_SPINNER, LOADERS } from './ngx-spinner.enum';\n// import { trigger, state, style, transition, animate } from '@angular/animations';\n\n@Component({\n  selector: 'ngx-bootstrap-spinner',\n  templateUrl: 'ngx-spinner.component.html',\n  styleUrls: ['ngx-spinner.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // animations: [\n  //   trigger('fadeIn', [\n  //     state('in', style({ opacity: 1 })),\n  //     transition(':enter', [\n  //       style({ opacity: 0 }),\n  //       animate(300)\n  //     ]),\n  //     transition(':leave',\n  //       animate(200, style({ opacity: 0 })))\n  //   ])\n  // ]\n})\nexport class NgxSpinnerComponent implements OnDestroy, OnInit, OnChanges {\n\n  /**\n   * To set backdrop color\n   * Only supports RGBA color format\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() bdColor: string;\n  /**\n   * To set spinner size\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() size: Size;\n  /**\n   * To set spinner color(DEFAULTS.SPINNER_COLOR)\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() color: string;\n  /**\n   * To set type of spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() type: string;\n  /**\n   * To toggle fullscreen mode\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() fullScreen: boolean;\n  /**\n   * Spinner name\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() name: string;\n  /**\n   * z-index value\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() zIndex: number;\n  /**\n   * Custom loader for spinner/loader\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() loaderTemplate: string;\n  /**\n * display loading text\n *\n * @memberof NgxSpinnerComponent\n */\n  @Input() loadingText: string;\n  /**\n * Custom loading text Template for spinner/loader\n *\n * @memberof NgxSpinnerComponent\n */\n  @Input() loadingTextTemplate: string;\n  /**\n   * button Spinner.\n   * https://getbootstrap.com/docs/4.4/components/spinners/#buttons\n   *\n   * @memberof NgxSpinnerComponent\n   *\n   */\n  @Input() isButtonSpinner: boolean = false;\n\n  /**\n   * isButtonSpinner is true and when the spinner shown,the button disabled set to true\n   *\n   * @memberof NgxSpinnerComponent\n   *\n   */\n  @Input() autoDisableButton: boolean = false;\n\n  /**\n   * Spinner Object\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  spinner: NgxSpinner = new NgxSpinner();\n  /**\n   * Show spinner\n   *\n   * @memberof NgxSpinnerComponent\n  **/\n  show: boolean;\n  /**\n   * Unsubscribe from spinner's observable\n   *\n   * @memberof NgxSpinnerComponent\n  **/\n  ngUnsubscribe: Subject<void> = new Subject();\n\n  /**\n   * Creates an instance of NgxSpinnerComponent.\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  constructor(private spinnerService: NgxSpinnerService, private changeDetector: ChangeDetectorRef, private elementRef: ElementRef) {\n    this.bdColor = DEFAULTS.BD_COLOR;\n    this.zIndex = DEFAULTS.Z_INDEX;\n    this.color = DEFAULTS.SPINNER_COLOR;\n    this.type = DEFAULTS.SPINNER_TYPE;\n    this.size = 'default';\n    this.fullScreen = true;\n    this.name = PRIMARY_SPINNER;\n    this.loaderTemplate = null;\n\n    this.show = false;\n  }\n  /**\n   * Initialization method\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnInit() {\n    this.setDefaultOptions();\n    this.spinnerService.getSpinner(this.name).subscribe(x => {\n      if (this.isButtonSpinner && this.autoDisableButton) {\n        let button = (this.elementRef.nativeElement as HTMLElement).closest(\"button\");\n        button.disabled = x.show;\n      }\n    });\n    this.spinnerService.getSpinner(this.name)\n      .pipe(\n        takeUntil(this.ngUnsubscribe)\n      )\n      .subscribe((spinner: NgxSpinner) => {\n        this.setDefaultOptions();\n        Object.assign(this.spinner, spinner);\n        if (spinner.show) {\n          this.onInputChange();\n        }\n        this.changeDetector.markForCheck();\n      });\n  }\n  /**\n   * To set default ngx-spinner options\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  setDefaultOptions = () => {\n    this.spinner = new NgxSpinner({\n      name: this.name,\n      bdColor: this.bdColor,\n      size: this.size,\n      color: this.color,\n      type: this.type,\n      fullScreen: this.fullScreen,\n      show: this.show,\n      zIndex: this.zIndex,\n      loaderTemplate: this.loaderTemplate,\n      loadingTextTemplate: this.loadingTextTemplate,\n      autoDisableButton:this.autoDisableButton\n    });\n  }\n  /**\n   * On changes event for input variables\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnChanges(changes: { [propKey: string]: SimpleChange }) {\n    for (const propName in changes) {\n      if (propName) {\n        const changedProp = changes[propName];\n        if (changedProp.isFirstChange()) {\n          return;\n        } else if (typeof changedProp.currentValue !== 'undefined' && changedProp.currentValue !== changedProp.previousValue) {\n          if (changedProp.currentValue !== '') {\n            this.spinner[propName] = changedProp.currentValue;\n          }\n        }\n      }\n    }\n  }\n  /**\n   * To get class for spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  getClass(type: string, size: Size): string[] {\n    let sizeClass = '';\n    switch (size.toLowerCase()) {\n      case 'small':\n        sizeClass = 'sm';\n        break;\n      default:\n        break;\n    }\n    if (sizeClass == '')\n      return ['spinner-' + type];\n    else\n      return ['spinner-' + type, 'spinner-' + type + '-' + sizeClass];\n  }\n  /**\n   * Check if input variables have changed\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  onInputChange() {\n    this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\n  }\n  /**\n   * Component destroy event\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnDestroy() {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n}\n","import { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'safeHtml'\n})\nexport class SafeHtmlPipe implements PipeTransform {\n\n  constructor(private _sanitizer: DomSanitizer) {\n  }\n\n  transform(v: string): SafeHtml {\n    if (v) {\n      return this._sanitizer.bypassSecurityTrustHtml(v);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxSpinnerComponent } from './ngx-spinner.component';\nimport { SafeHtmlPipe } from './safe-html.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [NgxSpinnerComponent, SafeHtmlPipe],\n  exports: [NgxSpinnerComponent]\n})\nexport class NgxSpinnerModule { }\n","/*\n * Public API Surface of ngx-bootstrap-spinner\n */\nexport * from './lib/ngx-spinner.service';\nexport * from './lib/ngx-spinner.component';\nexport * from './lib/ngx-spinner.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {SafeHtmlPipe as ɵa} from './lib/safe-html.pipe';"],"names":["BehaviorSubject","filter","Injectable","Subject","takeUntil","Component","ChangeDetectionStrategy","ChangeDetectorRef","ElementRef","Input","Pipe","DomSanitizer","NgModule","CommonModule"],"mappings":"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"}