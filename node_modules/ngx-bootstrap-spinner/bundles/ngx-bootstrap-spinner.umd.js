(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('ngx-bootstrap-spinner', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common', '@angular/platform-browser'], factory) :
    (global = global || self, factory(global['ngx-bootstrap-spinner'] = {}, global.ng.core, global.rxjs, global.rxjs.operators, global.ng.common, global.ng.platformBrowser));
}(this, (function (exports, i0, rxjs, operators, common, platformBrowser) { 'use strict';

    var DEFAULTS = {
        BD_COLOR: 'rgba(51,51,51,0.8)',
        SPINNER_COLOR: '#fff',
        SPINNER_TYPE: 'border',
        Z_INDEX: 99999,
    };
    var PRIMARY_SPINNER = 'primary';
    var NgxSpinner = /** @class */ (function () {
        function NgxSpinner(init) {
            Object.assign(this, init);
        }
        return NgxSpinner;
    }());

    var NgxSpinnerService = /** @class */ (function () {
        /**
         * Creates an instance of NgxSpinnerService.
         * @memberof NgxSpinnerService
         */
        function NgxSpinnerService() {
            /**
             * Spinner observable
             *
             * @memberof NgxSpinnerService
             */
            // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);
            this.spinnerObservable = new rxjs.BehaviorSubject(null);
        }
        /**
        * Get subscription of desired spinner
        * @memberof NgxSpinnerService
        **/
        NgxSpinnerService.prototype.getSpinner = function (name) {
            return this.spinnerObservable.asObservable().pipe(operators.filter(function (x) { return x && x.name === name; }));
        };
        /**
         * To show spinner
         *
         * @memberof NgxSpinnerService
         */
        NgxSpinnerService.prototype.show = function (name, spinner) {
            var _this = this;
            if (name === void 0) { name = PRIMARY_SPINNER; }
            setTimeout(function () {
                var showPromise = new Promise(function (resolve, _reject) {
                    if (spinner && Object.keys(spinner).length) {
                        spinner['name'] = name;
                        _this.spinnerObservable.next(new NgxSpinner(Object.assign(Object.assign({}, spinner), { show: true })));
                        resolve(true);
                    }
                    else {
                        _this.spinnerObservable.next(new NgxSpinner({ name: name, show: true }));
                        resolve(true);
                    }
                });
                return showPromise;
            }, 10);
        };
        /**
        * To hide spinner
        *
        * @memberof NgxSpinnerService
        */
        NgxSpinnerService.prototype.hide = function (name, debounce) {
            var _this = this;
            if (name === void 0) { name = PRIMARY_SPINNER; }
            if (debounce === void 0) { debounce = 10; }
            setTimeout(function () {
                var hidePromise = new Promise(function (resolve, _reject) {
                    _this.spinnerObservable.next(new NgxSpinner({ name: name, show: false }));
                    resolve(true);
                });
                return hidePromise;
            }, debounce);
        };
        return NgxSpinnerService;
    }());
    NgxSpinnerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxSpinnerService_Factory() { return new NgxSpinnerService(); }, token: NgxSpinnerService, providedIn: "root" });
    NgxSpinnerService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    NgxSpinnerService.ctorParameters = function () { return []; };

    // import { trigger, state, style, transition, animate } from '@angular/animations';
    var NgxSpinnerComponent = /** @class */ (function () {
        /**
         * Creates an instance of NgxSpinnerComponent.
         *
         * @memberof NgxSpinnerComponent
         */
        function NgxSpinnerComponent(spinnerService, changeDetector, elementRef) {
            var _this = this;
            this.spinnerService = spinnerService;
            this.changeDetector = changeDetector;
            this.elementRef = elementRef;
            /**
             * button Spinner.
             * https://getbootstrap.com/docs/4.4/components/spinners/#buttons
             *
             * @memberof NgxSpinnerComponent
             *
             */
            this.isButtonSpinner = false;
            /**
             * isButtonSpinner is true and when the spinner shown,the button disabled set to true
             *
             * @memberof NgxSpinnerComponent
             *
             */
            this.autoDisableButton = false;
            /**
             * Spinner Object
             *
             * @memberof NgxSpinnerComponent
             */
            this.spinner = new NgxSpinner();
            /**
             * Unsubscribe from spinner's observable
             *
             * @memberof NgxSpinnerComponent
            **/
            this.ngUnsubscribe = new rxjs.Subject();
            /**
             * To set default ngx-spinner options
             *
             * @memberof NgxSpinnerComponent
             */
            this.setDefaultOptions = function () {
                _this.spinner = new NgxSpinner({
                    name: _this.name,
                    bdColor: _this.bdColor,
                    size: _this.size,
                    color: _this.color,
                    type: _this.type,
                    fullScreen: _this.fullScreen,
                    show: _this.show,
                    zIndex: _this.zIndex,
                    loaderTemplate: _this.loaderTemplate,
                    loadingTextTemplate: _this.loadingTextTemplate,
                    autoDisableButton: _this.autoDisableButton
                });
            };
            this.bdColor = DEFAULTS.BD_COLOR;
            this.zIndex = DEFAULTS.Z_INDEX;
            this.color = DEFAULTS.SPINNER_COLOR;
            this.type = DEFAULTS.SPINNER_TYPE;
            this.size = 'default';
            this.fullScreen = true;
            this.name = PRIMARY_SPINNER;
            this.loaderTemplate = null;
            this.show = false;
        }
        /**
         * Initialization method
         *
         * @memberof NgxSpinnerComponent
         */
        NgxSpinnerComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.setDefaultOptions();
            this.spinnerService.getSpinner(this.name).subscribe(function (x) {
                if (_this.isButtonSpinner && _this.autoDisableButton) {
                    var button = _this.elementRef.nativeElement.closest("button");
                    button.disabled = x.show;
                }
            });
            this.spinnerService.getSpinner(this.name)
                .pipe(operators.takeUntil(this.ngUnsubscribe))
                .subscribe(function (spinner) {
                _this.setDefaultOptions();
                Object.assign(_this.spinner, spinner);
                if (spinner.show) {
                    _this.onInputChange();
                }
                _this.changeDetector.markForCheck();
            });
        };
        /**
         * On changes event for input variables
         *
         * @memberof NgxSpinnerComponent
         */
        NgxSpinnerComponent.prototype.ngOnChanges = function (changes) {
            for (var propName in changes) {
                if (propName) {
                    var changedProp = changes[propName];
                    if (changedProp.isFirstChange()) {
                        return;
                    }
                    else if (typeof changedProp.currentValue !== 'undefined' && changedProp.currentValue !== changedProp.previousValue) {
                        if (changedProp.currentValue !== '') {
                            this.spinner[propName] = changedProp.currentValue;
                        }
                    }
                }
            }
        };
        /**
         * To get class for spinner
         *
         * @memberof NgxSpinnerComponent
         */
        NgxSpinnerComponent.prototype.getClass = function (type, size) {
            var sizeClass = '';
            switch (size.toLowerCase()) {
                case 'small':
                    sizeClass = 'sm';
                    break;
                default:
                    break;
            }
            if (sizeClass == '')
                return ['spinner-' + type];
            else
                return ['spinner-' + type, 'spinner-' + type + '-' + sizeClass];
        };
        /**
         * Check if input variables have changed
         *
         * @memberof NgxSpinnerComponent
         */
        NgxSpinnerComponent.prototype.onInputChange = function () {
            this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);
        };
        /**
         * Component destroy event
         *
         * @memberof NgxSpinnerComponent
         */
        NgxSpinnerComponent.prototype.ngOnDestroy = function () {
            this.ngUnsubscribe.next();
            this.ngUnsubscribe.complete();
        };
        return NgxSpinnerComponent;
    }());
    NgxSpinnerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'ngx-bootstrap-spinner',
                    template: "<div *ngIf=\"!isButtonSpinner&&spinner.show\"\r\n  class=\"overlay d-flex flex-column justify-content-center align-items-center\"\r\n  [style.background-color]=\"spinner.bdColor\" [style.z-index]=\"spinner.zIndex\"\r\n  [style.position]=\"spinner.fullScreen ? 'fixed' : 'absolute'\" [style.color]=\"spinner.color\">\r\n  <ng-container *ngTemplateOutlet=\"loadingTemplate\"></ng-container>\r\n</div>\r\n\r\n<ng-container *ngIf=\"isButtonSpinner&&spinner.show\" [ngTemplateOutlet]=\"loadingTemplate\">\r\n</ng-container>\r\n\r\n<ng-template #loadingTemplate>\r\n  <span *ngIf=\"!loaderTemplate\" [ngClass]=\"spinner.class\" role=\"status\" aria-hidden=\"true\">\r\n    <span class=\"sr-only\">{{loadingText}}</span>\r\n  </span>\r\n  <div *ngIf=\"loaderTemplate\" [innerHTML]=\"loaderTemplate | safeHtml\"></div>\r\n  <div *ngIf=\"!loadingTextTemplate\" [ngClass]=\"{'sr-only': isButtonSpinner,'loading-text':!isButtonSpinner}\">\r\n    {{loadingText}}\r\n  </div>\r\n  {{isButtonSpinner&&!loadingTextTemplate?loadingText:\"\"}}\r\n  <div *ngIf=\"loadingTextTemplate\" [innerHTML]=\"loadingTextTemplate | safeHtml\"></div>\r\n</ng-template>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    styles: [".overlay{height:100%;left:0;position:fixed;top:0;width:100%}"]
                },] }
    ];
    NgxSpinnerComponent.ctorParameters = function () { return [
        { type: NgxSpinnerService },
        { type: i0.ChangeDetectorRef },
        { type: i0.ElementRef }
    ]; };
    NgxSpinnerComponent.propDecorators = {
        bdColor: [{ type: i0.Input }],
        size: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        type: [{ type: i0.Input }],
        fullScreen: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        zIndex: [{ type: i0.Input }],
        loaderTemplate: [{ type: i0.Input }],
        loadingText: [{ type: i0.Input }],
        loadingTextTemplate: [{ type: i0.Input }],
        isButtonSpinner: [{ type: i0.Input }],
        autoDisableButton: [{ type: i0.Input }]
    };

    var SafeHtmlPipe = /** @class */ (function () {
        function SafeHtmlPipe(_sanitizer) {
            this._sanitizer = _sanitizer;
        }
        SafeHtmlPipe.prototype.transform = function (v) {
            if (v) {
                return this._sanitizer.bypassSecurityTrustHtml(v);
            }
        };
        return SafeHtmlPipe;
    }());
    SafeHtmlPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'safeHtml'
                },] }
    ];
    SafeHtmlPipe.ctorParameters = function () { return [
        { type: platformBrowser.DomSanitizer }
    ]; };

    var NgxSpinnerModule = /** @class */ (function () {
        function NgxSpinnerModule() {
        }
        return NgxSpinnerModule;
    }());
    NgxSpinnerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [NgxSpinnerComponent, SafeHtmlPipe],
                    exports: [NgxSpinnerComponent]
                },] }
    ];

    /*
     * Public API Surface of ngx-bootstrap-spinner
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgxSpinnerComponent = NgxSpinnerComponent;
    exports.NgxSpinnerModule = NgxSpinnerModule;
    exports.NgxSpinnerService = NgxSpinnerService;
    exports.ɵa = SafeHtmlPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-bootstrap-spinner.umd.js.map
