!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@angular/core"),require("rxjs"),require("rxjs/operators"),require("@angular/common"),require("@angular/platform-browser")):"function"==typeof define&&define.amd?define("ngx-bootstrap-spinner",["exports","@angular/core","rxjs","rxjs/operators","@angular/common","@angular/platform-browser"],n):n((e=e||self)["ngx-bootstrap-spinner"]={},e.ng.core,e.rxjs,e.rxjs.operators,e.ng.common,e.ng.platformBrowser)}(this,(function(e,n,t,r,o,i){"use strict";var s="rgba(51,51,51,0.8)",a="#fff",p="border",l=99999,u=function(e){Object.assign(this,e)},c=function(){function e(){this.spinnerObservable=new t.BehaviorSubject(null)}return e.prototype.getSpinner=function(e){return this.spinnerObservable.asObservable().pipe(r.filter((function(n){return n&&n.name===e})))},e.prototype.show=function(e,n){var t=this;void 0===e&&(e="primary"),setTimeout((function(){return new Promise((function(r,o){n&&Object.keys(n).length?(n.name=e,t.spinnerObservable.next(new u(Object.assign(Object.assign({},n),{show:!0}))),r(!0)):(t.spinnerObservable.next(new u({name:e,show:!0})),r(!0))}))}),10)},e.prototype.hide=function(e,n){var t=this;void 0===e&&(e="primary"),void 0===n&&(n=10),setTimeout((function(){return new Promise((function(n,r){t.spinnerObservable.next(new u({name:e,show:!1})),n(!0)}))}),n)},e}();c.ɵprov=n.ɵɵdefineInjectable({factory:function(){return new c},token:c,providedIn:"root"}),c.decorators=[{type:n.Injectable,args:[{providedIn:"root"}]}],c.ctorParameters=function(){return[]};var f=function(){function e(e,n,r){var o=this;this.spinnerService=e,this.changeDetector=n,this.elementRef=r,this.isButtonSpinner=!1,this.autoDisableButton=!1,this.spinner=new u,this.ngUnsubscribe=new t.Subject,this.setDefaultOptions=function(){o.spinner=new u({name:o.name,bdColor:o.bdColor,size:o.size,color:o.color,type:o.type,fullScreen:o.fullScreen,show:o.show,zIndex:o.zIndex,loaderTemplate:o.loaderTemplate,loadingTextTemplate:o.loadingTextTemplate,autoDisableButton:o.autoDisableButton})},this.bdColor=s,this.zIndex=l,this.color=a,this.type=p,this.size="default",this.fullScreen=!0,this.name="primary",this.loaderTemplate=null,this.show=!1}return e.prototype.ngOnInit=function(){var e=this;this.setDefaultOptions(),this.spinnerService.getSpinner(this.name).subscribe((function(n){e.isButtonSpinner&&e.autoDisableButton&&(e.elementRef.nativeElement.closest("button").disabled=n.show)})),this.spinnerService.getSpinner(this.name).pipe(r.takeUntil(this.ngUnsubscribe)).subscribe((function(n){e.setDefaultOptions(),Object.assign(e.spinner,n),n.show&&e.onInputChange(),e.changeDetector.markForCheck()}))},e.prototype.ngOnChanges=function(e){for(var n in e)if(n){var t=e[n];if(t.isFirstChange())return;void 0!==t.currentValue&&t.currentValue!==t.previousValue&&""!==t.currentValue&&(this.spinner[n]=t.currentValue)}},e.prototype.getClass=function(e,n){var t="";switch(n.toLowerCase()){case"small":t="sm"}return""==t?["spinner-"+e]:["spinner-"+e,"spinner-"+e+"-"+t]},e.prototype.onInputChange=function(){this.spinner.class=this.getClass(this.spinner.type,this.spinner.size)},e.prototype.ngOnDestroy=function(){this.ngUnsubscribe.next(),this.ngUnsubscribe.complete()},e}();f.decorators=[{type:n.Component,args:[{selector:"ngx-bootstrap-spinner",template:'<div *ngIf="!isButtonSpinner&&spinner.show"\r\n  class="overlay d-flex flex-column justify-content-center align-items-center"\r\n  [style.background-color]="spinner.bdColor" [style.z-index]="spinner.zIndex"\r\n  [style.position]="spinner.fullScreen ? \'fixed\' : \'absolute\'" [style.color]="spinner.color">\r\n  <ng-container *ngTemplateOutlet="loadingTemplate"></ng-container>\r\n</div>\r\n\r\n<ng-container *ngIf="isButtonSpinner&&spinner.show" [ngTemplateOutlet]="loadingTemplate">\r\n</ng-container>\r\n\r\n<ng-template #loadingTemplate>\r\n  <span *ngIf="!loaderTemplate" [ngClass]="spinner.class" role="status" aria-hidden="true">\r\n    <span class="sr-only">{{loadingText}}</span>\r\n  </span>\r\n  <div *ngIf="loaderTemplate" [innerHTML]="loaderTemplate | safeHtml"></div>\r\n  <div *ngIf="!loadingTextTemplate" [ngClass]="{\'sr-only\': isButtonSpinner,\'loading-text\':!isButtonSpinner}">\r\n    {{loadingText}}\r\n  </div>\r\n  {{isButtonSpinner&&!loadingTextTemplate?loadingText:""}}\r\n  <div *ngIf="loadingTextTemplate" [innerHTML]="loadingTextTemplate | safeHtml"></div>\r\n</ng-template>\r\n',changeDetection:n.ChangeDetectionStrategy.OnPush,styles:[".overlay{height:100%;left:0;position:fixed;top:0;width:100%}"]}]}],f.ctorParameters=function(){return[{type:c},{type:n.ChangeDetectorRef},{type:n.ElementRef}]},f.propDecorators={bdColor:[{type:n.Input}],size:[{type:n.Input}],color:[{type:n.Input}],type:[{type:n.Input}],fullScreen:[{type:n.Input}],name:[{type:n.Input}],zIndex:[{type:n.Input}],loaderTemplate:[{type:n.Input}],loadingText:[{type:n.Input}],loadingTextTemplate:[{type:n.Input}],isButtonSpinner:[{type:n.Input}],autoDisableButton:[{type:n.Input}]};var g=function(){function e(e){this._sanitizer=e}return e.prototype.transform=function(e){if(e)return this._sanitizer.bypassSecurityTrustHtml(e)},e}();g.decorators=[{type:n.Pipe,args:[{name:"safeHtml"}]}],g.ctorParameters=function(){return[{type:i.DomSanitizer}]};var d=function(){};d.decorators=[{type:n.NgModule,args:[{imports:[o.CommonModule],declarations:[f,g],exports:[f]}]}],e.NgxSpinnerComponent=f,e.NgxSpinnerModule=d,e.NgxSpinnerService=c,e.ɵa=g,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=ngx-bootstrap-spinner.umd.min.js.map